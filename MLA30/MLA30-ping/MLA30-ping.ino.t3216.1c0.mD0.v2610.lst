
C:\Users\Admin\AppData\Local\Temp\arduino_build_322596/MLA30-ping.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vector_default():
../../../../crt1/gcrt1.S:61
       0:	04 c6       	rjmp	.+3080   	; 0xc0a <__ctors_end>
       2:	00 00       	nop
../../../../crt1/gcrt1.S:67
       4:	36 c6       	rjmp	.+3180   	; 0xc72 <__bad_interrupt>
       6:	00 00       	nop
../../../../crt1/gcrt1.S:68
       8:	34 c6       	rjmp	.+3176   	; 0xc72 <__bad_interrupt>
       a:	00 00       	nop
../../../../crt1/gcrt1.S:69
       c:	0c 94 8a 18 	jmp	0x3114	; 0x3114 <__vector_3>
../../../../crt1/gcrt1.S:70
      10:	0c 94 87 18 	jmp	0x310e	; 0x310e <__vector_4>
../../../../crt1/gcrt1.S:71
      14:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__vector_5>
../../../../crt1/gcrt1.S:72
      18:	2c c6       	rjmp	.+3160   	; 0xc72 <__bad_interrupt>
      1a:	00 00       	nop
../../../../crt1/gcrt1.S:73
      1c:	2a c6       	rjmp	.+3156   	; 0xc72 <__bad_interrupt>
      1e:	00 00       	nop
../../../../crt1/gcrt1.S:74
      20:	28 c6       	rjmp	.+3152   	; 0xc72 <__bad_interrupt>
      22:	00 00       	nop
../../../../crt1/gcrt1.S:75
      24:	26 c6       	rjmp	.+3148   	; 0xc72 <__bad_interrupt>
      26:	00 00       	nop
../../../../crt1/gcrt1.S:76
      28:	24 c6       	rjmp	.+3144   	; 0xc72 <__bad_interrupt>
      2a:	00 00       	nop
../../../../crt1/gcrt1.S:77
      2c:	22 c6       	rjmp	.+3140   	; 0xc72 <__bad_interrupt>
      2e:	00 00       	nop
../../../../crt1/gcrt1.S:78
      30:	20 c6       	rjmp	.+3136   	; 0xc72 <__bad_interrupt>
      32:	00 00       	nop
../../../../crt1/gcrt1.S:79
      34:	1e c6       	rjmp	.+3132   	; 0xc72 <__bad_interrupt>
      36:	00 00       	nop
../../../../crt1/gcrt1.S:80
      38:	1c c6       	rjmp	.+3128   	; 0xc72 <__bad_interrupt>
      3a:	00 00       	nop
../../../../crt1/gcrt1.S:81
      3c:	0c 94 53 18 	jmp	0x30a6	; 0x30a6 <__vector_15>
../../../../crt1/gcrt1.S:82
      40:	18 c6       	rjmp	.+3120   	; 0xc72 <__bad_interrupt>
      42:	00 00       	nop
../../../../crt1/gcrt1.S:83
      44:	16 c6       	rjmp	.+3116   	; 0xc72 <__bad_interrupt>
      46:	00 00       	nop
../../../../crt1/gcrt1.S:84
      48:	14 c6       	rjmp	.+3112   	; 0xc72 <__bad_interrupt>
      4a:	00 00       	nop
../../../../crt1/gcrt1.S:85
      4c:	12 c6       	rjmp	.+3108   	; 0xc72 <__bad_interrupt>
      4e:	00 00       	nop
../../../../crt1/gcrt1.S:86
      50:	10 c6       	rjmp	.+3104   	; 0xc72 <__bad_interrupt>
      52:	00 00       	nop
../../../../crt1/gcrt1.S:87
      54:	0e c6       	rjmp	.+3100   	; 0xc72 <__bad_interrupt>
      56:	00 00       	nop
../../../../crt1/gcrt1.S:88
      58:	0c c6       	rjmp	.+3096   	; 0xc72 <__bad_interrupt>
      5a:	00 00       	nop
../../../../crt1/gcrt1.S:89
      5c:	0a c6       	rjmp	.+3092   	; 0xc72 <__bad_interrupt>
      5e:	00 00       	nop
../../../../crt1/gcrt1.S:90
      60:	0c 94 d4 18 	jmp	0x31a8	; 0x31a8 <__vector_24>
../../../../crt1/gcrt1.S:91
      64:	06 c6       	rjmp	.+3084   	; 0xc72 <__bad_interrupt>
      66:	00 00       	nop
../../../../crt1/gcrt1.S:92
      68:	04 c6       	rjmp	.+3080   	; 0xc72 <__bad_interrupt>
      6a:	00 00       	nop
../../../../crt1/gcrt1.S:93
      6c:	02 c6       	rjmp	.+3076   	; 0xc72 <__bad_interrupt>
      6e:	00 00       	nop
../../../../crt1/gcrt1.S:94
      70:	00 c6       	rjmp	.+3072   	; 0xc72 <__bad_interrupt>
      72:	00 00       	nop
../../../../crt1/gcrt1.S:95
      74:	fe c5       	rjmp	.+3068   	; 0xc72 <__bad_interrupt>
      76:	00 00       	nop
../../../../crt1/gcrt1.S:96
      78:	fc c5       	rjmp	.+3064   	; 0xc72 <__bad_interrupt>
	...

0000007c <__trampolines_end>:
__trampolines_end():
      7c:	bf 02       	muls	r27, r31
      7e:	03 02       	muls	r16, r19
      80:	03 04       	cpc	r0, r3
      82:	01 02       	muls	r16, r17
      84:	04 07       	cpc	r16, r20
      86:	0d 00       	.word	0x000d	; ????
      88:	fe 09       	sbc	r31, r14
      8a:	fe 09       	sbc	r31, r14
      8c:	00 01       	movw	r0, r0
      8e:	ba 03       	fmulsu	r19, r18
      90:	ad 0b       	sbc	r26, r29
      92:	6f 20       	and	r6, r15
      94:	06 ef       	ldi	r16, 0xF6	; 246
      96:	fc f9       	.word	0xf9fc	; ????
      98:	7f 21       	and	r23, r15
      9a:	0a ef       	ldi	r16, 0xFA	; 250
      9c:	fc 69       	ori	r31, 0x9C	; 156
      9e:	71 df       	rcall	.-286    	; 0xffffff82 <__eeprom_end+0xff7eff82>
      a0:	e1 9c       	mul	r14, r1
      a2:	06 22       	and	r0, r22
      a4:	0c ef       	ldi	r16, 0xFC	; 252
      a6:	fc 49       	sbci	r31, 0x9C	; 156
      a8:	49 98       	cbi	0x09, 1	; 9
      aa:	84 49       	sbci	r24, 0x94	; 148
      ac:	ce 9f       	mul	r28, r30
      ae:	00 23       	and	r16, r16
      b0:	11 ef       	ldi	r17, 0xF1	; 241
      b2:	fc 99       	sbic	0x1f, 4	; 31
      b4:	92 30       	cpi	r25, 0x02	; 2
      b6:	c9 06       	cpc	r12, r25
      b8:	2d c9       	rjmp	.-3494   	; 0xfffff314 <__eeprom_end+0xff7ef314>
      ba:	06 2d       	mov	r16, r6
      bc:	09 93       	st	Y+, r16
      be:	9c 09       	sbc	r25, r12
      c0:	24 0f       	add	r18, r20
      c2:	ef fc       	.word	0xfcef	; ????
      c4:	d9 d2       	rcall	.+1458   	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
      c6:	21 4a       	sbci	r18, 0xA1	; 161
      c8:	d2 35       	cpi	r29, 0x52	; 82
      ca:	89 86       	std	Y+9, r8	; 0x09
      cc:	34 67       	ori	r19, 0x74	; 116
      ce:	03 25       	eor	r16, r3
      d0:	0f ef       	ldi	r16, 0xFF	; 255
      d2:	fc 29       	or	r31, r12
      d4:	59 52       	subi	r21, 0x29	; 41
      d6:	6a 8d       	ldd	r22, Y+26	; 0x1a
      d8:	d3 52       	subi	r29, 0x23	; 35
      da:	4b 2d       	mov	r20, r11
      dc:	27 01       	movw	r4, r14
      de:	26 10       	cpse	r2, r6
      e0:	ef fc       	.word	0xfcef	; ????
      e2:	b9 88       	ldd	r11, Y+17	; 0x11
      e4:	51 16       	cp	r5, r17
      e6:	85 62       	ori	r24, 0x25	; 37
      e8:	94 d4       	rcall	.+2344   	; 0xa12 <__DATA_REGION_LENGTH__+0x212>
      ea:	b2 25       	eor	r27, r2
      ec:	a7 00       	.word	0x00a7	; ????
      ee:	27 09       	sbc	r18, r7
      f0:	ef fc       	.word	0xfcef	; ????
      f2:	69 71       	andi	r22, 0x19	; 25
      f4:	9d bf       	out	0x3d, r25	; 61
      f6:	01 28       	or	r0, r1
      f8:	0d ef       	ldi	r16, 0xFD	; 253
      fa:	fc 89       	ldd	r31, Y+20	; 0x14
      fc:	69 9c       	mul	r6, r9
      fe:	c6 f5       	brtc	.+112    	; 0x170 <__EEPROM_REGION_LENGTH__+0x70>
     100:	38 cf       	rjmp	.-400    	; 0xffffff72 <__eeprom_end+0xff7eff72>
     102:	49 00       	.word	0x0049	; ????
     104:	29 0d       	add	r18, r9
     106:	ef fc       	.word	0xfcef	; ????
     108:	49 79       	andi	r20, 0x99	; 153
     10a:	9c c7       	rjmp	.+3896   	; 0x1044 <TwoWire::peek()+0x14>
     10c:	d5 38       	cpi	r29, 0x85	; 133
     10e:	cd 89       	ldd	r28, Y+21	; 0x15
     110:	00 2a       	or	r0, r16
     112:	0d ef       	ldi	r16, 0xFD	; 253
     114:	fc b9       	out	0x0c, r31	; 12
     116:	44 a1       	ldd	r20, Z+36	; 0x24
     118:	36 6c       	ori	r19, 0xC6	; 198
     11a:	62 94       	swap	r6
     11c:	73 02       	muls	r23, r19
     11e:	2b 0c       	add	r2, r11
     120:	ef fc       	.word	0xfcef	; ????
     122:	b9 c5       	rjmp	.+2930   	; 0xc96 <u8g2_ll_hvline_vertical_top_lsb+0xe>
     124:	e1 20       	and	r14, r1
     126:	c6 39       	cpi	r28, 0x96	; 150
     128:	37 00       	.word	0x0037	; ????
     12a:	2c 0a       	sbc	r2, r28
     12c:	ef fc       	.word	0xfcef	; ????
     12e:	f9 a7       	std	Y+41, r31	; 0x29
     130:	51 cc       	rjmp	.-1886   	; 0xfffff9d4 <__eeprom_end+0xff7ef9d4>
     132:	51 00       	.word	0x0051	; ????
     134:	2d 09       	sbc	r18, r13
     136:	ef fc       	.word	0xfcef	; ????
     138:	f9 32       	cpi	r31, 0x29	; 41
     13a:	e8 7c       	andi	r30, 0xC8	; 200
     13c:	01 2e       	mov	r0, r17
     13e:	0a ef       	ldi	r16, 0xFA	; 250
     140:	fc f9       	.word	0xf9fc	; ????
     142:	b7 74       	andi	r27, 0x47	; 71
     144:	cd 31       	cpi	r28, 0x1D	; 29
     146:	00 2f       	mov	r16, r16
     148:	0d ef       	ldi	r16, 0xFD	; 253
     14a:	fc a9       	ldd	r31, Y+52	; 0x34
     14c:	71 1a       	sub	r7, r17
     14e:	a7 e5       	ldi	r26, 0x57	; 87
     150:	34 ce       	rjmp	.-920    	; 0xfffffdba <__eeprom_end+0xff7efdba>
     152:	a9 00       	.word	0x00a9	; ????
     154:	30 11       	cpse	r19, r0
     156:	ef fc       	.word	0xfcef	; ????
     158:	49 62       	ori	r20, 0x29	; 41
     15a:	54 4c       	sbci	r21, 0xC4	; 196
     15c:	c2 24       	eor	r12, r2
     15e:	4c c2       	rjmp	.+1176   	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
     160:	24 8c       	ldd	r2, Z+28	; 0x1c
     162:	8a 3a       	cpi	r24, 0xAA	; 170
     164:	0d 31       	cpi	r16, 0x1D	; 29
     166:	0c ef       	ldi	r16, 0xFC	; 252
     168:	fc 69       	ori	r31, 0x9C	; 156
     16a:	a9 98       	cbi	0x15, 1	; 21
     16c:	c4 3d       	cpi	r28, 0xD4	; 212
     16e:	0e 3a       	cpi	r16, 0xAE	; 174
     170:	05 32       	cpi	r16, 0x25	; 37
     172:	10 ef       	ldi	r17, 0xF0	; 240
     174:	fc 29       	or	r31, r12
     176:	43 14       	cp	r4, r3
     178:	26 61       	ori	r18, 0x16	; 22
     17a:	9c 86       	std	Y+12, r9	; 0x0c
     17c:	62 1a       	sub	r6, r18
     17e:	0f 3b       	cpi	r16, 0xBF	; 191
     180:	05 33       	cpi	r16, 0x35	; 53
     182:	0f ef       	ldi	r16, 0xFF	; 255
     184:	fc f1       	brlt	.+126    	; 0x204 <__EEPROM_REGION_LENGTH__+0x104>
     186:	61 4e       	sbci	r22, 0xE1	; 225
     188:	ab 7b       	andi	r26, 0xBB	; 187
     18a:	9c 84       	ldd	r9, Y+12	; 0x0c
     18c:	d1 90       	ld	r13, Z+
     18e:	93 00       	.word	0x0093	; ????
     190:	34 11       	cpse	r19, r4
     192:	ef fc       	.word	0xfcef	; ????
     194:	89 a9       	ldd	r24, Y+49	; 0x31
     196:	98 64       	ori	r25, 0x48	; 72
     198:	51 2d       	mov	r21, r1
     19a:	ca a2       	std	Y+34, r12	; 0x22
     19c:	61 8d       	ldd	r22, Z+25	; 0x19
     19e:	73 12       	cpse	r7, r19
     1a0:	00 35       	cpi	r16, 0x50	; 80
     1a2:	10 ef       	ldi	r17, 0xF0	; 240
     1a4:	fc f1       	brlt	.+126    	; 0x224 <__EEPROM_REGION_LENGTH__+0x124>
     1a6:	61 89       	ldd	r22, Z+17	; 0x11
     1a8:	2b 93       	.word	0x932b	; ????
     1aa:	16 57       	subi	r17, 0x76	; 118
     1ac:	c2 68       	ori	r28, 0x82	; 130
     1ae:	c8 49       	sbci	r28, 0x98	; 152
     1b0:	00 36       	cpi	r16, 0x60	; 96
     1b2:	11 ef       	ldi	r17, 0xF1	; 241
     1b4:	fc 49       	sbci	r31, 0x9C	; 156
     1b6:	5b 1a       	sub	r5, r27
     1b8:	57 26       	eor	r5, r23
     1ba:	2d 09       	sbc	r18, r13
     1bc:	93 30       	cpi	r25, 0x03	; 3
     1be:	1a 72       	andi	r17, 0x2A	; 42
     1c0:	12 00       	.word	0x0012	; ????
     1c2:	37 0d       	add	r19, r7
     1c4:	ef fc       	.word	0xfcef	; ????
     1c6:	f1 61       	ori	r31, 0x11	; 17
     1c8:	4e cb       	rjmp	.-2404   	; 0xfffff866 <__eeprom_end+0xff7ef866>
     1ca:	69 9c       	mul	r6, r9
     1cc:	c6 39       	cpi	r28, 0x96	; 150
     1ce:	15 38       	cpi	r17, 0x85	; 133
     1d0:	14 ef       	ldi	r17, 0xF4	; 244
     1d2:	fc 29       	or	r31, r12
     1d4:	43 14       	cp	r4, r3
     1d6:	26 61       	ori	r18, 0x16	; 22
     1d8:	12 46       	sbci	r17, 0x62	; 98
     1da:	43 14       	cp	r4, r3
     1dc:	26 61       	ori	r18, 0x16	; 22
     1de:	12 46       	sbci	r17, 0x62	; 98
     1e0:	43 4e       	sbci	r20, 0xE3	; 227
     1e2:	02 39       	cpi	r16, 0x92	; 146
     1e4:	11 ef       	ldi	r17, 0xF1	; 241
     1e6:	fc 29       	or	r31, r12
     1e8:	43 14       	cp	r4, r3
     1ea:	26 61       	ori	r18, 0x16	; 22
     1ec:	92 49       	sbci	r25, 0x92	; 146
     1ee:	4b 5c       	subi	r20, 0xCB	; 203
     1f0:	cd 76       	andi	r28, 0x6D	; 109
     1f2:	1a 00       	.word	0x001a	; ????
     1f4:	3a 0c       	add	r3, r10
     1f6:	ef fc       	.word	0xfcef	; ????
     1f8:	b9 a5       	ldd	r27, Y+41	; 0x29
     1fa:	6b 4e       	sbci	r22, 0xEB	; 235
     1fc:	4e d7       	rcall	.+3740   	; 0x109a <TwoWire::write(unsigned char)+0x12>
     1fe:	1c 03       	fmul	r17, r20
     200:	3b 0c       	add	r3, r11
     202:	ef fc       	.word	0xfcef	; ????
     204:	b9 a5       	ldd	r27, Y+41	; 0x29
     206:	6b 4e       	sbci	r22, 0xEB	; 235
     208:	1d c5       	rjmp	.+2618   	; 0xc44 <__do_copy_data+0x6>
     20a:	1c 05       	cpc	r17, r12
     20c:	3c 09       	sbc	r19, r12
     20e:	ef fc       	.word	0xfcef	; ????
     210:	a9 bd       	out	0x29, r26	; 41
     212:	77 a7       	std	Z+47, r23	; 0x2f
     214:	00 3d       	cpi	r16, 0xD0	; 208
     216:	0b ef       	ldi	r16, 0xFB	; 251
     218:	fc b9       	out	0x0c, r31	; 12
     21a:	0f 3b       	cpi	r16, 0xBF	; 191
     21c:	65 d8       	rcall	.-3894   	; 0xfffff2e8 <__eeprom_end+0xff7ef2e8>
     21e:	b9 00       	.word	0x00b9	; ????
     220:	3e 0a       	sbc	r3, r30
     222:	ef fc       	.word	0xfcef	; ????
     224:	29 79       	andi	r18, 0x99	; 153
     226:	d7 ee       	ldi	r29, 0xE7	; 231
     228:	54 00       	.word	0x0054	; ????
     22a:	3f 0f       	add	r19, r31
     22c:	ef fc       	.word	0xfcef	; ????
     22e:	29 43       	sbci	r18, 0x39	; 57
     230:	14 26       	eor	r1, r20
     232:	61 9c       	mul	r6, r1
     234:	96 73       	andi	r25, 0x36	; 54
     236:	38 a7       	std	Y+40, r19	; 0x28
     238:	01 40       	sbci	r16, 0x01	; 1
     23a:	14 ef       	ldi	r17, 0xF4	; 244
     23c:	fc 29       	or	r31, r12
     23e:	43 14       	cp	r4, r3
     240:	26 61       	ori	r18, 0x16	; 22
     242:	12 2d       	mov	r17, r2
     244:	a5 a4       	ldd	r10, Z+45	; 0x2d
     246:	a2 44       	sbci	r26, 0x42	; 66
     248:	49 7d       	andi	r20, 0xD9	; 217
     24a:	c8 49       	sbci	r28, 0x98	; 152
     24c:	00 41       	sbci	r16, 0x10	; 16
     24e:	13 ef       	ldi	r17, 0xF3	; 243
     250:	fc 49       	sbci	r31, 0x9C	; 156
     252:	62 54       	subi	r22, 0x42	; 66
     254:	4c c2       	rjmp	.+1176   	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
     256:	24 4c       	sbci	r18, 0xC4	; 196
     258:	86 25       	eor	r24, r6
     25a:	4c c2       	rjmp	.+1176   	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
     25c:	24 cc       	rjmp	.-1976   	; 0xfffffaa6 <__eeprom_end+0xff7efaa6>
     25e:	29 00       	.word	0x0029	; ????
     260:	42 13       	cpse	r20, r18
     262:	ef fc       	.word	0xfcef	; ????
     264:	f1 41       	sbci	r31, 0x11	; 17
     266:	2b 65       	ori	r18, 0x5B	; 91
     268:	51 16       	cp	r5, r17
     26a:	0d 59       	subi	r16, 0x9D	; 157
     26c:	29 8b       	std	Y+17, r18	; 0x11
     26e:	b2 64       	ori	r27, 0x42	; 66
     270:	d0 49       	sbci	r29, 0x90	; 144
     272:	00 43       	sbci	r16, 0x30	; 48
     274:	0e ef       	ldi	r16, 0xFE	; 254
     276:	fc 29       	or	r31, r12
     278:	43 14       	cp	r4, r3
     27a:	26 71       	andi	r18, 0x16	; 22
     27c:	8f d1       	rcall	.+798    	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
     27e:	90 93 00 44 	sts	0x4400, r25	; 0x804400 <__bss_end+0x656>
     282:	13 ef       	ldi	r17, 0xF3	; 243
     284:	fc f1       	brlt	.+126    	; 0x304 <__EEPROM_REGION_LENGTH__+0x204>
     286:	41 2b       	or	r20, r17
     288:	65 51       	subi	r22, 0x15	; 21
     28a:	16 65       	ori	r17, 0x56	; 86
     28c:	51 16       	cp	r5, r17
     28e:	65 51       	subi	r22, 0x15	; 21
     290:	96 0c       	add	r9, r6
     292:	3a 09       	sbc	r19, r10
     294:	45 0e       	add	r4, r21
     296:	ef fc       	.word	0xfcef	; ????
     298:	f1 61       	ori	r31, 0x11	; 17
     29a:	89 cb       	rjmp	.-2286   	; 0xfffff9ae <__eeprom_end+0xff7ef9ae>
     29c:	43 16       	cp	r4, r19
     29e:	97 87       	std	Z+15, r25	; 0x0f
     2a0:	9d 02       	muls	r25, r29
     2a2:	46 0d       	add	r20, r6
     2a4:	ef fc       	.word	0xfcef	; ????
     2a6:	f1 61       	ori	r31, 0x11	; 17
     2a8:	89 cb       	rjmp	.-2286   	; 0xfffff9bc <__eeprom_end+0xff7ef9bc>
     2aa:	43 16       	cp	r4, r19
     2ac:	b7 93       	lat	Z, r27
     2ae:	01 47       	sbci	r16, 0x71	; 113
     2b0:	11 ef       	ldi	r17, 0xF1	; 241
     2b2:	fc 29       	or	r31, r12
     2b4:	43 14       	cp	r4, r3
     2b6:	26 71       	andi	r18, 0x16	; 22
     2b8:	d3 12       	cpse	r13, r19
     2ba:	26 99       	sbic	0x04, 6	; 4
     2bc:	b4 e4       	ldi	r27, 0x44	; 68
     2be:	14 00       	.word	0x0014	; ????
     2c0:	48 14       	cp	r4, r8
     2c2:	ef fc       	.word	0xfcef	; ????
     2c4:	f1 30       	cpi	r31, 0x01	; 1
     2c6:	09 93       	st	Y+, r16
     2c8:	30 09       	sbc	r19, r0
     2ca:	93 61       	ori	r25, 0x13	; 19
     2cc:	09 93       	st	Y+, r16
     2ce:	30 09       	sbc	r19, r0
     2d0:	93 30       	cpi	r25, 0x03	; 3
     2d2:	a7 00       	.word	0x00a7	; ????
     2d4:	49 0c       	add	r4, r9
     2d6:	ef fc       	.word	0xfcef	; ????
     2d8:	29 83       	std	Y+1, r18	; 0x01
     2da:	18 f7       	brcc	.-58     	; 0x2a2 <__EEPROM_REGION_LENGTH__+0x1a2>
     2dc:	71 d0       	rcall	.+226    	; 0x3c0 <__EEPROM_REGION_LENGTH__+0x2c0>
     2de:	29 00       	.word	0x0029	; ????
     2e0:	4a 0c       	add	r4, r10
     2e2:	ef fc       	.word	0xfcef	; ????
     2e4:	69 6b       	ori	r22, 0xB9	; 185
     2e6:	dc 53       	subi	r29, 0x3C	; 60
     2e8:	96 ed       	ldi	r25, 0xD6	; 214
     2ea:	34 00       	.word	0x0034	; ????
     2ec:	4b 12       	cpse	r4, r27
     2ee:	ef fc       	.word	0xfcef	; ????
     2f0:	f1 30       	cpi	r31, 0x01	; 1
     2f2:	c9 a2       	std	Y+33, r12	; 0x21
     2f4:	5a 12       	cpse	r5, r26
     2f6:	aa 49       	sbci	r26, 0x9A	; 154
     2f8:	18 65       	ori	r17, 0x58	; 88
     2fa:	a5 30       	cpi	r26, 0x05	; 5
     2fc:	a7 00       	.word	0x00a7	; ????
     2fe:	4c 0a       	sbc	r4, r28
     300:	ef fc       	.word	0xfcef	; ????
     302:	f1 b8       	out	0x01, r15	; 1
     304:	9f 87       	std	Y+15, r25	; 0x0f
     306:	9d 02       	muls	r25, r29
     308:	4d 14       	cp	r4, r13
     30a:	ef fc       	.word	0xfcef	; ????
     30c:	f1 30       	cpi	r31, 0x01	; 1
     30e:	91 14       	cp	r9, r1
     310:	49 49       	sbci	r20, 0x99	; 153
     312:	94 8a       	std	Z+20, r9	; 0x14
     314:	52 4c       	sbci	r21, 0xC2	; 194
     316:	c2 24       	eor	r12, r2
     318:	4c c2       	rjmp	.+1176   	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
     31a:	9c 02       	muls	r25, r28
     31c:	4e 14       	cp	r4, r14
     31e:	ef fc       	.word	0xfcef	; ????
     320:	f1 30       	cpi	r31, 0x01	; 1
     322:	09 13       	cpse	r16, r25
     324:	2d 29       	or	r18, r13
     326:	25 51       	subi	r18, 0x15	; 21
     328:	52 53       	subi	r21, 0x32	; 50
     32a:	c2 24       	eor	r12, r2
     32c:	4c c2       	rjmp	.+1176   	; 0x7c6 <__LOCK_REGION_LENGTH__+0x3c6>
     32e:	9c 02       	muls	r25, r28
     330:	4f 14       	cp	r4, r15
     332:	ef fc       	.word	0xfcef	; ????
     334:	29 43       	sbci	r18, 0x39	; 57
     336:	14 26       	eor	r1, r20
     338:	61 12       	cpse	r6, r17
     33a:	26 61       	ori	r18, 0x16	; 22
     33c:	12 26       	eor	r1, r18
     33e:	61 12       	cpse	r6, r17
     340:	46 43       	sbci	r20, 0x36	; 54
     342:	4e 02       	muls	r20, r30
     344:	50 10       	cpse	r5, r0
     346:	ef fc       	.word	0xfcef	; ????
     348:	f1 41       	sbci	r31, 0x11	; 17
     34a:	0a 93       	st	-Y, r16
     34c:	30 09       	sbc	r19, r0
     34e:	93 41       	sbci	r25, 0x13	; 19
     350:	8a db       	rcall	.-2284   	; 0xfffffa66 <__eeprom_end+0xff7efa66>
     352:	c9 00       	.word	0x00c9	; ????
     354:	51 16       	cp	r5, r17
     356:	ef fc       	.word	0xfcef	; ????
     358:	29 43       	sbci	r18, 0x39	; 57
     35a:	14 26       	eor	r1, r20
     35c:	61 12       	cpse	r6, r17
     35e:	26 61       	ori	r18, 0x16	; 22
     360:	12 26       	eor	r1, r18
     362:	a5 24       	eor	r10, r5
     364:	4a a2       	std	Y+34, r4	; 0x22
     366:	21 cf       	rjmp	.-446    	; 0x1aa <__EEPROM_REGION_LENGTH__+0xaa>
     368:	11 00       	.word	0x0011	; ????
     36a:	52 13       	cpse	r21, r18
     36c:	ef fc       	.word	0xfcef	; ????
     36e:	f1 41       	sbci	r31, 0x11	; 17
     370:	0a 93       	st	-Y, r16
     372:	30 09       	sbc	r19, r0
     374:	93 41       	sbci	r25, 0x13	; 19
     376:	4a c2       	rjmp	.+1172   	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     378:	28 2b       	or	r18, r24
     37a:	85 39       	cpi	r24, 0x95	; 149
     37c:	05 53       	subi	r16, 0x35	; 53
     37e:	11 ef       	ldi	r17, 0xF1	; 241
     380:	fc 29       	or	r31, r12
     382:	43 14       	cp	r4, r3
     384:	26 71       	andi	r18, 0x16	; 22
     386:	3e e4       	ldi	r19, 0x4E	; 78
     388:	71 12       	cpse	r7, r17
     38a:	46 43       	sbci	r20, 0x36	; 54
     38c:	4e 02       	muls	r20, r30
     38e:	54 0a       	sbc	r5, r20
     390:	ef fc       	.word	0xfcef	; ????
     392:	29 83       	std	Y+1, r18	; 0x01
     394:	18 f7       	brcc	.-58     	; 0x35c <__EEPROM_REGION_LENGTH__+0x25c>
     396:	3b 0d       	add	r19, r11
     398:	55 14       	cp	r5, r5
     39a:	ef fc       	.word	0xfcef	; ????
     39c:	f1 30       	cpi	r31, 0x01	; 1
     39e:	09 93       	st	Y+, r16
     3a0:	30 09       	sbc	r19, r0
     3a2:	93 30       	cpi	r25, 0x03	; 3
     3a4:	09 93       	st	Y+, r16
     3a6:	30 09       	sbc	r19, r0
     3a8:	a3 21       	and	r26, r3
     3aa:	27 01       	movw	r4, r14
     3ac:	56 11       	cpse	r21, r6
     3ae:	ef fc       	.word	0xfcef	; ????
     3b0:	f1 30       	cpi	r31, 0x01	; 1
     3b2:	09 93       	st	Y+, r16
     3b4:	30 aa       	std	Z+48, r3	; 0x30
     3b6:	45 59       	subi	r20, 0x95	; 149
     3b8:	14 aa       	std	Z+52, r1	; 0x34
     3ba:	76 1a       	sub	r7, r22
     3bc:	00 57       	subi	r16, 0x70	; 112
     3be:	15 ef       	ldi	r17, 0xF5	; 245
     3c0:	fc f1       	brlt	.+126    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     3c2:	30 09       	sbc	r19, r0
     3c4:	93 30       	cpi	r25, 0x03	; 3
     3c6:	09 93       	st	Y+, r16
     3c8:	44 a9       	ldd	r20, Z+52	; 0x34
     3ca:	28 89       	ldd	r18, Y+16	; 0x10
     3cc:	a4 48       	sbci	r26, 0x84	; 132
     3ce:	4a 98       	cbi	0x09, 2	; 9
     3d0:	53 00       	.word	0x0053	; ????
     3d2:	58 12       	cpse	r5, r24
     3d4:	ef fc       	.word	0xfcef	; ????
     3d6:	f1 30       	cpi	r31, 0x01	; 1
     3d8:	09 a3       	std	Y+33, r16	; 0x21
     3da:	5a 14       	cp	r5, r10
     3dc:	8a 51       	subi	r24, 0x1A	; 26
     3de:	16 15       	cp	r17, r6
     3e0:	93 30       	cpi	r25, 0x03	; 3
     3e2:	a7 00       	.word	0x00a7	; ????
     3e4:	59 0e       	add	r5, r25
     3e6:	ef fc       	.word	0xfcef	; ????
     3e8:	29 59       	subi	r18, 0x99	; 153
     3ea:	94 55       	subi	r25, 0x54	; 84
     3ec:	c2 24       	eor	r12, r2
     3ee:	8d bb       	out	0x1d, r24	; 29
     3f0:	d3 00       	.word	0x00d3	; ????
     3f2:	5a 0d       	add	r21, r10
     3f4:	ef fc       	.word	0xfcef	; ????
     3f6:	f1 61       	ori	r31, 0x11	; 17
     3f8:	4e ab       	std	Y+54, r20	; 0x36
     3fa:	6a f3       	brmi	.-38     	; 0x3d6 <__EEPROM_REGION_LENGTH__+0x2d6>
     3fc:	b0 53       	subi	r27, 0x30	; 48
     3fe:	00 5b       	subi	r16, 0xB0	; 176
     400:	0c ef       	ldi	r16, 0xFC	; 252
     402:	fc 91       	ld	r31, X
     404:	21 8b       	std	Z+17, r18	; 0x11
     406:	fb f3       	brvs	.-2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     408:	90 43       	sbci	r25, 0x30	; 48
     40a:	00 5c       	subi	r16, 0xC0	; 192
     40c:	0d ef       	ldi	r16, 0xFD	; 253
     40e:	fc 29       	or	r31, r12
     410:	71 1e       	adc	r7, r17
     412:	e7 e5       	ldi	r30, 0x57	; 87
     414:	3c ce       	rjmp	.-904    	; 0x8e <__trampolines_end+0x12>
     416:	29 00       	.word	0x0029	; ????
     418:	5d 0b       	sbc	r21, r29
     41a:	ef fc       	.word	0xfcef	; ????
     41c:	91 21       	and	r25, r1
     41e:	ee df       	rcall	.-36     	; 0x3fc <__EEPROM_REGION_LENGTH__+0x2fc>
     420:	86 1c       	adc	r8, r6
     422:	02 5e       	subi	r16, 0xE2	; 226
     424:	0b ef       	ldi	r16, 0xFB	; 251
     426:	fc 69       	ori	r31, 0x9C	; 156
     428:	69 92       	st	Y+, r6
     42a:	d5 f9       	bld	r29, 5
     42c:	0b 00       	.word	0x000b	; ????
     42e:	5f 09       	sbc	r21, r15
     430:	ef fc       	.word	0xfcef	; ????
     432:	f9 ef       	ldi	r31, 0xF9	; 249
     434:	c3 8e       	std	Z+27, r12	; 0x1b
     436:	00 60       	ori	r16, 0x00	; 0
     438:	09 ef       	ldi	r16, 0xF9	; 249
     43a:	fc a1       	ldd	r31, Y+36	; 0x24
     43c:	3c e7       	ldi	r19, 0x7C	; 124
     43e:	bf 01       	movw	r22, r30
     440:	61 0f       	add	r22, r17
     442:	ef fc       	.word	0xfcef	; ????
     444:	79 19       	sub	r23, r9
     446:	f2 68       	ori	r31, 0x82	; 130
     448:	50 c2       	rjmp	.+1184   	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
     44a:	24 93       	xch	Z, r18
     44c:	96 9c       	mul	r9, r6
     44e:	02 62       	ori	r16, 0x22	; 34
     450:	11 ef       	ldi	r17, 0xF1	; 241
     452:	fc f1       	brlt	.+126    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     454:	b8 65       	ori	r27, 0x58	; 88
     456:	d2 92       	st	-Z, r13
     458:	30 09       	sbc	r19, r0
     45a:	13 2d       	mov	r17, r3
     45c:	49 76       	andi	r20, 0x69	; 105
     45e:	12 00       	.word	0x0012	; ????
     460:	63 0e       	add	r6, r19
     462:	ef fc       	.word	0xfcef	; ????
     464:	79 19       	sub	r23, r9
     466:	a2 30       	cpi	r26, 0x02	; 2
     468:	89 8b       	std	Y+17, r24	; 0x11
     46a:	d1 90       	ld	r13, Z+
     46c:	93 00       	.word	0x0093	; ????
     46e:	64 11       	cpse	r22, r4
     470:	ef fc       	.word	0xfcef	; ????
     472:	a9 71       	andi	r26, 0x19	; 25
     474:	69 a9       	ldd	r22, Y+49	; 0x31
     476:	29 61       	ori	r18, 0x19	; 25
     478:	12 26       	eor	r1, r18
     47a:	99 b4       	in	r9, 0x29	; 41
     47c:	e4 14       	cp	r14, r4
     47e:	00 65       	ori	r16, 0x50	; 80
     480:	0f ef       	ldi	r16, 0xFF	; 255
     482:	fc 79       	andi	r31, 0x9C	; 156
     484:	19 a2       	std	Y+33, r1	; 0x21
     486:	30 19       	sub	r19, r0
     488:	96 38       	cpi	r25, 0x86	; 134
     48a:	8c 86       	std	Y+12, r8	; 0x0c
     48c:	9c 04       	cpc	r9, r12
     48e:	66 0d       	add	r22, r6
     490:	ef fc       	.word	0xfcef	; ????
     492:	49 5b       	subi	r20, 0xB9	; 185
     494:	29 4e       	sbci	r18, 0xE9	; 233
     496:	87 30       	cpi	r24, 0x07	; 7
     498:	6e a7       	std	Y+46, r22	; 0x2e
     49a:	02 67       	ori	r16, 0x72	; 114
     49c:	10 ef       	ldi	r17, 0xF0	; 240
     49e:	fc 79       	andi	r31, 0x9C	; 156
     4a0:	59 6a       	ori	r21, 0xA9	; 169
     4a2:	51 96       	adiw	r26, 0x11	; 17
     4a4:	6d f9       	.word	0xf96d	; ????
     4a6:	10 85       	ldd	r17, Z+8	; 0x08
     4a8:	d1 10       	cpse	r13, r1
     4aa:	01 68       	ori	r16, 0x81	; 129
     4ac:	11 ef       	ldi	r17, 0xF1	; 241
     4ae:	fc f1       	brlt	.+126    	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
     4b0:	b8 65       	ori	r27, 0x58	; 88
     4b2:	d2 92       	st	-Z, r13
     4b4:	30 09       	sbc	r19, r0
     4b6:	93 30       	cpi	r25, 0x03	; 3
     4b8:	09 73       	andi	r16, 0x39	; 57
     4ba:	0a 00       	.word	0x000a	; ????
     4bc:	69 0c       	add	r6, r9
     4be:	ef fc       	.word	0xfcef	; ????
     4c0:	d9 72       	andi	r29, 0x29	; 41
     4c2:	54 ee       	ldi	r21, 0xE4	; 228
     4c4:	38 e8       	ldi	r19, 0x88	; 136
     4c6:	14 00       	.word	0x0014	; ????
     4c8:	6a 0d       	add	r22, r10
     4ca:	ef fc       	.word	0xfcef	; ????
     4cc:	59 73       	andi	r21, 0x39	; 57
     4ce:	54 ee       	ldi	r21, 0xE4	; 228
     4d0:	94 45       	sbci	r25, 0x54	; 84
     4d2:	59 36       	cpi	r21, 0x69	; 105
     4d4:	01 6b       	ori	r16, 0xB1	; 177
     4d6:	0f ef       	ldi	r16, 0xFF	; 255
     4d8:	fc f1       	brlt	.+126    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     4da:	b8 2d       	mov	r27, r8
     4dc:	aa 8d       	ldd	r26, Y+26	; 0x1a
     4de:	51 56       	subi	r21, 0x61	; 97
     4e0:	0a 73       	andi	r16, 0x3A	; 58
     4e2:	0a 00       	.word	0x000a	; ????
     4e4:	6c 0a       	sbc	r6, r28
     4e6:	ef fc       	.word	0xfcef	; ????
     4e8:	49 72       	andi	r20, 0x29	; 41
     4ea:	3f 0e       	add	r3, r31
     4ec:	3a 05       	cpc	r19, r10
     4ee:	6d 11       	cpse	r22, r13
     4f0:	ef fc       	.word	0xfcef	; ????
     4f2:	79 51       	subi	r23, 0x19	; 25
     4f4:	b2 a4       	ldd	r11, Z+42	; 0x2a
     4f6:	94 94       	.word	0x9494	; ????
     4f8:	92 52       	subi	r25, 0x22	; 34
     4fa:	52 ca       	rjmp	.-2908   	; 0xfffff9a0 <__eeprom_end+0xff7ef9a0>
     4fc:	72 0a       	sbc	r7, r18
     4fe:	00 6e       	ori	r16, 0xE0	; 224
     500:	10 ef       	ldi	r17, 0xF0	; 240
     502:	fc b9       	out	0x0c, r31	; 12
     504:	27 93       	lat	Z, r18
     506:	96 84       	ldd	r9, Z+14	; 0x0e
     508:	49 98       	cbi	0x09, 1	; 9
     50a:	84 49       	sbci	r24, 0x94	; 148
     50c:	98 53       	subi	r25, 0x38	; 56
     50e:	00 6f       	ori	r16, 0xF0	; 240
     510:	10 ef       	ldi	r17, 0xF0	; 240
     512:	fc 79       	andi	r31, 0x9C	; 156
     514:	19 a2       	std	Y+33, r1	; 0x21
     516:	30 09       	sbc	r19, r0
     518:	93 30       	cpi	r25, 0x03	; 3
     51a:	09 a3       	std	Y+33, r16	; 0x21
     51c:	21 27       	eor	r18, r17
     51e:	01 70       	andi	r16, 0x01	; 1
     520:	0f ef       	ldi	r16, 0xFF	; 255
     522:	fc b9       	out	0x0c, r31	; 12
     524:	27 93       	lat	Z, r18
     526:	96 84       	ldd	r9, Z+14	; 0x0e
     528:	89 96       	adiw	r24, 0x29	; 41
     52a:	24 53       	subi	r18, 0x34	; 52
     52c:	5c 06       	cpc	r5, r28
     52e:	71 0e       	add	r7, r17
     530:	ef fc       	.word	0xfcef	; ????
     532:	79 59       	subi	r23, 0x99	; 153
     534:	6a 4a       	sbci	r22, 0xAA	; 170
     536:	98 64       	ori	r25, 0x48	; 72
     538:	d2 12       	cpse	r13, r18
     53a:	b7 00       	.word	0x00b7	; ????
     53c:	72 0b       	sbc	r23, r18
     53e:	ef fc       	.word	0xfcef	; ????
     540:	b9 27       	eor	r27, r25
     542:	5b 29       	or	r21, r11
     544:	6e a7       	std	Y+46, r22	; 0x2e
     546:	02 73       	andi	r16, 0x32	; 50
     548:	0f ef       	ldi	r16, 0xFF	; 255
     54a:	fc 79       	andi	r31, 0x9C	; 156
     54c:	19 a2       	std	Y+33, r1	; 0x21
     54e:	30 d2       	rcall	.+1120   	; 0x9b0 <__DATA_REGION_LENGTH__+0x1b0>
     550:	a5 30       	cpi	r26, 0x05	; 5
     552:	1a 72       	andi	r17, 0x2A	; 42
     554:	12 00       	.word	0x0012	; ????
     556:	74 0d       	add	r23, r4
     558:	ef fc       	.word	0xfcef	; ????
     55a:	59 e2       	ldi	r21, 0x29	; 41
     55c:	74 08       	sbc	r7, r4
     55e:	e3 b6       	in	r14, 0x33	; 51
     560:	6c 27       	eor	r22, r28
     562:	01 75       	andi	r16, 0x51	; 81
     564:	10 ef       	ldi	r17, 0xF0	; 240
     566:	fc b9       	out	0x0c, r31	; 12
     568:	87 49       	sbci	r24, 0x97	; 151
     56a:	98 84       	ldd	r9, Y+8	; 0x08
     56c:	49 98       	cbi	0x09, 1	; 9
     56e:	64 d2       	rcall	.+1224   	; 0xa38 <__DATA_REGION_LENGTH__+0x238>
     570:	92 53       	subi	r25, 0x32	; 50
     572:	00 76       	andi	r16, 0x60	; 96
     574:	0f ef       	ldi	r16, 0xFF	; 255
     576:	fc 79       	andi	r31, 0x9C	; 156
     578:	c9 a2       	std	Y+33, r12	; 0x21
     57a:	2c ca       	rjmp	.-2984   	; 0xfffff9d4 <__eeprom_end+0xff7ef9d4>
     57c:	2a 61       	ori	r18, 0x1A	; 26
     57e:	92 e6       	ldi	r25, 0x62	; 98
     580:	34 00       	.word	0x0034	; ????
     582:	77 10       	cpse	r7, r7
     584:	ef fc       	.word	0xfcef	; ????
     586:	79 c9       	rjmp	.-3342   	; 0xfffff87a <__eeprom_end+0xff7ef87a>
     588:	a2 2c       	mov	r10, r2
     58a:	4a 4a       	sbci	r20, 0xAA	; 170
     58c:	49 29       	or	r20, r9
     58e:	a9 25       	eor	r26, r9
     590:	39 09       	sbc	r19, r9
     592:	78 0d       	add	r23, r8
     594:	ef fc       	.word	0xfcef	; ????
     596:	b9 87       	std	Y+9, r27	; 0x09
     598:	51 51       	subi	r21, 0x11	; 17
     59a:	15 a3       	std	Z+37, r17	; 0x25
     59c:	62 4e       	sbci	r22, 0xE2	; 226
     59e:	01 79       	andi	r16, 0x91	; 145
     5a0:	11 ef       	ldi	r17, 0xF1	; 241
     5a2:	fc b9       	out	0x0c, r31	; 12
     5a4:	87 49       	sbci	r24, 0x97	; 151
     5a6:	98 84       	ldd	r9, Y+8	; 0x08
     5a8:	49 26       	eor	r4, r25
     5aa:	2d 71       	andi	r18, 0x1D	; 29
     5ac:	12 46       	sbci	r17, 0x62	; 98
     5ae:	43 04       	cpc	r4, r3
     5b0:	7a 0b       	sbc	r23, r26
     5b2:	ef fc       	.word	0xfcef	; ????
     5b4:	b9 0f       	add	r27, r25
     5b6:	6b d7       	rcall	.+3798   	; 0x148e <u8g2_draw_l90_r0+0x1e>
     5b8:	61 a7       	std	Z+41, r22	; 0x29
     5ba:	00 7b       	andi	r16, 0xB0	; 176
     5bc:	0d ef       	ldi	r16, 0xFD	; 253
     5be:	fc b1       	in	r31, 0x0c	; 12
     5c0:	2d ae       	std	Y+61, r2	; 0x3d
     5c2:	87 7a       	andi	r24, 0xA7	; 167
     5c4:	1a d7       	rcall	.+3636   	; 0x13fa <u8x8_cad_ssd13xx_fast_i2c+0x4c>
     5c6:	77 04       	cpc	r7, r7
     5c8:	7c 09       	sbc	r23, r12
     5ca:	ef fc       	.word	0xfcef	; ????
     5cc:	69 71       	andi	r22, 0x19	; 25
     5ce:	7f a7       	std	Y+47, r23	; 0x2f
     5d0:	01 7d       	andi	r16, 0xD1	; 209
     5d2:	0d ef       	ldi	r16, 0xFD	; 253
     5d4:	fc 91       	ld	r31, X
     5d6:	3d ae       	std	Y+61, r3	; 0x3d
     5d8:	e6 62       	ori	r30, 0x26	; 38
     5da:	1e d7       	rcall	.+3644   	; 0x1418 <u8x8_cad_ssd13xx_fast_i2c+0x6a>
     5dc:	76 0c       	add	r7, r6
     5de:	7e 0a       	sbc	r7, r30
     5e0:	ef fc       	.word	0xfcef	; ????
     5e2:	49 2d       	mov	r20, r9
     5e4:	a5 3a       	cpi	r26, 0xA5	; 165
     5e6:	7f 02       	muls	r23, r31
     5e8:	a0 06       	cpc	r10, r16
     5ea:	ef fc       	.word	0xfcef	; ????
     5ec:	f9 7f       	andi	r31, 0xF9	; 249
     5ee:	a1 0a       	sbc	r10, r17
     5f0:	ef fc       	.word	0xfcef	; ????
     5f2:	69 39       	cpi	r22, 0x99	; 153
     5f4:	dc ef       	ldi	r29, 0xFC	; 252
     5f6:	34 00       	.word	0x0034	; ????
     5f8:	a2 10       	cpse	r10, r2
     5fa:	ef fc       	.word	0xfcef	; ????
     5fc:	69 e9       	ldi	r22, 0x99	; 153
     5fe:	96 94       	lsr	r9
     600:	92 30       	cpi	r25, 0x02	; 2
     602:	09 93       	st	Y+, r16
     604:	da 9a       	sbi	0x1b, 2	; 27
     606:	b3 01       	movw	r22, r6
     608:	a3 0e       	add	r10, r19
     60a:	ef fc       	.word	0xfcef	; ????
     60c:	49 5b       	subi	r20, 0xB9	; 185
     60e:	29 4e       	sbci	r18, 0xE9	; 233
     610:	d7 b8       	out	0x07, r13	; 7
     612:	96 24       	eor	r9, r6
     614:	3b 09       	sbc	r19, r11
     616:	a4 10       	cpse	r10, r4
     618:	ef fc       	.word	0xfcef	; ????
     61a:	d9 c3       	rjmp	.+1970   	; 0xdce <TwoWire::endTransmission() [clone .constprop.18]+0x5a>
     61c:	68 c8       	rjmp	.-3888   	; 0xfffff6ee <__eeprom_end+0xff7ef6ee>
     61e:	a2 2c       	mov	r10, r2
     620:	ca 86       	std	Y+10, r12	; 0x0a
     622:	28 cc       	rjmp	.-1968   	; 0xfffffe74 <__eeprom_end+0xff7efe74>
     624:	59 00       	.word	0x0059	; ????
     626:	a5 11       	cpse	r26, r5
     628:	ef fc       	.word	0xfcef	; ????
     62a:	f1 2c       	mov	r15, r1
     62c:	ca 2a       	or	r12, r26
     62e:	61 92       	st	Z+, r6
     630:	0d 62       	ori	r16, 0x2D	; 45
     632:	38 88       	ldd	r3, Y+16	; 0x10
     634:	71 4e       	sbci	r23, 0xE1	; 225
     636:	04 a6       	std	Z+44, r0	; 0x2c
     638:	0a ef       	ldi	r16, 0xFA	; 250
     63a:	fc 69       	ori	r31, 0x9C	; 156
     63c:	71 3b       	cpi	r23, 0xB1	; 177
     63e:	dc 9d       	mul	r29, r12
     640:	06 a7       	std	Z+46, r16	; 0x2e
     642:	11 ef       	ldi	r17, 0xF1	; 241
     644:	fc 21       	and	r31, r12
     646:	31 ca       	rjmp	.-2974   	; 0xfffffaaa <__eeprom_end+0xff7efaaa>
     648:	72 31       	cpi	r23, 0x12	; 18
     64a:	ca a2       	std	Y+34, r12	; 0x22
     64c:	50 cf       	rjmp	.-352    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     64e:	a2 50       	subi	r26, 0x02	; 2
     650:	a7 01       	movw	r20, r14
     652:	a8 0b       	sbc	r26, r24
     654:	ef fc       	.word	0xfcef	; ????
     656:	29 51       	subi	r18, 0x19	; 25
     658:	16 e5       	ldi	r17, 0x56	; 86
     65a:	fc 13       	cpse	r31, r28
     65c:	00 a9       	ldd	r16, Z+48	; 0x30
     65e:	15 ef       	ldi	r17, 0xF5	; 245
     660:	fc 29       	or	r31, r12
     662:	43 14       	cp	r4, r3
     664:	26 89       	ldd	r18, Z+22	; 0x16
     666:	d2 94       	swap	r13
     668:	94 92       	xch	Z, r9
     66a:	52 92       	st	-Z, r5
     66c:	28 c5       	rjmp	.+2640   	; 0x10be <TwoWire::write(unsigned char const*, unsigned int)+0xa>
     66e:	68 c8       	rjmp	.-3888   	; 0xfffff740 <__eeprom_end+0xff7ef740>
     670:	49 00       	.word	0x0049	; ????
     672:	aa 0f       	add	r26, r26
     674:	ef fc       	.word	0xfcef	; ????
     676:	49 7b       	andi	r20, 0xB9	; 185
     678:	36 44       	sbci	r19, 0x46	; 70
     67a:	59 36       	cpi	r21, 0x69	; 105
     67c:	e4 d0       	rcall	.+456    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     67e:	a0 73       	andi	r26, 0x30	; 48
     680:	01 ab       	std	Z+49, r16	; 0x31
     682:	11 ef       	ldi	r17, 0xF1	; 241
     684:	fc d9       	rcall	.-3080   	; 0xfffffa7e <__eeprom_end+0xff7efa7e>
     686:	92 2c       	mov	r9, r2
     688:	c9 92       	st	Y+, r12
     68a:	2c 49       	sbci	r18, 0x9C	; 156
     68c:	93 34       	cpi	r25, 0x43	; 67
     68e:	49 93       	st	Y+, r20
     690:	9c 05       	cpc	r25, r12
     692:	ac 0a       	sbc	r10, r28
     694:	ef fc       	.word	0xfcef	; ????
     696:	f9 32       	cpi	r31, 0x29	; 41
     698:	c8 75       	andi	r28, 0x58	; 88
     69a:	2e 00       	.word	0x002e	; ????
     69c:	ad 09       	sbc	r26, r13
     69e:	ef fc       	.word	0xfcef	; ????
     6a0:	f9 32       	cpi	r31, 0x29	; 41
     6a2:	e4 7c       	andi	r30, 0xC4	; 196
     6a4:	02 ae       	std	Z+58, r0	; 0x3a
     6a6:	15 ef       	ldi	r17, 0xF5	; 245
     6a8:	fc 29       	or	r31, r12
     6aa:	43 14       	cp	r4, r3
     6ac:	26 89       	ldd	r18, Z+22	; 0x16
     6ae:	d2 a2       	std	Z+34, r13	; 0x22
     6b0:	54 94       	.word	0x9454	; ????
     6b2:	44 69       	ori	r20, 0x94	; 148
     6b4:	51 c2       	rjmp	.+1186   	; 0xb58 <__DATA_REGION_LENGTH__+0x358>
     6b6:	68 c8       	rjmp	.-3888   	; 0xfffff788 <__eeprom_end+0xff7ef788>
     6b8:	49 00       	.word	0x0049	; ????
     6ba:	af 09       	sbc	r26, r15
     6bc:	ef fc       	.word	0xfcef	; ????
     6be:	29 83       	std	Y+1, r18	; 0x01
     6c0:	ce 7f       	andi	r28, 0xFE	; 254
     6c2:	01 b0       	in	r0, 0x01	; 1
     6c4:	0c ef       	ldi	r16, 0xFC	; 252
     6c6:	fc 49       	sbci	r31, 0x9C	; 156
     6c8:	62 94       	swap	r6
     6ca:	45 a1       	ldd	r20, Z+37	; 0x25
     6cc:	ce 6f       	ori	r28, 0xFE	; 254
     6ce:	00 b1       	in	r16, 0x00	; 0
     6d0:	0e ef       	ldi	r16, 0xFE	; 254
     6d2:	fc d9       	rcall	.-3080   	; 0xfffffacc <__eeprom_end+0xff7efacc>
     6d4:	e2 70       	andi	r30, 0x02	; 2
     6d6:	10 e3       	ldi	r17, 0x30	; 48
     6d8:	1c 1c       	adc	r1, r12
     6da:	74 16       	cp	r7, r20
     6dc:	00 b2       	in	r0, 0x10	; 16
     6de:	0c ef       	ldi	r16, 0xFC	; 252
     6e0:	fc a1       	ldd	r31, Y+36	; 0x24
     6e2:	34 89       	ldd	r19, Z+20	; 0x14
     6e4:	d3 f2       	brvs	.-76     	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
     6e6:	ce 37       	cpi	r28, 0x7E	; 126
     6e8:	00 b3       	in	r16, 0x10	; 16
     6ea:	0c ef       	ldi	r16, 0xFC	; 252
     6ec:	fc 91       	ld	r31, X
     6ee:	39 cd       	rjmp	.-1422   	; 0x162 <__EEPROM_REGION_LENGTH__+0x62>
     6f0:	c3 24       	eor	r12, r3
     6f2:	cd f9       	.word	0xf9cd	; ????
     6f4:	08 b4       	in	r0, 0x28	; 40
     6f6:	09 ef       	ldi	r16, 0xF9	; 249
     6f8:	fc b1       	in	r31, 0x0c	; 12
     6fa:	34 e7       	ldi	r19, 0x74	; 116
     6fc:	3f 02       	muls	r19, r31
     6fe:	b5 11       	cpse	r27, r5
     700:	ef fc       	.word	0xfcef	; ????
     702:	b9 87       	std	Y+9, r27	; 0x09
     704:	49 98       	cbi	0x09, 1	; 9
     706:	84 49       	sbci	r24, 0x94	; 148
     708:	98 48       	sbci	r25, 0x88	; 136
     70a:	4a a2       	std	Y+34, r4	; 0x22
     70c:	d4 61       	ori	r29, 0x14	; 20
     70e:	00 b6       	in	r0, 0x30	; 48
     710:	14 ef       	ldi	r17, 0xF4	; 244
     712:	fc 29       	or	r31, r12
     714:	83 b2       	in	r8, 0x13	; 19
     716:	44 4b       	sbci	r20, 0xB4	; 180
     718:	b4 64       	ori	r27, 0x44	; 68
     71a:	4a 98       	cbi	0x09, 2	; 9
     71c:	84 49       	sbci	r24, 0x94	; 148
     71e:	98 84       	ldd	r9, Y+8	; 0x08
     720:	49 4e       	sbci	r20, 0xE9	; 233
     722:	02 b7       	in	r16, 0x32	; 50
     724:	08 ef       	ldi	r16, 0xF8	; 248
     726:	fc f9       	.word	0xf9fc	; ????
     728:	a4 f3       	brlt	.-24     	; 0x712 <__LOCK_REGION_LENGTH__+0x312>
     72a:	0d b8       	out	0x0d, r0	; 13
     72c:	08 ef       	ldi	r16, 0xF8	; 248
     72e:	fc f9       	.word	0xf9fc	; ????
     730:	df d2       	rcall	.+1470   	; 0xcf0 <u8g2_ll_hvline_vertical_top_lsb+0x68>
     732:	10 b9       	out	0x00, r17	; 0
     734:	0a ef       	ldi	r16, 0xFA	; 250
     736:	fc a1       	ldd	r31, Y+36	; 0x24
     738:	54 6e       	ori	r21, 0xE4	; 228
     73a:	dd f9       	.word	0xf9dd	; ????
     73c:	06 ba       	out	0x16, r0	; 22
     73e:	0e ef       	ldi	r16, 0xFE	; 254
     740:	fc 49       	sbci	r31, 0x9C	; 156
     742:	62 94       	swap	r6
     744:	45 a1       	ldd	r20, Z+37	; 0x25
     746:	0e 0e       	add	r0, r30
     748:	39 4f       	sbci	r19, 0xF9	; 249
     74a:	00 bb       	out	0x10, r16	; 16
     74c:	11 ef       	ldi	r17, 0xF1	; 241
     74e:	fc e9       	ldi	r31, 0x9C	; 156
     750:	49 9a       	sbi	0x09, 1	; 9
     752:	a4 49       	sbci	r26, 0x94	; 148
     754:	9a 64       	ori	r25, 0x4A	; 74
     756:	49 96       	adiw	r24, 0x19	; 25
     758:	64 49       	sbci	r22, 0x94	; 148
     75a:	ce 08       	sbc	r12, r14
     75c:	bc 10       	cpse	r11, r12
     75e:	ef fc       	.word	0xfcef	; ????
     760:	91 54       	subi	r25, 0x41	; 65
     762:	6e 4b       	sbci	r22, 0xBE	; 190
     764:	16 31       	cpi	r17, 0x16	; 22
     766:	09 93       	st	Y+, r16
     768:	70 ce       	rjmp	.-800    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     76a:	29 00       	.word	0x0029	; ????
     76c:	bd 0e       	add	r11, r29
     76e:	ef fc       	.word	0xfcef	; ????
     770:	91 54       	subi	r25, 0x41	; 65
     772:	6e 8a       	std	Y+22, r6	; 0x16
     774:	86 24       	eor	r8, r6
     776:	4e cb       	rjmp	.-2404   	; 0xfffffe14 <__eeprom_end+0xff7efe14>
     778:	3b 05       	cpc	r19, r11
     77a:	be 10       	cpse	r11, r14
     77c:	ef fc       	.word	0xfcef	; ????
     77e:	e7 34       	cpi	r30, 0x47	; 71
     780:	0f 93       	push	r16
     782:	a8 24       	eor	r10, r8
     784:	26 61       	ori	r18, 0x16	; 22
     786:	12 ce       	rjmp	.-988    	; 0x3ac <__EEPROM_REGION_LENGTH__+0x2ac>
     788:	39 05       	cpc	r19, r9
     78a:	bf 0e       	add	r11, r31
     78c:	ef fc       	.word	0xfcef	; ????
     78e:	49 39       	cpi	r20, 0x99	; 153
     790:	5c 2d       	mov	r21, r12
     792:	87 49       	sbci	r24, 0x97	; 151
     794:	18 0d       	add	r17, r8
     796:	39 09       	sbc	r19, r9
     798:	c0 12       	cpse	r12, r16
     79a:	ef fc       	.word	0xfcef	; ????
     79c:	a1 3c       	cpi	r26, 0xC1	; 193
     79e:	47 c5       	rjmp	.+2702   	; 0x122e <u8x8_d_ssd1306_128x64_noname+0x3c>
     7a0:	a8 98       	cbi	0x15, 0	; 21
     7a2:	84 c9       	rjmp	.-3320   	; 0xfffffaac <__eeprom_end+0xff7efaac>
     7a4:	b0 84       	ldd	r11, Z+8	; 0x08
     7a6:	49 98       	cbi	0x09, 1	; 9
     7a8:	53 00       	.word	0x0053	; ????
     7aa:	c1 12       	cpse	r12, r17
     7ac:	ef fc       	.word	0xfcef	; ????
     7ae:	b1 34       	cpi	r27, 0x41	; 65
     7b0:	87 c5       	rjmp	.+2830   	; 0x12c0 <u8x8_d_ssd1306_128x64_noname+0xce>
     7b2:	a8 98       	cbi	0x15, 0	; 21
     7b4:	84 c9       	rjmp	.-3320   	; 0xfffffabe <__eeprom_end+0xff7efabe>
     7b6:	b0 84       	ldd	r11, Z+8	; 0x08
     7b8:	49 98       	cbi	0x09, 1	; 9
     7ba:	53 00       	.word	0x0053	; ????
     7bc:	c2 13       	cpse	r28, r18
     7be:	ef fc       	.word	0xfcef	; ????
     7c0:	21 31       	cpi	r18, 0x11	; 17
     7c2:	ca 41       	sbci	r28, 0x1A	; 26
     7c4:	31 2a       	or	r3, r17
     7c6:	26 61       	ori	r18, 0x16	; 22
     7c8:	32 2c       	mov	r3, r2
     7ca:	61 12       	cpse	r6, r17
     7cc:	e6 14       	cp	r14, r6
     7ce:	00 c3       	rjmp	.+1536   	; 0xdd0 <TwoWire::endTransmission() [clone .constprop.18]+0x5c>
     7d0:	13 ef       	ldi	r17, 0xF3	; 243
     7d2:	fc 11       	cpse	r31, r12
     7d4:	29 89       	ldd	r18, Y+17	; 0x11
     7d6:	74 50       	subi	r23, 0x04	; 4
     7d8:	8c 8a       	std	Y+20, r8	; 0x14
     7da:	49 98       	cbi	0x09, 1	; 9
     7dc:	0c 4b       	sbci	r16, 0xBC	; 188
     7de:	98 84       	ldd	r9, Y+8	; 0x08
     7e0:	39 05       	cpc	r19, r9
     7e2:	c4 13       	cpse	r28, r20
     7e4:	ef fc       	.word	0xfcef	; ????
     7e6:	91 28       	or	r9, r1
     7e8:	8b 72       	andi	r24, 0x2B	; 43
     7ea:	50 8c       	ldd	r5, Z+24	; 0x18
     7ec:	8a 49       	sbci	r24, 0x9A	; 154
     7ee:	98 0c       	add	r9, r8
     7f0:	4b 98       	cbi	0x09, 3	; 9
     7f2:	84 39       	cpi	r24, 0x94	; 148
     7f4:	05 c5       	rjmp	.+2570   	; 0x1200 <u8x8_d_ssd1306_128x64_noname+0xe>
     7f6:	13 ef       	ldi	r17, 0xF3	; 243
     7f8:	fc 21       	and	r31, r12
     7fa:	31 0a       	sbc	r3, r17
     7fc:	55 31       	cpi	r21, 0x15	; 21
     7fe:	2a 26       	eor	r2, r26
     800:	61 32       	cpi	r22, 0x21	; 33
     802:	2c 61       	ori	r18, 0x1C	; 28
     804:	12 e6       	ldi	r17, 0x62	; 98
     806:	14 00       	.word	0x0014	; ????
     808:	c6 14       	cp	r12, r6
     80a:	ef fc       	.word	0xfcef	; ????
     80c:	29 c9       	rjmp	.-3502   	; 0xfffffa60 <__eeprom_end+0xff7efa60>
     80e:	52 4c       	sbci	r21, 0xC2	; 194
     810:	c2 24       	eor	r12, r2
     812:	4c a6       	std	Y+44, r4	; 0x2c
     814:	31 09       	sbc	r19, r1
     816:	93 30       	cpi	r25, 0x03	; 3
     818:	19 72       	andi	r17, 0x29	; 41
     81a:	0a 00       	.word	0x000a	; ????
     81c:	c7 0e       	add	r12, r23
     81e:	ef fc       	.word	0xfcef	; ????
     820:	29 43       	sbci	r18, 0x39	; 57
     822:	14 26       	eor	r1, r20
     824:	71 8f       	std	Z+25, r23	; 0x19
     826:	d1 90       	ld	r13, Z+
     828:	16 01       	movw	r2, r12
     82a:	c8 10       	cpse	r12, r8
     82c:	ef fc       	.word	0xfcef	; ????
     82e:	a1 3c       	cpi	r26, 0xC1	; 193
     830:	c7 86       	std	Z+15, r12	; 0x0f
     832:	25 8e       	std	Z+29, r2	; 0x1d
     834:	87 2c       	mov	r8, r7
     836:	8e 87       	std	Y+14, r24	; 0x0e
     838:	9d 02       	muls	r25, r29
     83a:	c9 10       	cpse	r12, r9
     83c:	ef fc       	.word	0xfcef	; ????
     83e:	b1 34       	cpi	r27, 0x41	; 65
     840:	07 87       	std	Z+15, r16	; 0x0f
     842:	25 8e       	std	Z+29, r2	; 0x1d
     844:	87 2c       	mov	r8, r7
     846:	8e 87       	std	Y+14, r24	; 0x0e
     848:	9d 02       	muls	r25, r29
     84a:	ca 11       	cpse	r28, r10
     84c:	ef fc       	.word	0xfcef	; ????
     84e:	21 31       	cpi	r18, 0x11	; 17
     850:	ca a1       	ldd	r28, Y+34	; 0x22
     852:	61 89       	ldd	r22, Z+17	; 0x11
     854:	e3 21       	and	r30, r3
     856:	8b e3       	ldi	r24, 0x3B	; 59
     858:	61 a7       	std	Z+41, r22	; 0x29
     85a:	00 cb       	rjmp	.-2560   	; 0xfffffe5c <__eeprom_end+0xff7efe5c>
     85c:	12 ef       	ldi	r17, 0xF2	; 242
     85e:	fc 91       	ld	r31, X
     860:	28 8b       	std	Y+16, r18	; 0x10
     862:	72 68       	ori	r23, 0x82	; 130
     864:	58 e2       	ldi	r21, 0x28	; 40
     866:	78 c8       	rjmp	.-3856   	; 0xfffff958 <__eeprom_end+0xff7ef958>
     868:	e2 78       	andi	r30, 0x82	; 130
     86a:	d8 29       	or	r29, r8
     86c:	00 cc       	rjmp	.-2048   	; 0x6e <__SREG__+0x2f>
     86e:	0e ef       	ldi	r16, 0xFE	; 254
     870:	fc a1       	ldd	r31, Y+36	; 0x24
     872:	3c 07       	cpc	r19, r28
     874:	07 31       	cpi	r16, 0x17	; 23
     876:	ee 38       	cpi	r30, 0x8E	; 142
     878:	e8 14       	cp	r14, r8
     87a:	00 cd       	rjmp	.-1536   	; 0x27c <__EEPROM_REGION_LENGTH__+0x17c>
     87c:	0e ef       	ldi	r16, 0xFE	; 254
     87e:	fc b1       	in	r31, 0x0c	; 12
     880:	34 47       	sbci	r19, 0x74	; 116
     882:	07 31       	cpi	r16, 0x17	; 23
     884:	ee 38       	cpi	r30, 0x8E	; 142
     886:	e8 14       	cp	r14, r8
     888:	00 ce       	rjmp	.-1024   	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     88a:	0e ef       	ldi	r16, 0xFE	; 254
     88c:	fc b1       	in	r31, 0x0c	; 12
     88e:	34 c9       	rjmp	.-3480   	; 0xfffffaf8 <__eeprom_end+0xff7efaf8>
     890:	b1 41       	sbci	r27, 0x11	; 17
     892:	8c 3b       	cpi	r24, 0xBC	; 188
     894:	0e 3a       	cpi	r16, 0xAE	; 174
     896:	05 cf       	rjmp	.-502    	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
     898:	0f ef       	ldi	r16, 0xFF	; 255
     89a:	fc 91       	ld	r31, X
     89c:	2c ca       	rjmp	.-2984   	; 0xfffffcf6 <__eeprom_end+0xff7efcf6>
     89e:	72 68       	ori	r23, 0x82	; 130
     8a0:	10 e3       	ldi	r17, 0x30	; 48
     8a2:	8e 83       	std	Y+6, r24	; 0x06
     8a4:	4e 01       	movw	r8, r28
     8a6:	d0 13       	cpse	r29, r16
     8a8:	ef fc       	.word	0xfcef	; ????
     8aa:	f1 41       	sbci	r31, 0x11	; 17
     8ac:	2b 65       	ori	r18, 0x5B	; 91
     8ae:	51 96       	adiw	r26, 0x11	; 17
     8b0:	4c b5       	in	r20, 0x2c	; 44
     8b2:	28 8b       	std	Y+16, r18	; 0x10
     8b4:	b2 64       	ori	r27, 0x42	; 66
     8b6:	d0 49       	sbci	r29, 0x90	; 144
     8b8:	00 d1       	rcall	.+512    	; 0xaba <__DATA_REGION_LENGTH__+0x2ba>
     8ba:	15 ef       	ldi	r17, 0xF5	; 245
     8bc:	fc 11       	cpse	r31, r12
     8be:	29 89       	ldd	r18, Y+17	; 0x11
     8c0:	74 28       	or	r7, r4
     8c2:	4c b4       	in	r4, 0x2c	; 44
     8c4:	a4 94       	.word	0x94a4	; ????
     8c6:	94 92       	xch	Z, r9
     8c8:	28 a9       	ldd	r18, Y+48	; 0x30
     8ca:	29 61       	ori	r18, 0x19	; 25
     8cc:	4e 01       	movw	r8, r28
     8ce:	d2 13       	cpse	r29, r18
     8d0:	ef fc       	.word	0xfcef	; ????
     8d2:	a1 3c       	cpi	r26, 0xC1	; 193
     8d4:	07 87       	std	Z+15, r16	; 0x0f
     8d6:	28 4c       	sbci	r18, 0xC8	; 200
     8d8:	c2 24       	eor	r12, r2
     8da:	4c c2       	rjmp	.+1176   	; 0xd74 <TwoWire::endTransmission() [clone .constprop.18]>
     8dc:	24 8c       	ldd	r2, Z+28	; 0x1c
     8de:	86 9c       	mul	r8, r6
     8e0:	04 d3       	rcall	.+1544   	; 0xeea <Print::write(unsigned char const*, unsigned int)+0x44>
     8e2:	13 ef       	ldi	r17, 0xF3	; 243
     8e4:	fc b1       	in	r31, 0x0c	; 12
     8e6:	34 47       	sbci	r19, 0x74	; 116
     8e8:	87 28       	or	r8, r7
     8ea:	4c c2       	rjmp	.+1176   	; 0xd84 <TwoWire::endTransmission() [clone .constprop.18]+0x10>
     8ec:	24 4c       	sbci	r18, 0xC4	; 196
     8ee:	c2 24       	eor	r12, r2
     8f0:	8c 86       	std	Y+12, r8	; 0x0c
     8f2:	9c 04       	cpc	r9, r12
     8f4:	d4 14       	cp	r13, r4
     8f6:	ef fc       	.word	0xfcef	; ????
     8f8:	21 31       	cpi	r18, 0x11	; 17
     8fa:	ca b1       	in	r28, 0x0a	; 10
     8fc:	21 0a       	sbc	r2, r17
     8fe:	93 30       	cpi	r25, 0x03	; 3
     900:	09 93       	st	Y+, r16
     902:	30 09       	sbc	r19, r0
     904:	a3 21       	and	r26, r3
     906:	27 01       	movw	r4, r14
     908:	d5 15       	cp	r29, r5
     90a:	ef fc       	.word	0xfcef	; ????
     90c:	11 29       	or	r17, r1
     90e:	89 74       	andi	r24, 0x49	; 73
     910:	6c 88       	ldd	r6, Y+20	; 0x14
     912:	c2 24       	eor	r12, r2
     914:	4c c2       	rjmp	.+1176   	; 0xdae <TwoWire::endTransmission() [clone .constprop.18]+0x3a>
     916:	24 4c       	sbci	r18, 0xC4	; 196
     918:	c2 68       	ori	r28, 0x82	; 130
     91a:	c8 49       	sbci	r28, 0x98	; 152
     91c:	00 d6       	rcall	.+3072   	; 0x151e <u8g2_update_dimension_r0+0x8e>
     91e:	15 ef       	ldi	r17, 0xF5	; 245
     920:	fc 91       	ld	r31, X
     922:	28 8b       	std	Y+16, r18	; 0x10
     924:	72 6c       	ori	r23, 0xC2	; 194
     926:	88 c2       	rjmp	.+1296   	; 0xe38 <TWI_MasterSetBaud.part.3.constprop.9+0x2c>
     928:	24 4c       	sbci	r18, 0xC4	; 196
     92a:	c2 24       	eor	r12, r2
     92c:	4c c2       	rjmp	.+1176   	; 0xdc6 <TwoWire::endTransmission() [clone .constprop.18]+0x52>
     92e:	68 c8       	rjmp	.-3888   	; 0xfffffa00 <__eeprom_end+0xff7efa00>
     930:	49 00       	.word	0x0049	; ????
     932:	d7 0d       	add	r29, r7
     934:	ef fc       	.word	0xfcef	; ????
     936:	d9 c3       	rjmp	.+1970   	; 0x10ea <TwoWire::write(unsigned char const*, unsigned int)+0x36>
     938:	a8 a8       	ldd	r10, Y+48	; 0x30
     93a:	8a 51       	subi	r24, 0x1A	; 26
     93c:	31 67       	ori	r19, 0x71	; 113
     93e:	01 d8       	rcall	.-4094   	; 0xfffff942 <__eeprom_end+0xff7ef942>
     940:	16 ef       	ldi	r17, 0xF6	; 246
     942:	fc d1       	rcall	.+1016   	; 0xd3c <u8g2_ll_hvline_vertical_top_lsb+0xb4>
     944:	68 88       	ldd	r6, Y+16	; 0x10
     946:	32 25       	eor	r19, r2
     948:	4a 4a       	sbci	r20, 0xAA	; 170
     94a:	49 53       	subi	r20, 0x39	; 57
     94c:	52 4a       	sbci	r21, 0xA2	; 162
     94e:	4a 89       	ldd	r20, Y+18	; 0x12
     950:	16 0d       	add	r17, r6
     952:	51 0e       	add	r5, r17
     954:	03 d9       	rcall	.-3578   	; 0xfffffb5c <__eeprom_end+0xff7efb5c>
     956:	13 ef       	ldi	r17, 0xF3	; 243
     958:	fc a1       	ldd	r31, Y+36	; 0x24
     95a:	3c c7       	rjmp	.+3704   	; 0x17d4 <u8g2_DrawHVLine+0xd4>
     95c:	c2 24       	eor	r12, r2
     95e:	4c c2       	rjmp	.+1176   	; 0xdf8 <TwoWire::endTransmission() [clone .constprop.18]+0x84>
     960:	24 4c       	sbci	r18, 0xC4	; 196
     962:	c2 24       	eor	r12, r2
     964:	8c 86       	std	Y+12, r8	; 0x0c
     966:	9c 04       	cpc	r9, r12
     968:	da 13       	cpse	r29, r26
     96a:	ef fc       	.word	0xfcef	; ????
     96c:	b1 34       	cpi	r27, 0x41	; 65
     96e:	07 2b       	or	r16, r23
     970:	61 12       	cpse	r6, r17
     972:	26 61       	ori	r18, 0x16	; 22
     974:	12 26       	eor	r1, r18
     976:	61 34       	cpi	r22, 0x41	; 65
     978:	e4 24       	eor	r14, r4
     97a:	00 db       	rcall	.-2560   	; 0xffffff7c <__eeprom_end+0xff7eff7c>
     97c:	14 ef       	ldi	r17, 0xF4	; 244
     97e:	fc 21       	and	r31, r12
     980:	31 ca       	rjmp	.-2974   	; 0xfffffde4 <__eeprom_end+0xff7efde4>
     982:	a1 30       	cpi	r26, 0x01	; 1
     984:	09 93       	st	Y+, r16
     986:	30 09       	sbc	r19, r0
     988:	93 30       	cpi	r25, 0x03	; 3
     98a:	09 a3       	std	Y+33, r16	; 0x21
     98c:	21 27       	eor	r18, r17
     98e:	01 dc       	rcall	.-2046   	; 0x192 <__EEPROM_REGION_LENGTH__+0x92>
     990:	15 ef       	ldi	r17, 0xF5	; 245
     992:	fc 91       	ld	r31, X
     994:	28 8b       	std	Y+16, r18	; 0x10
     996:	72 28       	or	r7, r2
     998:	4c c2       	rjmp	.+1176   	; 0xe32 <TWI_MasterSetBaud.part.3.constprop.9+0x26>
     99a:	24 4c       	sbci	r18, 0xC4	; 196
     99c:	c2 24       	eor	r12, r2
     99e:	4c c2       	rjmp	.+1176   	; 0xe38 <TWI_MasterSetBaud.part.3.constprop.9+0x2c>
     9a0:	68 c8       	rjmp	.-3888   	; 0xfffffa72 <__eeprom_end+0xff7efa72>
     9a2:	49 00       	.word	0x0049	; ????
     9a4:	dd 0e       	add	r13, r29
     9a6:	ef fc       	.word	0xfcef	; ????
     9a8:	c1 34       	cpi	r28, 0x41	; 65
     9aa:	07 b3       	in	r16, 0x17	; 23
     9ac:	28 ab       	std	Y+48, r18	; 0x30
     9ae:	a4 71       	andi	r26, 0x14	; 20
     9b0:	3b 0d       	add	r19, r11
     9b2:	de 10       	cpse	r13, r14
     9b4:	ef fc       	.word	0xfcef	; ????
     9b6:	f1 78       	andi	r31, 0x81	; 129
     9b8:	90 c2       	rjmp	.+1312   	; 0xeda <Print::write(unsigned char const*, unsigned int)+0x34>
     9ba:	24 4c       	sbci	r18, 0xC4	; 196
     9bc:	c2 64       	ori	r28, 0x42	; 66
     9be:	90 e2       	ldi	r25, 0x20	; 32
     9c0:	3a 19       	sub	r19, r10
     9c2:	df 13       	cpse	r29, r31
     9c4:	ef fc       	.word	0xfcef	; ????
     9c6:	49 62       	ori	r20, 0x29	; 41
     9c8:	94 45       	sbci	r25, 0x54	; 84
     9ca:	59 12       	cpse	r5, r25
     9cc:	26 61       	ori	r18, 0x16	; 22
     9ce:	94 95       	.word	0x9594	; ????
     9d0:	b2 28       	or	r11, r2
     9d2:	d1 49       	sbci	r29, 0x91	; 145
     9d4:	00 e0       	ldi	r16, 0x00	; 0
     9d6:	11 ef       	ldi	r17, 0xF1	; 241
     9d8:	fc 49       	sbci	r31, 0x9C	; 156
     9da:	79 0e       	add	r7, r25
     9dc:	0e 79       	andi	r16, 0x9E	; 158
     9de:	34 28       	or	r3, r4
     9e0:	61 92       	st	Z+, r6
     9e2:	49 4b       	sbci	r20, 0xB9	; 185
     9e4:	4e 01       	movw	r8, r28
     9e6:	e1 11       	cpse	r30, r1
     9e8:	ef fc       	.word	0xfcef	; ????
     9ea:	69 69       	ori	r22, 0x99	; 153
     9ec:	8e 0e       	add	r8, r30
     9ee:	79 34       	cpi	r23, 0x49	; 73
     9f0:	28 61       	ori	r18, 0x18	; 24
     9f2:	92 49       	sbci	r25, 0x92	; 146
     9f4:	4b 4e       	sbci	r20, 0xEB	; 235
     9f6:	01 e2       	ldi	r16, 0x21	; 33
     9f8:	12 ef       	ldi	r17, 0xF2	; 242
     9fa:	fc 49       	sbci	r31, 0x9C	; 156
     9fc:	62 94       	swap	r6
     9fe:	63 43       	sbci	r22, 0x33	; 51
     a00:	1e 0d       	add	r17, r14
     a02:	4a 98       	cbi	0x09, 2	; 9
     a04:	64 d2       	rcall	.+1224   	; 0xece <Print::write(unsigned char const*, unsigned int)+0x28>
     a06:	92 53       	subi	r25, 0x32	; 50
     a08:	00 e3       	ldi	r16, 0x30	; 48
     a0a:	13 ef       	ldi	r17, 0xF3	; 243
     a0c:	fc 29       	or	r31, r12
     a0e:	52 12       	cpse	r5, r18
     a10:	e9 d8       	rcall	.-3630   	; 0xfffffbe4 <__eeprom_end+0xff7efbe4>
     a12:	90 47       	sbci	r25, 0x70	; 112
     a14:	83 12       	cpse	r8, r19
     a16:	26 99       	sbic	0x04, 6	; 4
     a18:	b4 e4       	ldi	r27, 0x44	; 68
     a1a:	14 00       	.word	0x0014	; ????
     a1c:	e4 13       	cpse	r30, r20
     a1e:	ef fc       	.word	0xfcef	; ????
     a20:	29 51       	subi	r18, 0x19	; 25
     a22:	16 e5       	ldi	r17, 0x56	; 86
     a24:	d8 90       	.word	0x90d8	; ????
     a26:	47 83       	std	Z+7, r20	; 0x07
     a28:	12 26       	eor	r1, r18
     a2a:	99 b4       	in	r9, 0x29	; 41
     a2c:	e4 14       	cp	r14, r4
     a2e:	00 e5       	ldi	r16, 0x50	; 80
     a30:	13 ef       	ldi	r17, 0xF3	; 243
     a32:	fc 21       	and	r31, r12
     a34:	31 0a       	sbc	r3, r17
     a36:	75 70       	andi	r23, 0x05	; 5
     a38:	c8 a3       	std	Y+32, r28	; 0x20
     a3a:	41 09       	sbc	r20, r1
     a3c:	93 4c       	sbci	r25, 0xC3	; 195
     a3e:	5a 72       	andi	r21, 0x2A	; 42
     a40:	0a 00       	.word	0x000a	; ????
     a42:	e6 11       	cpse	r30, r6
     a44:	ef fc       	.word	0xfcef	; ????
     a46:	79 51       	subi	r23, 0x19	; 25
     a48:	d2 24       	eor	r13, r2
     a4a:	1a 94       	dec	r1
     a4c:	28 8b       	std	Y+16, r18	; 0x10
     a4e:	92 48       	sbci	r25, 0x82	; 130
     a50:	c9 49       	sbci	r28, 0x99	; 153
     a52:	00 e7       	ldi	r16, 0x70	; 112
     a54:	0e ef       	ldi	r16, 0xFE	; 254
     a56:	fc 79       	andi	r31, 0x9C	; 156
     a58:	19 a2       	std	Y+33, r1	; 0x21
     a5a:	30 89       	ldd	r19, Z+16	; 0x10
     a5c:	8b d1       	rcall	.+790    	; 0xd74 <TwoWire::endTransmission() [clone .constprop.18]>
     a5e:	90 16       	cp	r9, r16
     a60:	01 e8       	ldi	r16, 0x81	; 129
     a62:	11 ef       	ldi	r17, 0xF1	; 241
     a64:	fc 49       	sbci	r31, 0x9C	; 156
     a66:	79 0e       	add	r7, r25
     a68:	0e 51       	subi	r16, 0x1E	; 30
     a6a:	98 0c       	add	r9, r8
     a6c:	4b 1c       	adc	r4, r11
     a6e:	46 43       	sbci	r20, 0x36	; 54
     a70:	4e 02       	muls	r20, r30
     a72:	e9 11       	cpse	r30, r9
     a74:	ef fc       	.word	0xfcef	; ????
     a76:	69 69       	ori	r22, 0x99	; 153
     a78:	8e 0e       	add	r8, r30
     a7a:	51 98       	cbi	0x0a, 1	; 10
     a7c:	0c 4b       	sbci	r16, 0xBC	; 188
     a7e:	1c 46       	sbci	r17, 0x6C	; 108
     a80:	43 4e       	sbci	r20, 0xE3	; 227
     a82:	02 ea       	ldi	r16, 0xA2	; 162
     a84:	12 ef       	ldi	r17, 0xF2	; 242
     a86:	fc 49       	sbci	r31, 0x9C	; 156
     a88:	62 94       	swap	r6
     a8a:	63 43       	sbci	r22, 0x33	; 51
     a8c:	14 26       	eor	r1, r20
     a8e:	c3 12       	cpse	r12, r19
     a90:	87 d1       	rcall	.+782    	; 0xda0 <TwoWire::endTransmission() [clone .constprop.18]+0x2c>
     a92:	90 93 00 eb 	sts	0xEB00, r25	; 0x80eb00 <__bss_end+0xad56>
     a96:	13 ef       	ldi	r17, 0xF3	; 243
     a98:	fc 29       	or	r31, r12
     a9a:	51 16       	cp	r5, r17
     a9c:	e5 d8       	rcall	.-3638   	; 0xfffffc68 <__eeprom_end+0xff7efc68>
     a9e:	10 85       	ldd	r17, Z+8	; 0x08
     aa0:	c9 b0       	in	r12, 0x09	; 9
     aa2:	c4 61       	ori	r28, 0x14	; 20
     aa4:	34 e4       	ldi	r19, 0x44	; 68
     aa6:	24 00       	.word	0x0024	; ????
     aa8:	ec 0c       	add	r14, r12
     aaa:	ef fc       	.word	0xfcef	; ????
     aac:	49 79       	andi	r20, 0x99	; 153
     aae:	8e ca       	rjmp	.-2788   	; 0xffffffcc <__eeprom_end+0xff7effcc>
     ab0:	1d 07       	cpc	r17, r29
     ab2:	9d 02       	muls	r25, r29
     ab4:	ed 0c       	add	r14, r13
     ab6:	ef fc       	.word	0xfcef	; ????
     ab8:	69 69       	ori	r22, 0x99	; 153
     aba:	0e cb       	rjmp	.-2532   	; 0xd8 <__trampolines_end+0x5c>
     abc:	1d 07       	cpc	r17, r29
     abe:	9d 02       	muls	r25, r29
     ac0:	ee 0d       	add	r30, r14
     ac2:	ef fc       	.word	0xfcef	; ????
     ac4:	49 62       	ori	r20, 0x29	; 41
     ac6:	94 83       	std	Z+4, r25	; 0x04
     ac8:	72 c7       	rjmp	.+3812   	; 0x19ae <u8g2_font_decode_get_unsigned_bits+0x28>
     aca:	41 a7       	std	Z+41, r20	; 0x29
     acc:	00 ef       	ldi	r16, 0xF0	; 240
     ace:	0e ef       	ldi	r16, 0xFE	; 254
     ad0:	fc 29       	or	r31, r12
     ad2:	51 16       	cp	r5, r17
     ad4:	e5 a0       	ldd	r14, Z+37	; 0x25
     ad6:	dc 71       	andi	r29, 0x1C	; 28
     ad8:	d0 29       	or	r29, r0
     ada:	00 f0       	brcs	.+0      	; 0xadc <__DATA_REGION_LENGTH__+0x2dc>
     adc:	14 ef       	ldi	r17, 0xF4	; 244
     ade:	fc 91       	ld	r31, X
     ae0:	28 14       	cp	r2, r8
     ae2:	93 3c       	cpi	r25, 0xC3	; 195
     ae4:	1b a2       	std	Y+35, r1	; 0x23
     ae6:	30 09       	sbc	r19, r0
     ae8:	93 30       	cpi	r25, 0x03	; 3
     aea:	09 a3       	std	Y+33, r16	; 0x21
     aec:	21 27       	eor	r18, r17
     aee:	01 f1       	breq	.+64     	; 0xb30 <__DATA_REGION_LENGTH__+0x330>
     af0:	13 ef       	ldi	r17, 0xF3	; 243
     af2:	fc 29       	or	r31, r12
     af4:	52 12       	cpse	r5, r18
     af6:	e9 50       	subi	r30, 0x09	; 9
     af8:	32 69       	ori	r19, 0x92	; 146
     afa:	49 98       	cbi	0x09, 1	; 9
     afc:	84 49       	sbci	r24, 0x94	; 148
     afe:	98 84       	ldd	r9, Y+8	; 0x08
     b00:	39 05       	cpc	r19, r9
     b02:	f2 12       	cpse	r15, r18
     b04:	ef fc       	.word	0xfcef	; ????
     b06:	49 79       	andi	r20, 0x99	; 153
     b08:	0e 0e       	add	r0, r30
     b0a:	51 98       	cbi	0x0a, 1	; 10
     b0c:	84 49       	sbci	r24, 0x94	; 148
     b0e:	98 84       	ldd	r9, Y+8	; 0x08
     b10:	d1 90       	ld	r13, Z+
     b12:	93 00       	.word	0x0093	; ????
     b14:	f3 12       	cpse	r15, r19
     b16:	ef fc       	.word	0xfcef	; ????
     b18:	69 69       	ori	r22, 0x99	; 153
     b1a:	8e 0e       	add	r8, r30
     b1c:	51 98       	cbi	0x0a, 1	; 10
     b1e:	84 49       	sbci	r24, 0x94	; 148
     b20:	98 84       	ldd	r9, Y+8	; 0x08
     b22:	d1 90       	ld	r13, Z+
     b24:	93 00       	.word	0x0093	; ????
     b26:	f4 13       	cpse	r31, r20
     b28:	ef fc       	.word	0xfcef	; ????
     b2a:	49 62       	ori	r20, 0x29	; 41
     b2c:	94 63       	ori	r25, 0x34	; 52
     b2e:	43 14       	cp	r4, r3
     b30:	26 61       	ori	r18, 0x16	; 22
     b32:	12 26       	eor	r1, r18
     b34:	61 34       	cpi	r22, 0x41	; 65
     b36:	e4 24       	eor	r14, r4
     b38:	00 f5       	brcc	.+64     	; 0xb7a <__DATA_REGION_LENGTH__+0x37a>
     b3a:	13 ef       	ldi	r17, 0xF3	; 243
     b3c:	fc 29       	or	r31, r12
     b3e:	52 12       	cpse	r5, r18
     b40:	e9 d8       	rcall	.-3630   	; 0xfffffd14 <__eeprom_end+0xff7efd14>
     b42:	10 85       	ldd	r17, Z+8	; 0x08
     b44:	49 98       	cbi	0x09, 1	; 9
     b46:	84 49       	sbci	r24, 0x94	; 148
     b48:	18 0d       	add	r17, r8
     b4a:	39 09       	sbc	r19, r9
     b4c:	f6 13       	cpse	r31, r22
     b4e:	ef fc       	.word	0xfcef	; ????
     b50:	29 51       	subi	r18, 0x19	; 25
     b52:	16 e5       	ldi	r17, 0x56	; 86
     b54:	d8 10       	cpse	r13, r8
     b56:	85 49       	sbci	r24, 0x95	; 149
     b58:	98 84       	ldd	r9, Y+8	; 0x08
     b5a:	49 18       	sub	r4, r9
     b5c:	0d 39       	cpi	r16, 0x9D	; 157
     b5e:	09 f7       	brne	.-62     	; 0xb22 <__DATA_REGION_LENGTH__+0x322>
     b60:	0d ef       	ldi	r16, 0xFD	; 253
     b62:	fc d9       	rcall	.-3080   	; 0xffffff5c <__eeprom_end+0xff7eff5c>
     b64:	e2 1c       	adc	r14, r2
     b66:	1c 74       	andi	r17, 0x4C	; 76
     b68:	30 ce       	rjmp	.-928    	; 0x7ca <__LOCK_REGION_LENGTH__+0x3ca>
     b6a:	d9 00       	.word	0x00d9	; ????
     b6c:	f8 12       	cpse	r15, r24
     b6e:	ef fc       	.word	0xfcef	; ????
     b70:	b9 46       	sbci	r27, 0x69	; 105
     b72:	43 94       	inc	r4
     b74:	29 51       	subi	r18, 0x19	; 25
     b76:	d2 94       	swap	r13
     b78:	68 d1       	rcall	.+720    	; 0xe4a <TWI_MasterSetBaud.part.3.constprop.9+0x3e>
     b7a:	10 e5       	ldi	r17, 0x50	; 80
     b7c:	30 00       	.word	0x0030	; ????
     b7e:	f9 12       	cpse	r15, r25
     b80:	ef fc       	.word	0xfcef	; ????
     b82:	49 79       	andi	r20, 0x99	; 153
     b84:	8e 85       	ldd	r24, Y+14	; 0x0e
     b86:	49 98       	cbi	0x09, 1	; 9
     b88:	84 49       	sbci	r24, 0x94	; 148
     b8a:	98 64       	ori	r25, 0x48	; 72
     b8c:	d2 92       	st	-Z, r13
     b8e:	53 00       	.word	0x0053	; ????
     b90:	fa 11       	cpse	r31, r10
     b92:	ef fc       	.word	0xfcef	; ????
     b94:	69 69       	ori	r22, 0x99	; 153
     b96:	0e 56       	subi	r16, 0x6E	; 110
     b98:	c2 24       	eor	r12, r2
     b9a:	4c c2       	rjmp	.+1176   	; 0x1034 <TwoWire::peek()+0x4>
     b9c:	24 93       	xch	Z, r18
     b9e:	96 9c       	mul	r9, r6
     ba0:	02 fb       	bst	r16, 2
     ba2:	13 ef       	ldi	r17, 0xF3	; 243
     ba4:	fc 49       	sbci	r31, 0x9C	; 156
     ba6:	62 94       	swap	r6
     ba8:	43 61       	ori	r20, 0x13	; 19
     baa:	12 26       	eor	r1, r18
     bac:	61 12       	cpse	r6, r17
     bae:	26 99       	sbic	0x04, 6	; 4
     bb0:	b4 e4       	ldi	r27, 0x44	; 68
     bb2:	14 00       	.word	0x0014	; ????
     bb4:	fc 13       	cpse	r31, r28
     bb6:	ef fc       	.word	0xfcef	; ????
     bb8:	29 51       	subi	r18, 0x19	; 25
     bba:	16 e5       	ldi	r17, 0x56	; 86
     bbc:	50 98       	cbi	0x0a, 0	; 10
     bbe:	84 49       	sbci	r24, 0x94	; 148
     bc0:	98 84       	ldd	r9, Y+8	; 0x08
     bc2:	49 26       	eor	r4, r25
     bc4:	2d 39       	cpi	r18, 0x9D	; 157
     bc6:	05 fd       	sbrc	r16, 5
     bc8:	13 ef       	ldi	r17, 0xF3	; 243
     bca:	fc 69       	ori	r31, 0x9C	; 156
     bcc:	69 0e       	add	r6, r25
     bce:	56 c2       	rjmp	.+1196   	; 0x107c <TwoWire::available()>
     bd0:	24 4c       	sbci	r18, 0xC4	; 196
     bd2:	32 69       	ori	r19, 0x92	; 146
     bd4:	89 93       	st	Y+, r24
     bd6:	30 1a       	sub	r3, r16
     bd8:	22 00       	.word	0x0022	; ????
     bda:	fe 11       	cpse	r31, r14
     bdc:	ef fc       	.word	0xfcef	; ????
     bde:	e9 71       	andi	r30, 0x19	; 25
     be0:	65 d2       	rcall	.+1226   	; 0x10ac <TwoWire::write(int) [clone .constprop.17]>
     be2:	92 30       	cpi	r25, 0x02	; 2
     be4:	09 13       	cpse	r16, r25
     be6:	2d 49       	sbci	r18, 0x9D	; 157
     be8:	a6 38       	cpi	r26, 0x86	; 134
     bea:	06 ff       	sbrs	r16, 6
     bec:	15 ef       	ldi	r17, 0xF5	; 245
     bee:	fc 29       	or	r31, r12
     bf0:	51 16       	cp	r5, r17
     bf2:	e5 50       	subi	r30, 0x05	; 5
     bf4:	98 84       	ldd	r9, Y+8	; 0x08
     bf6:	49 98       	cbi	0x09, 1	; 9
     bf8:	64 d2       	rcall	.+1224   	; 0x10c2 <TwoWire::write(unsigned char const*, unsigned int)+0xe>
     bfa:	12 27       	eor	r17, r18
     bfc:	61 34       	cpi	r22, 0x41	; 65
     bfe:	44 00       	.word	0x0044	; ????
     c00:	00 00       	nop
     c02:	00 04       	cpc	r0, r0
     c04:	ff ff       	.word	0xffff	; ????
	...

00000c08 <__ctors_start>:
__ctors_start():
     c08:	78 19       	sub	r23, r8

00000c0a <__ctors_end>:
__ctors_end():
../../../../crt1/gcrt1.S:230
     c0a:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
     c0c:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
     c0e:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:234
     c10:	cd bf       	out	0x3d, r28	; 61
../../../../crt1/gcrt1.S:236
     c12:	df e3       	ldi	r29, 0x3F	; 63
../../../../crt1/gcrt1.S:237
     c14:	de bf       	out	0x3e, r29	; 62

00000c16 <_initThreeStuff()>:
_Z15_initThreeStuffv():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/main.cpp:104

  /* Minimum: Reset if we wound up here through malfunction - this relies on user clearing the  *
   * register on startup, which is rarely done in Arduino land.                                 */
  void __attribute__((weak)) init_reset_flags() ;
  void __attribute__((weak)) init_reset_flags() {
    uint8_t flags = RSTCTRL.RSTFR;
     c16:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <u8g2_cb_r0+0x7f36ad>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/main.cpp:105
    RSTCTRL.RSTFR = flags;
     c1a:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <u8g2_cb_r0+0x7f36ad>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/main.cpp:106
    if (flags == 0) {
     c1e:	81 11       	cpse	r24, r1
     c20:	05 c0       	rjmp	.+10     	; 0xc2c <_initThreeStuff()+0x16>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/main.cpp:107
      _PROTECTED_WRITE(RSTCTRL.SWRR, 1);
     c22:	98 ed       	ldi	r25, 0xD8	; 216
     c24:	21 e0       	ldi	r18, 0x01	; 1
     c26:	94 bf       	out	0x34, r25	; 52
     c28:	20 93 41 00 	sts	0x0041, r18	; 0x800041 <u8g2_cb_r0+0x7f36ae>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/main.cpp:109
    }
    GPIOR0 = flags;
     c2c:	8c bb       	out	0x1c, r24	; 28

00000c2e <__do_clear_bss>:
__do_clear_bss():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     c2e:	2d e3       	ldi	r18, 0x3D	; 61
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     c30:	ac e0       	ldi	r26, 0x0C	; 12
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     c32:	b8 e3       	ldi	r27, 0x38	; 56
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     c34:	01 c0       	rjmp	.+2      	; 0xc38 <.do_clear_bss_start>

00000c36 <.do_clear_bss_loop>:
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     c36:	1d 92       	st	X+, r1

00000c38 <.do_clear_bss_start>:
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     c38:	aa 3a       	cpi	r26, 0xAA	; 170
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     c3a:	b2 07       	cpc	r27, r18
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <.do_clear_bss_loop>

00000c3e <__do_copy_data>:
__do_copy_data():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     c3e:	18 e3       	ldi	r17, 0x38	; 56
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     c40:	a0 e0       	ldi	r26, 0x00	; 0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     c42:	b8 e3       	ldi	r27, 0x38	; 56
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     c44:	ec ee       	ldi	r30, 0xEC	; 236
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     c46:	f9 e4       	ldi	r31, 0x49	; 73
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     c48:	02 c0       	rjmp	.+4      	; 0xc4e <__do_copy_data+0x10>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     c4a:	05 90       	lpm	r0, Z+
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     c4c:	0d 92       	st	X+, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     c4e:	ac 30       	cpi	r26, 0x0C	; 12
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     c50:	b1 07       	cpc	r27, r17
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     c52:	d9 f7       	brne	.-10     	; 0xc4a <__do_copy_data+0xc>

00000c54 <__do_global_ctors>:
__do_global_ctors():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     c54:	16 e0       	ldi	r17, 0x06	; 6
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     c56:	c5 e0       	ldi	r28, 0x05	; 5
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     c58:	d6 e0       	ldi	r29, 0x06	; 6
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     c5a:	04 c0       	rjmp	.+8      	; 0xc64 <__do_global_ctors+0x10>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     c5c:	21 97       	sbiw	r28, 0x01	; 1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     c5e:	fe 01       	movw	r30, r28
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     c60:	0e 94 17 21 	call	0x422e	; 0x422e <__tablejump2__>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     c64:	c4 30       	cpi	r28, 0x04	; 4
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     c66:	d1 07       	cpc	r29, r17
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     c68:	c9 f7       	brne	.-14     	; 0xc5c <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
     c6a:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <main>
../../../../crt1/gcrt1.S:315
     c6e:	0c 94 2f 23 	jmp	0x465e	; 0x465e <_exit>

00000c72 <__bad_interrupt>:
__vector_30():
../../../../crt1/gcrt1.S:209
     c72:	c6 c9       	rjmp	.-3188   	; 0x0 <__vectors>

00000c74 <u8x8_ascii_next>:
u8x8_ascii_next():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_8x8.c:292
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
     c74:	66 23       	and	r22, r22
     c76:	29 f0       	breq	.+10     	; 0xc82 <u8x8_ascii_next+0xe>
     c78:	6a 30       	cpi	r22, 0x0A	; 10
     c7a:	19 f0       	breq	.+6      	; 0xc82 <u8x8_ascii_next+0xe>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_8x8.c:294
    return 0x0ffff;	/* end of string detected*/
  return b;
     c7c:	86 2f       	mov	r24, r22
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	08 95       	ret
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_8x8.c:293
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
    return 0x0ffff;	/* end of string detected*/
     c82:	8f ef       	ldi	r24, 0xFF	; 255
     c84:	9f ef       	ldi	r25, 0xFF	; 255
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_8x8.c:295
  return b;
}
     c86:	08 95       	ret

00000c88 <u8g2_ll_hvline_vertical_top_lsb>:
u8g2_ll_hvline_vertical_top_lsb():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:73
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
     c88:	af 92       	push	r10
     c8a:	bf 92       	push	r11
     c8c:	cf 92       	push	r12
     c8e:	df 92       	push	r13
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	ec 01       	movw	r28, r24
     c9c:	da 01       	movw	r26, r20
     c9e:	79 01       	movw	r14, r18
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:89
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
     ca0:	94 2f       	mov	r25, r20
     ca2:	97 70       	andi	r25, 0x07	; 7
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:91
  mask = 1;
  mask <<= bit_pos;
     ca4:	e1 e0       	ldi	r30, 0x01	; 1
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	9f 01       	movw	r18, r30
     caa:	09 2e       	mov	r0, r25
     cac:	01 c0       	rjmp	.+2      	; 0xcb0 <u8g2_ll_hvline_vertical_top_lsb+0x28>
     cae:	22 0f       	add	r18, r18
     cb0:	0a 94       	dec	r0
     cb2:	ea f7       	brpl	.-6      	; 0xcae <u8g2_ll_hvline_vertical_top_lsb+0x26>
     cb4:	52 2f       	mov	r21, r18
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:95

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
     cb6:	6e 01       	movw	r12, r28
     cb8:	8a e8       	ldi	r24, 0x8A	; 138
     cba:	c8 0e       	add	r12, r24
     cbc:	d1 1c       	adc	r13, r1
     cbe:	f6 01       	movw	r30, r12
     cc0:	80 81       	ld	r24, Z
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:93
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
     cc2:	40 e0       	ldi	r20, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:95
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
     cc4:	82 30       	cpi	r24, 0x02	; 2
     cc6:	18 f4       	brcc	.+6      	; 0xcce <u8g2_ll_hvline_vertical_top_lsb+0x46>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:96
    or_mask  = mask;
     cc8:	42 2f       	mov	r20, r18
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:97
  if ( u8g2->draw_color != 1 )
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	49 f1       	breq	.+82     	; 0xd20 <u8g2_ll_hvline_vertical_top_lsb+0x98>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:102
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
     cce:	5d 01       	movw	r10, r26
     cd0:	f8 ef       	ldi	r31, 0xF8	; 248
     cd2:	af 22       	and	r10, r31
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:104
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
     cd4:	e8 ad       	ldd	r30, Y+56	; 0x38
     cd6:	f9 ad       	ldd	r31, Y+57	; 0x39
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:103
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
     cd8:	28 81       	ld	r18, Y
     cda:	39 81       	ldd	r19, Y+1	; 0x01
     cdc:	d9 01       	movw	r26, r18
     cde:	50 96       	adiw	r26, 0x10	; 16
     ce0:	8c 91       	ld	r24, X
     ce2:	8a 9d       	mul	r24, r10
     ce4:	90 01       	movw	r18, r0
     ce6:	8b 9d       	mul	r24, r11
     ce8:	30 0d       	add	r19, r0
     cea:	11 24       	eor	r1, r1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:106
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
     cec:	62 0f       	add	r22, r18
     cee:	73 1f       	adc	r23, r19
     cf0:	df 01       	movw	r26, r30
     cf2:	a6 0f       	add	r26, r22
     cf4:	b7 1f       	adc	r27, r23
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:108
  
  if ( dir == 0 )
     cf6:	01 11       	cpse	r16, r1
     cf8:	1a c0       	rjmp	.+52     	; 0xd2e <u8g2_ll_hvline_vertical_top_lsb+0xa6>
     cfa:	ea 0e       	add	r14, r26
     cfc:	fb 1e       	adc	r15, r27
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:115
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
     cfe:	8c 91       	ld	r24, X
     d00:	84 2b       	or	r24, r20
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:116
	*ptr ^= xor_mask;
     d02:	85 27       	eor	r24, r21
     d04:	8d 93       	st	X+, r24
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:119
	ptr++;
	len--;
      } while( len != 0 );
     d06:	ae 15       	cp	r26, r14
     d08:	bf 05       	cpc	r27, r15
     d0a:	c9 f7       	brne	.-14     	; 0xcfe <u8g2_ll_hvline_vertical_top_lsb+0x76>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:152
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
     d0c:	df 91       	pop	r29
     d0e:	cf 91       	pop	r28
     d10:	0f 91       	pop	r16
     d12:	ff 90       	pop	r15
     d14:	ef 90       	pop	r14
     d16:	df 90       	pop	r13
     d18:	cf 90       	pop	r12
     d1a:	bf 90       	pop	r11
     d1c:	af 90       	pop	r10
     d1e:	08 95       	ret
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:94
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
     d20:	50 e0       	ldi	r21, 0x00	; 0
     d22:	d5 cf       	rjmp	.-86     	; 0xcce <u8g2_ll_hvline_vertical_top_lsb+0x46>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:147
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
     d24:	44 0f       	add	r20, r20
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:148
	xor_mask <<= 1;
     d26:	55 0f       	add	r21, r21
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:150
      }
    } while( len != 0 );
     d28:	e1 14       	cp	r14, r1
     d2a:	f1 04       	cpc	r15, r1
     d2c:	79 f3       	breq	.-34     	; 0xd0c <u8g2_ll_hvline_vertical_top_lsb+0x84>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:128
    do
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
     d2e:	3c 91       	ld	r19, X
     d30:	34 2b       	or	r19, r20
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:129
      *ptr ^= xor_mask;
     d32:	35 27       	eor	r19, r21
     d34:	3c 93       	st	X, r19
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:131
      
      bit_pos++;
     d36:	9f 5f       	subi	r25, 0xFF	; 255
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:132
      bit_pos &= 7;
     d38:	97 70       	andi	r25, 0x07	; 7
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:134

      len--;
     d3a:	e1 e0       	ldi	r30, 0x01	; 1
     d3c:	ee 1a       	sub	r14, r30
     d3e:	f1 08       	sbc	r15, r1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:136

      if ( bit_pos == 0 )
     d40:	91 11       	cpse	r25, r1
     d42:	f0 cf       	rjmp	.-32     	; 0xd24 <u8g2_ll_hvline_vertical_top_lsb+0x9c>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:138
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
     d44:	2c ad       	ldd	r18, Y+60	; 0x3c
     d46:	3d ad       	ldd	r19, Y+61	; 0x3d
     d48:	a2 0f       	add	r26, r18
     d4a:	b3 1f       	adc	r27, r19
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:140
		
	if ( u8g2->draw_color <= 1 )
     d4c:	f6 01       	movw	r30, r12
     d4e:	80 81       	ld	r24, Z
     d50:	82 30       	cpi	r24, 0x02	; 2
     d52:	28 f4       	brcc	.+10     	; 0xd5e <u8g2_ll_hvline_vertical_top_lsb+0xd6>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:142
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	09 f0       	breq	.+2      	; 0xd5a <u8g2_ll_hvline_vertical_top_lsb+0xd2>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:143
	  xor_mask = 1;
     d58:	51 e0       	ldi	r21, 0x01	; 1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:141
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
     d5a:	41 e0       	ldi	r20, 0x01	; 1
     d5c:	e5 cf       	rjmp	.-54     	; 0xd28 <u8g2_ll_hvline_vertical_top_lsb+0xa0>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_ll_hvline.c:143
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
     d5e:	51 e0       	ldi	r21, 0x01	; 1
     d60:	e3 cf       	rjmp	.-58     	; 0xd28 <u8g2_ll_hvline_vertical_top_lsb+0xa0>

00000d62 <u8x8_dummy_cb>:
u8x8_dummy_cb():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_setup.c:44
/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
}
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	08 95       	ret

00000d66 <u8g2_font_calc_vref_font>:
u8g2_font_calc_vref_font():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1230
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	08 95       	ret

00000d6c <u8g2_SetDrawColor.constprop.43>:
u8g2_SetDrawColor.constprop.43():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:251
  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	80 93 9d 3d 	sts	0x3D9D, r24	; 0x803d9d <u8g2+0x8e>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:254
  if ( color >= 3 )
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
}
     d72:	08 95       	ret

00000d74 <TwoWire::endTransmission() [clone .constprop.18]>:
_ZN7TwoWire15endTransmissionEv.constprop.18():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:310
  #else                                                   // Separate tx/rx Buffers
    txHead   = &(_data->_bytesToWrite);
    txBuffer =   _data->_txBuffer;
  #endif

  TWI_t *module = _data->_module;     // Compiler treats the pointer to the TWI module as volatile and
     d74:	e0 91 a3 38 	lds	r30, 0x38A3	; 0x8038a3 <Wire+0x8>
     d78:	f0 91 a4 38 	lds	r31, 0x38A4	; 0x8038a4 <Wire+0x9>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:321
  #if defined (TWI_TIMEOUT_ENABLE)
    uint16_t timeout = 0;
  #endif


    if (((module->MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_UNKNOWN_gc) || // If the bus was not initialized
     d7c:	85 81       	ldd	r24, Z+5	; 0x05
     d7e:	83 70       	andi	r24, 0x03	; 3
     d80:	09 f4       	brne	.+2      	; 0xd84 <TwoWire::endTransmission() [clone .constprop.18]+0x10>
     d82:	42 c0       	rjmp	.+132    	; 0xe08 <TwoWire::endTransmission() [clone .constprop.18]+0x94>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:322
      ((module->MCTRLA & TWI_ENABLE_bm) == false)) {  // Or is disabled,
     d84:	83 81       	ldd	r24, Z+3	; 0x03
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:321
  #if defined (TWI_TIMEOUT_ENABLE)
    uint16_t timeout = 0;
  #endif


    if (((module->MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_UNKNOWN_gc) || // If the bus was not initialized
     d86:	80 ff       	sbrs	r24, 0
     d88:	3f c0       	rjmp	.+126    	; 0xe08 <TwoWire::endTransmission() [clone .constprop.18]+0x94>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:350
        TWI_SET_ERROR(TWI_ERR_BUS_ARB);         // set error flag
        break;                                  // leave TX loop
    }

    if (currentSM == TWI_BUSSTATE_IDLE_gc) {                      // Bus has not sent START yet and is not BUSY
        module->MADDR = ADD_WRITE_BIT(_data->_clientAddress);
     d8a:	50 91 a7 38 	lds	r21, 0x38A7	; 0x8038a7 <Wire+0xc>
     d8e:	5e 7f       	andi	r21, 0xFE	; 254
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:317
  TWI_INIT_ERROR;
  uint8_t currentSM;
  uint8_t currentStatus;
  twi_buffer_index_t dataWritten = 0;
  #if defined (TWI_TIMEOUT_ENABLE)
    uint16_t timeout = 0;
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:315
  TWI_t *module = _data->_module;     // Compiler treats the pointer to the TWI module as volatile and
                                      // creates bloat-y code, this fixes it
  TWI_INIT_ERROR;
  uint8_t currentSM;
  uint8_t currentStatus;
  twi_buffer_index_t dataWritten = 0;
     d94:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:327
      ((module->MCTRLA & TWI_ENABLE_bm) == false)) {  // Or is disabled,
      return TWI_ERR_UNINIT;                          // return
    }

  while (true) {
    currentStatus = module->MSTATUS;
     d96:	45 81       	ldd	r20, Z+5	; 0x05
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:328
    currentSM = currentStatus & TWI_BUSSTATE_gm;  // get the current mode of the state machine
     d98:	84 2f       	mov	r24, r20
     d9a:	83 70       	andi	r24, 0x03	; 3
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:331

    #if defined(TWI_TIMEOUT_ENABLE)
      if (++timeout > (F_CPU/1000)) {
     d9c:	2f 5f       	subi	r18, 0xFF	; 255
     d9e:	3f 4f       	sbci	r19, 0xFF	; 255
     da0:	29 3e       	cpi	r18, 0xE9	; 233
     da2:	63 e0       	ldi	r22, 0x03	; 3
     da4:	36 07       	cpc	r19, r22
     da6:	40 f0       	brcs	.+16     	; 0xdb8 <TwoWire::endTransmission() [clone .constprop.18]+0x44>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:332
        if        (currentSM == TWI_BUSSTATE_OWNER_gc) {
     da8:	82 30       	cpi	r24, 0x02	; 2
     daa:	41 f1       	breq	.+80     	; 0xdfc <TwoWire::endTransmission() [clone .constprop.18]+0x88>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:334
          TWI_SET_ERROR(TWI_ERR_TIMEOUT);
        } else if (currentSM == TWI_BUSSTATE_IDLE_gc) {
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	41 f1       	breq	.+80     	; 0xe00 <TwoWire::endTransmission() [clone .constprop.18]+0x8c>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:337
          TWI_SET_ERROR(TWI_ERR_PULLUP);
        } else {
          TWI_SET_ERROR(TWI_ERR_UNDEFINED);
     db0:	84 e0       	ldi	r24, 0x04	; 4
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:377
    }
  }


  if ((send_stop != 0) || (TWI_ERR_SUCCESS != TWI_GET_ERROR)) {
    module->MCTRLB = TWI_MCMD_STOP_gc;                        // Send STOP
     db2:	93 e0       	ldi	r25, 0x03	; 3
     db4:	94 83       	std	Z+4, r25	; 0x04
     db6:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:343
        }
        break;
      }
    #endif

    if   (currentStatus & TWI_ARBLOST_bm) {     // Check for Bus error
     db8:	43 ff       	sbrs	r20, 3
     dba:	04 c0       	rjmp	.+8      	; 0xdc4 <TwoWire::endTransmission() [clone .constprop.18]+0x50>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:344
        module->MSTATUS = TWI_ARBLOST_bm;       // reset error flags
     dbc:	88 e0       	ldi	r24, 0x08	; 8
     dbe:	85 83       	std	Z+5, r24	; 0x05
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:345
        TWI_SET_ERROR(TWI_ERR_BUS_ARB);         // set error flag
     dc0:	82 e1       	ldi	r24, 0x12	; 18
     dc2:	f7 cf       	rjmp	.-18     	; 0xdb2 <TwoWire::endTransmission() [clone .constprop.18]+0x3e>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:349
        break;                                  // leave TX loop
    }

    if (currentSM == TWI_BUSSTATE_IDLE_gc) {                      // Bus has not sent START yet and is not BUSY
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	21 f4       	brne	.+8      	; 0xdd0 <TwoWire::endTransmission() [clone .constprop.18]+0x5c>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:350
        module->MADDR = ADD_WRITE_BIT(_data->_clientAddress);
     dc8:	57 83       	std	Z+7, r21	; 0x07
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:365
        } else {                                                  // otherwise WRITE was ACKed
          if (dataWritten < (*txHead)) {                          // check if there is data to be written
            module->MDATA = txBuffer[dataWritten];                // Writing to the register to send data
            dataWritten++;                                        // data was Written
            #if defined (TWI_TIMEOUT_ENABLE)
              timeout = 0;                                        // reset timeout
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	e3 cf       	rjmp	.-58     	; 0xd96 <TwoWire::endTransmission() [clone .constprop.18]+0x22>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:354
    if (currentSM == TWI_BUSSTATE_IDLE_gc) {                      // Bus has not sent START yet and is not BUSY
        module->MADDR = ADD_WRITE_BIT(_data->_clientAddress);
        #if defined (TWI_TIMEOUT_ENABLE)
          timeout = 0;                           // reset timeout
        #endif
    } else if (currentSM == TWI_BUSSTATE_OWNER_gc) {              // Address was sent, host is owner
     dd0:	82 30       	cpi	r24, 0x02	; 2
     dd2:	09 f7       	brne	.-62     	; 0xd96 <TwoWire::endTransmission() [clone .constprop.18]+0x22>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:355
      if     (currentStatus & TWI_WIF_bm) {                       // data sent
     dd4:	46 ff       	sbrs	r20, 6
     dd6:	df cf       	rjmp	.-66     	; 0xd96 <TwoWire::endTransmission() [clone .constprop.18]+0x22>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:356
        if   (currentStatus & TWI_RXACK_bm) {                     // AND the RXACK bit is set, last byte has failed
     dd8:	44 ff       	sbrs	r20, 4
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <TwoWire::endTransmission() [clone .constprop.18]+0x70>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:357
          if (dataWritten == 0) TWI_SET_ERROR(TWI_ERR_ACK_ADR);   // if dataWritten is 0, no payload was sent, so address was NACKed
     ddc:	99 23       	and	r25, r25
     dde:	49 f3       	breq	.-46     	; 0xdb2 <TwoWire::endTransmission() [clone .constprop.18]+0x3e>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:358
          else                  TWI_SET_ERROR(TWI_ERR_ACK_DAT);   // else payload was NACKed
     de0:	83 e0       	ldi	r24, 0x03	; 3
     de2:	e7 cf       	rjmp	.-50     	; 0xdb2 <TwoWire::endTransmission() [clone .constprop.18]+0x3e>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:361
          break;                                                  // leave loop
        } else {                                                  // otherwise WRITE was ACKed
          if (dataWritten < (*txHead)) {                          // check if there is data to be written
     de4:	80 91 a8 38 	lds	r24, 0x38A8	; 0x8038a8 <Wire+0xd>
     de8:	98 17       	cp	r25, r24
     dea:	60 f4       	brcc	.+24     	; 0xe04 <TwoWire::endTransmission() [clone .constprop.18]+0x90>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:362
            module->MDATA = txBuffer[dataWritten];                // Writing to the register to send data
     dec:	a9 2f       	mov	r26, r25
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	a0 55       	subi	r26, 0x50	; 80
     df2:	b7 4c       	sbci	r27, 0xC7	; 199
     df4:	8c 91       	ld	r24, X
     df6:	80 87       	std	Z+8, r24	; 0x08
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:363
            dataWritten++;                                        // data was Written
     df8:	9f 5f       	subi	r25, 0xFF	; 255
     dfa:	e7 cf       	rjmp	.-50     	; 0xdca <TwoWire::endTransmission() [clone .constprop.18]+0x56>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:333
    currentSM = currentStatus & TWI_BUSSTATE_gm;  // get the current mode of the state machine

    #if defined(TWI_TIMEOUT_ENABLE)
      if (++timeout > (F_CPU/1000)) {
        if        (currentSM == TWI_BUSSTATE_OWNER_gc) {
          TWI_SET_ERROR(TWI_ERR_TIMEOUT);
     dfc:	85 e0       	ldi	r24, 0x05	; 5
     dfe:	d9 cf       	rjmp	.-78     	; 0xdb2 <TwoWire::endTransmission() [clone .constprop.18]+0x3e>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:335
        } else if (currentSM == TWI_BUSSTATE_IDLE_gc) {
          TWI_SET_ERROR(TWI_ERR_PULLUP);
     e00:	81 e1       	ldi	r24, 0x11	; 17
     e02:	d7 cf       	rjmp	.-82     	; 0xdb2 <TwoWire::endTransmission() [clone .constprop.18]+0x3e>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:312
    txBuffer =   _data->_txBuffer;
  #endif

  TWI_t *module = _data->_module;     // Compiler treats the pointer to the TWI module as volatile and
                                      // creates bloat-y code, this fixes it
  TWI_INIT_ERROR;
     e04:	80 e0       	ldi	r24, 0x00	; 0
     e06:	d5 cf       	rjmp	.-86     	; 0xdb2 <TwoWire::endTransmission() [clone .constprop.18]+0x3e>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:323
  #endif


    if (((module->MSTATUS & TWI_BUSSTATE_gm) == TWI_BUSSTATE_UNKNOWN_gc) || // If the bus was not initialized
      ((module->MCTRLA & TWI_ENABLE_bm) == false)) {  // Or is disabled,
      return TWI_ERR_UNINIT;                          // return
     e08:	80 e1       	ldi	r24, 0x10	; 16
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.h:97
    }

    uint8_t endTransmission(bool);
    uint8_t endTransmission(void) {
      return endTransmission(true);
    }
     e0a:	08 95       	ret

00000e0c <TWI_MasterSetBaud.part.3.constprop.9>:
TWI_MasterSetBaud.part.3.constprop.9():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:205
 *
 *@param      struct twiData *_data is a pointer to the structure that holds the Wire variables
 *
 *@return     uint8_t 1 - something went wrong; 0 - new frequency set.
 */
uint8_t TWI_MasterSetBaud(struct twiData *_data, uint32_t frequency) {
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	6b 01       	movw	r12, r22
     e16:	7c 01       	movw	r14, r24
TWI_MasterCalcBaud():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:261
      baud = TWI_BAUD(frequency, 600);  // 300kHz will be off at 10MHz. Trade-off between size and accuracy
    }
  #else
    if (frequency >= 600000) {          // assuming 1.5kOhm
      baud = TWI_BAUD(frequency, 250);
    } else if (frequency >= 400000) {   // assuming 2.2kOhm
     e18:	80 e8       	ldi	r24, 0x80	; 128
     e1a:	c8 16       	cp	r12, r24
     e1c:	8a e1       	ldi	r24, 0x1A	; 26
     e1e:	d8 06       	cpc	r13, r24
     e20:	86 e0       	ldi	r24, 0x06	; 6
     e22:	e8 06       	cpc	r14, r24
     e24:	f1 04       	cpc	r15, r1
     e26:	80 f5       	brcc	.+96     	; 0xe88 <TWI_MasterSetBaud.part.3.constprop.9+0x7c>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:264
      baud = TWI_BAUD(frequency, 400);
    } else {                            // assuming 4.7kOhm
      baud = TWI_BAUD(frequency, 600);
     e28:	60 e2       	ldi	r22, 0x20	; 32
     e2a:	71 ea       	ldi	r23, 0xA1	; 161
     e2c:	87 e0       	ldi	r24, 0x07	; 7
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	a7 01       	movw	r20, r14
     e32:	96 01       	movw	r18, r12
     e34:	0e 94 45 20 	call	0x408a	; 0x408a <__udivmodsi4>
     e38:	25 50       	subi	r18, 0x05	; 5
     e3a:	31 09       	sbc	r19, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:276
    const uint8_t baudlimit = 1;
  #else
    const uint8_t baudlimit = 0;
  #endif

  if (baud < baudlimit) {
     e3c:	37 fd       	sbrc	r19, 7
     e3e:	24 c0       	rjmp	.+72     	; 0xe88 <TWI_MasterSetBaud.part.3.constprop.9+0x7c>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:278
    return baudlimit;
  } else if (baud > 255) {
     e40:	2f 3f       	cpi	r18, 0xFF	; 255
     e42:	31 05       	cpc	r19, r1
     e44:	09 f0       	breq	.+2      	; 0xe48 <TWI_MasterSetBaud.part.3.constprop.9+0x3c>
     e46:	14 f5       	brge	.+68     	; 0xe8c <TWI_MasterSetBaud.part.3.constprop.9+0x80>
TWI_MasterSetBaud.part.3.constprop.9():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:218
      return 1;
    }
  }
  if (_data->_bools._hostEnabled == 1) {                  // Do something only if the host is enabled.
    uint8_t newBaud = TWI_MasterCalcBaud(frequency);      // get the new Baud value
    uint8_t oldBaud = _data->_module->MBAUD;              // load the old Baud value
     e48:	e0 91 a3 38 	lds	r30, 0x38A3	; 0x8038a3 <Wire+0x8>
     e4c:	f0 91 a4 38 	lds	r31, 0x38A4	; 0x8038a4 <Wire+0x9>
     e50:	86 81       	ldd	r24, Z+6	; 0x06
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:219
    if (newBaud != oldBaud) {                             // compare both, in case the code is issuing this before every transmission.
     e52:	82 17       	cp	r24, r18
     e54:	99 f0       	breq	.+38     	; 0xe7c <TWI_MasterSetBaud.part.3.constprop.9+0x70>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:220
      uint8_t restore = _data->_module->MCTRLA;           // Save the old Master state
     e56:	93 81       	ldd	r25, Z+3	; 0x03
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:221
      _data->_module->MCTRLA    = 0;                      // Disable Master
     e58:	13 82       	std	Z+3, r1	; 0x03
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:222
      _data->_module->MBAUD     = newBaud;                // update Baud register
     e5a:	26 83       	std	Z+6, r18	; 0x06
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:223
      if (frequency > 400000) {
     e5c:	81 e8       	ldi	r24, 0x81	; 129
     e5e:	c8 16       	cp	r12, r24
     e60:	8a e1       	ldi	r24, 0x1A	; 26
     e62:	d8 06       	cpc	r13, r24
     e64:	86 e0       	ldi	r24, 0x06	; 6
     e66:	e8 06       	cpc	r14, r24
     e68:	f1 04       	cpc	r15, r1
     e6a:	90 f0       	brcs	.+36     	; 0xe90 <TWI_MasterSetBaud.part.3.constprop.9+0x84>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:224
        _data->_module->CTRLA  |=  TWI_FMPEN_bm;          // Enable FastMode+
     e6c:	80 81       	ld	r24, Z
     e6e:	82 60       	ori	r24, 0x02	; 2
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:226
      } else {
        _data->_module->CTRLA  &= ~TWI_FMPEN_bm;          // Disable FastMode+
     e70:	80 83       	st	Z, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:228
      }
      _data->_module->MCTRLA    = restore;                // restore the old register, thus enabling it again
     e72:	93 83       	std	Z+3, r25	; 0x03
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:229
      if (restore & TWI_ENABLE_bm) {                      // If the TWI was enabled,
     e74:	90 ff       	sbrs	r25, 0
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <TWI_MasterSetBaud.part.3.constprop.9+0x70>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:230
        _data->_module->MSTATUS   = TWI_BUSSTATE_IDLE_gc;   // Force the state machine into IDLE according to the data sheet
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	85 83       	std	Z+5, r24	; 0x05
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:236
      }
    }
    return 0;
  }
  return 1;
}
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	ff 90       	pop	r15
     e80:	ef 90       	pop	r14
     e82:	df 90       	pop	r13
     e84:	cf 90       	pop	r12
     e86:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:277
  #else
    const uint8_t baudlimit = 0;
  #endif

  if (baud < baudlimit) {
    return baudlimit;
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	de cf       	rjmp	.-68     	; 0xe48 <TWI_MasterSetBaud.part.3.constprop.9+0x3c>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:279
  } else if (baud > 255) {
    return 255;
     e8c:	2f ef       	ldi	r18, 0xFF	; 255
     e8e:	dc cf       	rjmp	.-72     	; 0xe48 <TWI_MasterSetBaud.part.3.constprop.9+0x3c>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:226
      _data->_module->MCTRLA    = 0;                      // Disable Master
      _data->_module->MBAUD     = newBaud;                // update Baud register
      if (frequency > 400000) {
        _data->_module->CTRLA  |=  TWI_FMPEN_bm;          // Enable FastMode+
      } else {
        _data->_module->CTRLA  &= ~TWI_FMPEN_bm;          // Disable FastMode+
     e90:	80 81       	ld	r24, Z
     e92:	8d 7f       	andi	r24, 0xFD	; 253
     e94:	ed cf       	rjmp	.-38     	; 0xe70 <TWI_MasterSetBaud.part.3.constprop.9+0x64>

00000e96 <u8x8_byte_SendBytes.constprop.3>:
u8x8_byte_SendBytes.constprop.3():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:44
uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
     e96:	9b 01       	movw	r18, r22
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:46
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
     e98:	dc 01       	movw	r26, r24
     e9a:	18 96       	adiw	r26, 0x08	; 8
     e9c:	ed 91       	ld	r30, X+
     e9e:	fc 91       	ld	r31, X
     ea0:	41 e0       	ldi	r20, 0x01	; 1
     ea2:	67 e1       	ldi	r22, 0x17	; 23
     ea4:	09 94       	ijmp

00000ea6 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/Print.cpp:29
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size) {
     ea6:	af 92       	push	r10
     ea8:	bf 92       	push	r11
     eaa:	cf 92       	push	r12
     eac:	df 92       	push	r13
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	6c 01       	movw	r12, r24
     ebc:	7b 01       	movw	r14, r22
     ebe:	8b 01       	movw	r16, r22
     ec0:	04 0f       	add	r16, r20
     ec2:	15 1f       	adc	r17, r21
     ec4:	eb 01       	movw	r28, r22
     ec6:	5e 01       	movw	r10, r28
     ec8:	ae 18       	sub	r10, r14
     eca:	bf 08       	sbc	r11, r15
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/Print.cpp:31
  size_t n = 0;
  while (size--) {
     ecc:	c0 17       	cp	r28, r16
     ece:	d1 07       	cpc	r29, r17
     ed0:	59 f0       	breq	.+22     	; 0xee8 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/Print.cpp:32
    if (write(*buffer++)) {
     ed2:	69 91       	ld	r22, Y+
     ed4:	d6 01       	movw	r26, r12
     ed6:	ed 91       	ld	r30, X+
     ed8:	fc 91       	ld	r31, X
     eda:	01 90       	ld	r0, Z+
     edc:	f0 81       	ld	r31, Z
     ede:	e0 2d       	mov	r30, r0
     ee0:	c6 01       	movw	r24, r12
     ee2:	09 95       	icall
     ee4:	89 2b       	or	r24, r25
     ee6:	79 f7       	brne	.-34     	; 0xec6 <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/Print.cpp:39
    } else {
      break;
    }
  }
  return n;
}
     ee8:	c5 01       	movw	r24, r10
     eea:	df 91       	pop	r29
     eec:	cf 91       	pop	r28
     eee:	1f 91       	pop	r17
     ef0:	0f 91       	pop	r16
     ef2:	ff 90       	pop	r15
     ef4:	ef 90       	pop	r14
     ef6:	df 90       	pop	r13
     ef8:	cf 90       	pop	r12
     efa:	bf 90       	pop	r11
     efc:	af 90       	pop	r10
     efe:	08 95       	ret

00000f00 <_delayMicroseconds>:
_delayMicroseconds():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:1353
    "1: sbiw %0, 1" "\n\t"            // 2 cycles
    "brne 1b" : "=w" (us) : "0" (us)  // 2 cycles
  );
#endif
  // return = 4 cycles
}
     f00:	08 95       	ret

00000f02 <micros>:
micros():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:508
    #else /* TCA */
      uint8_t ticks;
    #endif
    uint8_t flags;
    /* Save current state and disable interrupts */
    uint8_t oldSREG = SREG;
     f02:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:509
    cli(); /* INTERRUPTS OFF */
     f04:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:514
    #if defined(MILLIS_USE_TIMERA0)
      ticks = TCA0.SPLIT.HCNT;
      flags = TCA0.SPLIT.INTFLAGS;
    #elif defined(MILLIS_USE_TIMERD0)
      TCD0.CTRLE = TCD_SCAPTUREA_bm;
     f06:	88 e0       	ldi	r24, 0x08	; 8
     f08:	80 93 84 0a 	sts	0x0A84, r24	; 0x800a84 <u8g2_cb_r0+0x7f40f1>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:515
      while (!(TCD0.STATUS & TCD_CMDRDY_bm)); // wait for sync - should be only one iteration of this loop
     f0c:	80 91 8e 0a 	lds	r24, 0x0A8E	; 0x800a8e <u8g2_cb_r0+0x7f40fb>
     f10:	81 ff       	sbrs	r24, 1
     f12:	fc cf       	rjmp	.-8      	; 0xf0c <micros+0xa>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:516
      flags = TCD0.INTFLAGS;
     f14:	80 91 8d 0a 	lds	r24, 0x0A8D	; 0x800a8d <u8g2_cb_r0+0x7f40fa>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:517
      ticks = TCD0.CAPTUREA;
     f18:	e0 91 a2 0a 	lds	r30, 0x0AA2	; 0x800aa2 <u8g2_cb_r0+0x7f410f>
     f1c:	f0 91 a3 0a 	lds	r31, 0x0AA3	; 0x800aa3 <u8g2_cb_r0+0x7f4110>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:528
     * ISR has not fired. If we already read a high value of ticks, either we read it just before the overflow,
     * so we shouldn't increment overflows, or interrupts are disabled and micros isn't expected to work so it
     * doesn't matter.
     * Get current number of overflows and timer count */
    #if !((defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1) || defined(MILLIS_USE_TIMERB2) || defined(MILLIS_USE_TIMERB3) || defined(MILLIS_USE_TIMERB4)))
      overflows = timingStruct.timer_overflow_count;
     f20:	20 91 7e 38 	lds	r18, 0x387E	; 0x80387e <timingStruct>
     f24:	30 91 7f 38 	lds	r19, 0x387F	; 0x80387f <timingStruct+0x1>
     f28:	40 91 80 38 	lds	r20, 0x3880	; 0x803880 <timingStruct+0x2>
     f2c:	50 91 81 38 	lds	r21, 0x3881	; 0x803881 <timingStruct+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:533
    #else
      overflows = timingStruct.timer_millis;
    #endif
    /* Turn interrupts back on, assuming they were on when micros was called. */
    SREG = oldSREG; /* INTERRUPTS ON */
     f30:	9f bf       	out	0x3f, r25	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:535
    #if defined(MILLIS_USE_TIMERD0)
      if ((flags & TCD_OVF_bm) && (ticks < 0x07)) {
     f32:	80 ff       	sbrs	r24, 0
     f34:	07 c0       	rjmp	.+14     	; 0xf44 <micros+0x42>
     f36:	e7 30       	cpi	r30, 0x07	; 7
     f38:	f1 05       	cpc	r31, r1
     f3a:	20 f4       	brcc	.+8      	; 0xf44 <micros+0x42>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:545
      if ((flags & TCB_CAPT_bm) && !(ticks & 0xFF00)) {
    #endif
    #if ((defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1) || defined(MILLIS_USE_TIMERB2) || defined(MILLIS_USE_TIMERB3) || defined(MILLIS_USE_TIMERB4)) && !(F_CPU > 2000000UL))
      overflows +=2;
    #else
      overflows++;
     f3c:	2f 5f       	subi	r18, 0xFF	; 255
     f3e:	3f 4f       	sbci	r19, 0xFF	; 255
     f40:	4f 4f       	sbci	r20, 0xFF	; 255
     f42:	5f 4f       	sbci	r21, 0xFF	; 255
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:558
        // + ticks +(ticks>>1)+(ticks>>3)-(ticks>>5)+(ticks>>8))
        // speed optimization via doing math with smaller datatypes, since we know high byte is 1 or 0.
        microseconds =   overflows * (TIME_TRACKING_CYCLES_PER_OVF / 20) + ticks; // ticks value corrected above.
      #else
        microseconds = ((overflows * (TIME_TRACKING_CYCLES_PER_OVF / 16))
                          + (ticks * (TIME_TRACKING_CYCLES_PER_OVF / 16 / TIME_TRACKING_TIMER_PERIOD)));
     f44:	ae ef       	ldi	r26, 0xFE	; 254
     f46:	b1 e0       	ldi	r27, 0x01	; 1
     f48:	0e 94 65 1f 	call	0x3eca	; 0x3eca <__muluhisi3>
     f4c:	6e 0f       	add	r22, r30
     f4e:	7f 1f       	adc	r23, r31
     f50:	81 1d       	adc	r24, r1
     f52:	91 1d       	adc	r25, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:557
        ticks = ticks + ticks_l + ((ticks_l >> 2) - (ticks_l >> 4) + (ticks_l >> 7));
        // + ticks +(ticks>>1)+(ticks>>3)-(ticks>>5)+(ticks>>8))
        // speed optimization via doing math with smaller datatypes, since we know high byte is 1 or 0.
        microseconds =   overflows * (TIME_TRACKING_CYCLES_PER_OVF / 20) + ticks; // ticks value corrected above.
      #else
        microseconds = ((overflows * (TIME_TRACKING_CYCLES_PER_OVF / 16))
     f54:	22 e0       	ldi	r18, 0x02	; 2
     f56:	66 0f       	add	r22, r22
     f58:	77 1f       	adc	r23, r23
     f5a:	88 1f       	adc	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	2a 95       	dec	r18
     f60:	d1 f7       	brne	.-12     	; 0xf56 <micros+0x54>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:893
        microseconds = ((overflows * millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF))
                      + (ticks * (millisClockCyclesToMicroseconds(TIME_TRACKING_CYCLES_PER_OVF) / TIME_TRACKING_TIMER_PERIOD)));
      #endif
    #endif // end of timer-specific part of micros calculations
    return microseconds;
  }
     f62:	08 95       	ret

00000f64 <delay>:
delay():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:961
        _delay_ms(1);
      }
    }
  }
#elif (PROGMEM_SIZE >= 16384 && !defined(MILLIS_USE_TIMERRTC))
  void delay(uint32_t ms) { /* Interrupts will not prolong this less flash-efficient delay */
     f64:	cf 92       	push	r12
     f66:	df 92       	push	r13
     f68:	ef 92       	push	r14
     f6a:	ff 92       	push	r15
     f6c:	cf 93       	push	r28
     f6e:	df 93       	push	r29
     f70:	6b 01       	movw	r12, r22
     f72:	7c 01       	movw	r14, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:962
    uint16_t start = (uint16_t) micros();
     f74:	c6 df       	rcall	.-116    	; 0xf02 <micros>
     f76:	eb 01       	movw	r28, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:963
    while (ms > 0) {
     f78:	c1 14       	cp	r12, r1
     f7a:	d1 04       	cpc	r13, r1
     f7c:	e1 04       	cpc	r14, r1
     f7e:	f1 04       	cpc	r15, r1
     f80:	41 f4       	brne	.+16     	; 0xf92 <delay+0x2e>
     f82:	12 c0       	rjmp	.+36     	; 0xfa8 <delay+0x44>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:965
      while (((uint16_t) micros() - start) >= 1000 && ms) {
        ms-- ;
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	c8 1a       	sub	r12, r24
     f88:	d1 08       	sbc	r13, r1
     f8a:	e1 08       	sbc	r14, r1
     f8c:	f1 08       	sbc	r15, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:966
        start += 1000;
     f8e:	c8 51       	subi	r28, 0x18	; 24
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:964
  }
#elif (PROGMEM_SIZE >= 16384 && !defined(MILLIS_USE_TIMERRTC))
  void delay(uint32_t ms) { /* Interrupts will not prolong this less flash-efficient delay */
    uint16_t start = (uint16_t) micros();
    while (ms > 0) {
      while (((uint16_t) micros() - start) >= 1000 && ms) {
     f90:	dc 4f       	sbci	r29, 0xFC	; 252
     f92:	b7 df       	rcall	.-146    	; 0xf02 <micros>
     f94:	6c 1b       	sub	r22, r28
     f96:	7d 0b       	sbc	r23, r29
     f98:	68 3e       	cpi	r22, 0xE8	; 232
     f9a:	73 40       	sbci	r23, 0x03	; 3
     f9c:	68 f3       	brcs	.-38     	; 0xf78 <delay+0x14>
     f9e:	c1 14       	cp	r12, r1
     fa0:	d1 04       	cpc	r13, r1
     fa2:	e1 04       	cpc	r14, r1
     fa4:	f1 04       	cpc	r15, r1
     fa6:	71 f7       	brne	.-36     	; 0xf84 <delay+0x20>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:969
        ms-- ;
        start += 1000;
      }
    }
  }
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	ff 90       	pop	r15
     fae:	ef 90       	pop	r14
     fb0:	df 90       	pop	r13
     fb2:	cf 90       	pop	r12
     fb4:	08 95       	ret

00000fb6 <detachInterrupt.part.1>:
detachInterrupt.part.1():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:288
  }
#endif

  void detachInterrupt(uint8_t pin) {
    /* Get bit position and check pin validity */
    uint8_t bitpos = digitalPinToBitPosition(pin);
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	fc 01       	movw	r30, r24
     fba:	ef 5f       	subi	r30, 0xFF	; 255
     fbc:	f6 43       	sbci	r31, 0x36	; 54
     fbe:	20 81       	ld	r18, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:289
    if (bitpos == NOT_A_PIN) {
     fc0:	2f 3f       	cpi	r18, 0xFF	; 255
     fc2:	69 f1       	breq	.+90     	; 0x101e <detachInterrupt.part.1+0x68>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:292
      return;
    }
    uint8_t port = digitalPinToPort(pin);
     fc4:	8d 5e       	subi	r24, 0xED	; 237
     fc6:	96 43       	sbci	r25, 0x36	; 54
     fc8:	fc 01       	movw	r30, r24
     fca:	80 81       	ld	r24, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:293
    uint8_t p = (port << 5) + bitpos;
     fcc:	e8 2f       	mov	r30, r24
     fce:	e2 95       	swap	r30
     fd0:	ee 0f       	add	r30, r30
     fd2:	e0 7e       	andi	r30, 0xE0	; 224
     fd4:	e2 0f       	add	r30, r18
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:294
    *(((volatile uint8_t*) &PORTA_PIN0CTRL) + p) &= 0xF1; // int off....
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	e0 5f       	subi	r30, 0xF0	; 240
     fda:	fb 4f       	sbci	r31, 0xFB	; 251
     fdc:	90 81       	ld	r25, Z
     fde:	91 7f       	andi	r25, 0xF1	; 241
     fe0:	90 83       	st	Z, r25
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:295
    *((volatile uint8_t*) ((uint16_t)((port << 4) + 3)))  = (1 << bitpos);// flag clear
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	fc 01       	movw	r30, r24
     fe6:	34 e0       	ldi	r19, 0x04	; 4
     fe8:	ee 0f       	add	r30, r30
     fea:	ff 1f       	adc	r31, r31
     fec:	3a 95       	dec	r19
     fee:	e1 f7       	brne	.-8      	; 0xfe8 <detachInterrupt.part.1+0x32>
     ff0:	42 2f       	mov	r20, r18
     ff2:	50 e0       	ldi	r21, 0x00	; 0
     ff4:	61 e0       	ldi	r22, 0x01	; 1
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	01 c0       	rjmp	.+2      	; 0xffc <detachInterrupt.part.1+0x46>
     ffa:	66 0f       	add	r22, r22
     ffc:	2a 95       	dec	r18
     ffe:	ea f7       	brpl	.-6      	; 0xffa <detachInterrupt.part.1+0x44>
    1000:	63 83       	std	Z+3, r22	; 0x03
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:296
    intFunc[port][bitpos] = 0; // clear pointer
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	fc 01       	movw	r30, r24
    1008:	e0 50       	subi	r30, 0x00	; 0
    100a:	f8 4c       	sbci	r31, 0xC8	; 200
    100c:	44 0f       	add	r20, r20
    100e:	55 1f       	adc	r21, r21
    1010:	01 90       	ld	r0, Z+
    1012:	f0 81       	ld	r31, Z
    1014:	e0 2d       	mov	r30, r0
    1016:	e4 0f       	add	r30, r20
    1018:	f5 1f       	adc	r31, r21
    101a:	10 82       	st	Z, r1
    101c:	11 82       	std	Z+1, r1	; 0x01
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:297
  }
    101e:	08 95       	ret

00001020 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:139
    _data->_module->SCTRLA  = 0x00;
    _data->_module->MCTRLA  = temp_MCTRLA;
    _data->_module->MSTATUS = 0x01;  // force TWI state machine into idle state
    _data->_module->SCTRLA  = temp_SCTRLA;
  #else
  _data->_module->MCTRLB |= TWI_FLUSH_bm;
    1020:	dc 01       	movw	r26, r24
    1022:	18 96       	adiw	r26, 0x08	; 8
    1024:	ed 91       	ld	r30, X+
    1026:	fc 91       	ld	r31, X
    1028:	84 81       	ldd	r24, Z+4	; 0x04
    102a:	88 60       	ori	r24, 0x08	; 8
    102c:	84 83       	std	Z+4, r24	; 0x04
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:748
 *@return     void
 */
void TwoWire::flush(void) {
  /* Turn off and on TWI module */
  TWI_Flush(&vars);
}
    102e:	08 95       	ret

00001030 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:726
      rxTail   = &(vars._bytesReadWritten);
      rxBuffer =   vars._trBuffer;
    #else                                        // Separate tx/rx Buffers
      rxHead   = &(vars._bytesToRead);
      rxTail   = &(vars._bytesRead);
      rxBuffer =   vars._rxBuffer;
    1030:	9c 01       	movw	r18, r24
    1032:	2b 5c       	subi	r18, 0xCB	; 203
    1034:	3f 4f       	sbci	r19, 0xFF	; 255
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:730
    #endif
  }

  if ((*rxTail) < (*rxHead)) {   // if there are bytes to read
    1036:	dc 01       	movw	r26, r24
    1038:	1f 96       	adiw	r26, 0x0f	; 15
    103a:	ec 91       	ld	r30, X
    103c:	1f 97       	sbiw	r26, 0x0f	; 15
    103e:	1e 96       	adiw	r26, 0x0e	; 14
    1040:	8c 91       	ld	r24, X
    1042:	e8 17       	cp	r30, r24
    1044:	30 f4       	brcc	.+12     	; 0x1052 <TwoWire::peek()+0x22>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:731
    return rxBuffer[(*rxTail)];
    1046:	e2 0f       	add	r30, r18
    1048:	f3 2f       	mov	r31, r19
    104a:	f1 1d       	adc	r31, r1
    104c:	80 81       	ld	r24, Z
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:733
  } else {      // No bytes to read
    return -1;
    1052:	8f ef       	ldi	r24, 0xFF	; 255
    1054:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:735
  }
}
    1056:	08 95       	ret

00001058 <TwoWire::read()>:
_ZN7TwoWire4readEv():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:635
 *@param      void
 *
 *@return     int
 *@retval     byte in the buffer or -1 if buffer is empty
 */
int TwoWire::read(void) {
    1058:	fc 01       	movw	r30, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:653
      rxTail   = &(vars._bytesReadWritten);
      rxBuffer =   vars._trBuffer;
    #else                                        // Separate tx/rx Buffers
      rxHead   = &(vars._bytesToRead);
      rxTail   = &(vars._bytesRead);
      rxBuffer =   vars._rxBuffer;
    105a:	dc 01       	movw	r26, r24
    105c:	d5 96       	adiw	r26, 0x35	; 53
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:658
    #endif
  }


  if ((*rxTail) < (*rxHead)) {   // if there are bytes to read
    105e:	97 85       	ldd	r25, Z+15	; 0x0f
    1060:	86 85       	ldd	r24, Z+14	; 0x0e
    1062:	98 17       	cp	r25, r24
    1064:	40 f4       	brcc	.+16     	; 0x1076 <TwoWire::read()+0x1e>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:659
    uint8_t c = rxBuffer[(*rxTail)];
    1066:	a9 0f       	add	r26, r25
    1068:	b1 1d       	adc	r27, r1
    106a:	2c 91       	ld	r18, X
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:660
    (*rxTail)++;
    106c:	9f 5f       	subi	r25, 0xFF	; 255
    106e:	97 87       	std	Z+15, r25	; 0x0f
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:661
    return c;
    1070:	82 2f       	mov	r24, r18
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:663
  } else {                      // No bytes to read. At this point, rxTail moved up to
    return -1;                  // rxHead. To reset both to 0, a MasterRead or AddrWrite has to be called
    1076:	8f ef       	ldi	r24, 0xFF	; 255
    1078:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:665
  }
}
    107a:	08 95       	ret

0000107c <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:603
 *@param      void
 *
 *@return     int
 *@retval     amount of bytes available to read from the host buffer
 */
int TwoWire::available(void) {
    107c:	fc 01       	movw	r30, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:614
  #endif
  {
    #if defined(TWI_MERGE_BUFFERS)                // Same Buffers for tx/rx
      rxHead  = vars._bytesToReadWrite - vars._bytesReadWritten;
    #else                                         // Separate tx/rx Buffers
      rxHead  = vars._bytesToRead - vars._bytesRead;
    107e:	86 85       	ldd	r24, Z+14	; 0x0e
    1080:	97 85       	ldd	r25, Z+15	; 0x0f
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:618
    #endif
  }
  return rxHead;
}
    1082:	89 1b       	sub	r24, r25
    1084:	99 0b       	sbc	r25, r25
    1086:	08 95       	ret

00001088 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:536
 *
 *
 *@return     uint8_t
 *@retval     1 if successful, 0 if the buffer is full
 */
size_t TwoWire::write(uint8_t data) {
    1088:	fc 01       	movw	r30, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:557
    #endif
  }

  /* Put byte in txBuffer */

  if ((*txHead) < BUFFER_LENGTH) {      // while buffer not full, write to it
    108a:	a5 85       	ldd	r26, Z+13	; 0x0d
    108c:	a0 32       	cpi	r26, 0x20	; 32
    108e:	58 f4       	brcc	.+22     	; 0x10a6 <TwoWire::write(unsigned char)+0x1e>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:558
    txBuffer[(*txHead)] = data;             // Load data into the buffer
    1090:	a8 0f       	add	r26, r24
    1092:	b9 2f       	mov	r27, r25
    1094:	b1 1d       	adc	r27, r1
    1096:	55 96       	adiw	r26, 0x15	; 21
    1098:	6c 93       	st	X, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:559
    (*txHead)++;                            // advancing the head
    109a:	85 85       	ldd	r24, Z+13	; 0x0d
    109c:	8f 5f       	subi	r24, 0xFF	; 255
    109e:	85 87       	std	Z+13, r24	; 0x0d
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:560
    return 1;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:562
  } else {
    return 0;
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:564
  }
}
    10aa:	08 95       	ret

000010ac <TwoWire::write(int) [clone .constprop.17]>:
_ZN7TwoWire5writeEi.constprop.17():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.h:130
    }
    inline size_t write(unsigned int  n) {
      return      write((uint8_t)     n);
    }
    inline size_t write(int           n) {
      return      write((uint8_t)     n);
    10ac:	68 2f       	mov	r22, r24
    10ae:	8b e9       	ldi	r24, 0x9B	; 155
    10b0:	98 e3       	ldi	r25, 0x38	; 56
    10b2:	ea cf       	rjmp	.-44     	; 0x1088 <TwoWire::write(unsigned char)>

000010b4 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:579
 *
 *
 *@return     uint8_t
 *@retval     amount of bytes copied
 */
size_t TwoWire::write(const uint8_t *data, size_t quantity) {
    10b4:	bf 92       	push	r11
    10b6:	cf 92       	push	r12
    10b8:	df 92       	push	r13
    10ba:	ef 92       	push	r14
    10bc:	ff 92       	push	r15
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	7c 01       	movw	r14, r24
    10c8:	6a 01       	movw	r12, r20
    10ca:	b6 2e       	mov	r11, r22
    10cc:	eb 01       	movw	r28, r22
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:581
  twi_buffer_index_t i = 0;
  for (; i < quantity; i++) {
    10ce:	0c 2f       	mov	r16, r28
    10d0:	0b 19       	sub	r16, r11
    10d2:	10 e0       	ldi	r17, 0x00	; 0
    10d4:	0c 15       	cp	r16, r12
    10d6:	1d 05       	cpc	r17, r13
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:582
    if (TwoWire::write(*(data++)) == 0)
    10d8:	28 f4       	brcc	.+10     	; 0x10e4 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
    10da:	69 91       	ld	r22, Y+
    10dc:	c7 01       	movw	r24, r14
    10de:	d4 df       	rcall	.-88     	; 0x1088 <TwoWire::write(unsigned char)>
    10e0:	89 2b       	or	r24, r25
    10e2:	a9 f7       	brne	.-22     	; 0x10ce <TwoWire::write(unsigned char const*, unsigned int)+0x1a>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:587
      break;   // break if buffer full
  }

  return i;
}
    10e4:	c8 01       	movw	r24, r16
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	ff 90       	pop	r15
    10f0:	ef 90       	pop	r14
    10f2:	df 90       	pop	r13
    10f4:	cf 90       	pop	r12
    10f6:	bf 90       	pop	r11
    10f8:	08 95       	ret

000010fa <u8x8_gpio_call>:
u8x8_gpio_call():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_gpio.c:42
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    10fa:	dc 01       	movw	r26, r24
    10fc:	1a 96       	adiw	r26, 0x0a	; 10
    10fe:	ed 91       	ld	r30, X+
    1100:	fc 91       	ld	r31, X
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	09 94       	ijmp

00001108 <u8x8_cad_EndTransfer>:
u8x8_cad_EndTransfer():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:120
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
}

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
    1108:	dc 01       	movw	r26, r24
    110a:	16 96       	adiw	r26, 0x06	; 6
    110c:	ed 91       	ld	r30, X+
    110e:	fc 91       	ld	r31, X
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	69 e1       	ldi	r22, 0x19	; 25
    1118:	09 94       	ijmp

0000111a <u8x8_cad_StartTransfer>:
u8x8_cad_StartTransfer():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:115
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
}

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
    111a:	dc 01       	movw	r26, r24
    111c:	16 96       	adiw	r26, 0x06	; 6
    111e:	ed 91       	ld	r30, X+
    1120:	fc 91       	ld	r31, X
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	40 e0       	ldi	r20, 0x00	; 0
    1128:	68 e1       	ldi	r22, 0x18	; 24
    112a:	09 94       	ijmp

0000112c <u8x8_cad_SendData>:
u8x8_cad_SendData():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:109
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    112c:	9a 01       	movw	r18, r20
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:110
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
    112e:	dc 01       	movw	r26, r24
    1130:	16 96       	adiw	r26, 0x06	; 6
    1132:	ed 91       	ld	r30, X+
    1134:	fc 91       	ld	r31, X
    1136:	46 2f       	mov	r20, r22
    1138:	67 e1       	ldi	r22, 0x17	; 23
    113a:	09 94       	ijmp

0000113c <u8x8_cad_SendSequence>:
u8x8_cad_SendSequence():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:160
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
    113c:	ef 92       	push	r14
    113e:	ff 92       	push	r15
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	1f 92       	push	r1
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	7c 01       	movw	r14, r24
    1150:	8b 01       	movw	r16, r22
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:166
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
    1152:	d8 01       	movw	r26, r16
    1154:	6c 91       	ld	r22, X
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:168
    data++;
    switch( cmd )
    1156:	67 31       	cpi	r22, 0x17	; 23
    1158:	21 f1       	breq	.+72     	; 0x11a2 <u8x8_cad_SendSequence+0x66>
    115a:	50 f4       	brcc	.+20     	; 0x1170 <u8x8_cad_SendSequence+0x34>
    115c:	65 31       	cpi	r22, 0x15	; 21
    115e:	98 f4       	brcc	.+38     	; 0x1186 <u8x8_cad_SendSequence+0x4a>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:194
	  break;
      default:
	return;
    }
  }
}
    1160:	0f 90       	pop	r0
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	ff 90       	pop	r15
    116c:	ef 90       	pop	r14
    116e:	08 95       	ret
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:168

  for(;;)
  {
    cmd = *data;
    data++;
    switch( cmd )
    1170:	6a 31       	cpi	r22, 0x1A	; 26
    1172:	08 f1       	brcs	.+66     	; 0x11b6 <u8x8_cad_SendSequence+0x7a>
    1174:	6e 3f       	cpi	r22, 0xFE	; 254
    1176:	a1 f7       	brne	.-24     	; 0x1160 <u8x8_cad_SendSequence+0x24>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:186
      case U8X8_MSG_CAD_START_TRANSFER:
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
	  break;
      case 0x0fe:
	  v = *data;
    1178:	f8 01       	movw	r30, r16
    117a:	41 81       	ldd	r20, Z+1	; 0x01
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:187
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
    117c:	49 83       	std	Y+1, r20	; 0x01
    117e:	69 e2       	ldi	r22, 0x29	; 41
    1180:	c7 01       	movw	r24, r14
    1182:	bb df       	rcall	.-138    	; 0x10fa <u8x8_gpio_call>
    1184:	0b c0       	rjmp	.+22     	; 0x119c <u8x8_cad_SendSequence+0x60>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:172
    data++;
    switch( cmd )
    {
      case U8X8_MSG_CAD_SEND_CMD:
      case U8X8_MSG_CAD_SEND_ARG:
	  v = *data;
    1186:	f8 01       	movw	r30, r16
    1188:	41 81       	ldd	r20, Z+1	; 0x01
    118a:	49 83       	std	Y+1, r20	; 0x01
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:173
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
    118c:	d7 01       	movw	r26, r14
    118e:	16 96       	adiw	r26, 0x06	; 6
    1190:	ed 91       	ld	r30, X+
    1192:	fc 91       	ld	r31, X
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	c7 01       	movw	r24, r14
    119a:	09 95       	icall
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:188
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
	  break;
      case 0x0fe:
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
    119c:	0e 5f       	subi	r16, 0xFE	; 254
    119e:	1f 4f       	sbci	r17, 0xFF	; 255
    11a0:	d8 cf       	rjmp	.-80     	; 0x1152 <u8x8_cad_SendSequence+0x16>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:177
	  v = *data;
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
	  data++;
	  break;
      case U8X8_MSG_CAD_SEND_DATA:
	  v = *data;
    11a2:	f8 01       	movw	r30, r16
    11a4:	81 81       	ldd	r24, Z+1	; 0x01
    11a6:	89 83       	std	Y+1, r24	; 0x01
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:178
	  u8x8_cad_SendData(u8x8, 1, &v);
    11a8:	ae 01       	movw	r20, r28
    11aa:	4f 5f       	subi	r20, 0xFF	; 255
    11ac:	5f 4f       	sbci	r21, 0xFF	; 255
    11ae:	61 e0       	ldi	r22, 0x01	; 1
    11b0:	c7 01       	movw	r24, r14
    11b2:	bc df       	rcall	.-136    	; 0x112c <u8x8_cad_SendData>
    11b4:	f3 cf       	rjmp	.-26     	; 0x119c <u8x8_cad_SendSequence+0x60>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:167
  uint8_t v;

  for(;;)
  {
    cmd = *data;
    data++;
    11b6:	0f 5f       	subi	r16, 0xFF	; 255
    11b8:	1f 4f       	sbci	r17, 0xFF	; 255
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:183
	  u8x8_cad_SendData(u8x8, 1, &v);
	  data++;
	  break;
      case U8X8_MSG_CAD_START_TRANSFER:
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
    11ba:	d7 01       	movw	r26, r14
    11bc:	16 96       	adiw	r26, 0x06	; 6
    11be:	ed 91       	ld	r30, X+
    11c0:	fc 91       	ld	r31, X
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	40 e0       	ldi	r20, 0x00	; 0
    11c8:	c7 01       	movw	r24, r14
    11ca:	09 95       	icall
    11cc:	c2 cf       	rjmp	.-124    	; 0x1152 <u8x8_cad_SendSequence+0x16>

000011ce <u8x8_cad_SendArg>:
u8x8_cad_SendArg():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:94
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
}

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
    11ce:	46 2f       	mov	r20, r22
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:95
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
    11d0:	dc 01       	movw	r26, r24
    11d2:	16 96       	adiw	r26, 0x06	; 6
    11d4:	ed 91       	ld	r30, X+
    11d6:	fc 91       	ld	r31, X
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	66 e1       	ldi	r22, 0x16	; 22
    11de:	09 94       	ijmp

000011e0 <u8x8_cad_SendCmd>:
u8x8_cad_SendCmd():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:89
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
    11e0:	46 2f       	mov	r20, r22
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:90
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
    11e2:	dc 01       	movw	r26, r24
    11e4:	16 96       	adiw	r26, 0x06	; 6
    11e6:	ed 91       	ld	r30, X+
    11e8:	fc 91       	ld	r31, X
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	65 e1       	ldi	r22, 0x15	; 21
    11f0:	09 94       	ijmp

000011f2 <u8x8_d_ssd1306_128x64_noname>:
u8x8_d_ssd1306_128x64_noname():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:360
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	ec 01       	movw	r28, r24
    1200:	04 2f       	mov	r16, r20
    1202:	79 01       	movw	r14, r18
u8x8_d_ssd1306_sh1106_generic():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:258

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    1204:	6d 30       	cpi	r22, 0x0D	; 13
    1206:	09 f4       	brne	.+2      	; 0x120a <u8x8_d_ssd1306_128x64_noname+0x18>
    1208:	3f c0       	rjmp	.+126    	; 0x1288 <u8x8_d_ssd1306_128x64_noname+0x96>
    120a:	50 f4       	brcc	.+20     	; 0x1220 <u8x8_d_ssd1306_128x64_noname+0x2e>
    120c:	6b 30       	cpi	r22, 0x0B	; 11
    120e:	99 f1       	breq	.+102    	; 0x1276 <u8x8_d_ssd1306_128x64_noname+0x84>
u8x8_d_ssd1306_128x64_noname():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:365
{
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
  
  switch(msg)
    1210:	69 30       	cpi	r22, 0x09	; 9
    1212:	09 f4       	brne	.+2      	; 0x1216 <u8x8_d_ssd1306_128x64_noname+0x24>
    1214:	8c c0       	rjmp	.+280    	; 0x132e <u8x8_d_ssd1306_128x64_noname+0x13c>
    1216:	6a 30       	cpi	r22, 0x0A	; 10
    1218:	09 f4       	brne	.+2      	; 0x121c <u8x8_d_ssd1306_128x64_noname+0x2a>
    121a:	58 c0       	rjmp	.+176    	; 0x12cc <u8x8_d_ssd1306_128x64_noname+0xda>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:375
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    default:
      return 0;
    121c:	80 e0       	ldi	r24, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:258

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    121e:	3e c0       	rjmp	.+124    	; 0x129c <u8x8_d_ssd1306_128x64_noname+0xaa>
u8x8_d_ssd1306_sh1106_generic():
    1220:	6e 30       	cpi	r22, 0x0E	; 14
    1222:	09 f4       	brne	.+2      	; 0x1226 <u8x8_d_ssd1306_128x64_noname+0x34>
    1224:	49 c0       	rjmp	.+146    	; 0x12b8 <u8x8_d_ssd1306_128x64_noname+0xc6>
    1226:	6f 30       	cpi	r22, 0x0F	; 15
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:298
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
    1228:	99 f7       	brne	.-26     	; 0x1210 <u8x8_d_ssd1306_128x64_noname+0x1e>
    122a:	77 df       	rcall	.-274    	; 0x111a <u8x8_cad_StartTransfer>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:299
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
    122c:	f7 01       	movw	r30, r14
    122e:	13 81       	ldd	r17, Z+3	; 0x03
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:300
      x *= 8;
    1230:	11 0f       	add	r17, r17
    1232:	11 0f       	add	r17, r17
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:301
      x += u8x8->x_offset;
    1234:	11 0f       	add	r17, r17
    1236:	6c 89       	ldd	r22, Y+20	; 0x14
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:303
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
    1238:	16 0f       	add	r17, r22
    123a:	60 e4       	ldi	r22, 0x40	; 64
    123c:	ce 01       	movw	r24, r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:305
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    123e:	d0 df       	rcall	.-96     	; 0x11e0 <u8x8_cad_SendCmd>
    1240:	61 2f       	mov	r22, r17
    1242:	62 95       	swap	r22
    1244:	6f 70       	andi	r22, 0x0F	; 15
    1246:	60 61       	ori	r22, 0x10	; 16
    1248:	ce 01       	movw	r24, r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:306
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
    124a:	ca df       	rcall	.-108    	; 0x11e0 <u8x8_cad_SendCmd>
    124c:	61 2f       	mov	r22, r17
    124e:	6f 70       	andi	r22, 0x0F	; 15
    1250:	ce 01       	movw	r24, r28
    1252:	bd df       	rcall	.-134    	; 0x11ce <u8x8_cad_SendArg>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:307
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
    1254:	f7 01       	movw	r30, r14
    1256:	64 81       	ldd	r22, Z+4	; 0x04
    1258:	60 6b       	ori	r22, 0xB0	; 176
    125a:	ce 01       	movw	r24, r28
    125c:	b8 df       	rcall	.-144    	; 0x11ce <u8x8_cad_SendArg>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:314
    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
    125e:	f7 01       	movw	r30, r14
    1260:	40 81       	ld	r20, Z
    1262:	51 81       	ldd	r21, Z+1	; 0x01
    1264:	62 81       	ldd	r22, Z+2	; 0x02
    1266:	66 0f       	add	r22, r22
    1268:	66 0f       	add	r22, r22
    126a:	66 0f       	add	r22, r22
    126c:	ce 01       	movw	r24, r28
    126e:	5e df       	rcall	.-324    	; 0x112c <u8x8_cad_SendData>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:323
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
    1270:	01 50       	subi	r16, 0x01	; 1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:324
      } while( arg_int > 0 );
    1272:	a9 f7       	brne	.-22     	; 0x125e <u8x8_d_ssd1306_128x64_noname+0x6c>
    1274:	28 c0       	rjmp	.+80     	; 0x12c6 <u8x8_d_ssd1306_128x64_noname+0xd4>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:273
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
    1276:	6d e9       	ldi	r22, 0x9D	; 157
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:272
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
    1278:	78 ec       	ldi	r23, 0xC8	; 200
    127a:	44 23       	and	r20, r20
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:275
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
    127c:	11 f0       	breq	.+4      	; 0x1282 <u8x8_d_ssd1306_128x64_noname+0x90>
    127e:	68 e9       	ldi	r22, 0x98	; 152
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:369
  
  switch(msg)
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    1280:	78 ec       	ldi	r23, 0xC8	; 200
u8x8_d_ssd1306_128x64_noname():
    1282:	ce 01       	movw	r24, r28
    1284:	5b df       	rcall	.-330    	; 0x113c <u8x8_cad_SendSequence>
    1286:	09 c0       	rjmp	.+18     	; 0x129a <u8x8_d_ssd1306_128x64_noname+0xa8>
u8x8_d_ssd1306_sh1106_generic():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:278
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
    1288:	41 11       	cpse	r20, r1
    128a:	0f c0       	rjmp	.+30     	; 0x12aa <u8x8_d_ssd1306_128x64_noname+0xb8>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:280
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
    128c:	61 e9       	ldi	r22, 0x91	; 145
    128e:	78 ec       	ldi	r23, 0xC8	; 200
    1290:	55 df       	rcall	.-342    	; 0x113c <u8x8_cad_SendSequence>
    1292:	e8 81       	ld	r30, Y
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:281
	u8x8->x_offset = u8x8->display_info->default_x_offset;
    1294:	f9 81       	ldd	r31, Y+1	; 0x01
    1296:	82 89       	ldd	r24, Z+18	; 0x12
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:286
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    1298:	8c 8b       	std	Y+20, r24	; 0x14
u8x8_d_ssd1306_128x64_noname():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:377
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
    129a:	81 e0       	ldi	r24, 0x01	; 1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:378
}
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	1f 91       	pop	r17
    12a2:	0f 91       	pop	r16
    12a4:	ff 90       	pop	r15
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:285
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
	u8x8->x_offset = u8x8->display_info->default_x_offset;
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
    12a6:	ef 90       	pop	r14
    12a8:	08 95       	ret
u8x8_d_ssd1306_sh1106_generic():
    12aa:	6a e8       	ldi	r22, 0x8A	; 138
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:286
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    12ac:	78 ec       	ldi	r23, 0xC8	; 200
    12ae:	46 df       	rcall	.-372    	; 0x113c <u8x8_cad_SendSequence>
    12b0:	e8 81       	ld	r30, Y
    12b2:	f9 81       	ldd	r31, Y+1	; 0x01
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:291
      }
      break;
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
    12b4:	83 89       	ldd	r24, Z+19	; 0x13
    12b6:	f0 cf       	rjmp	.-32     	; 0x1298 <u8x8_d_ssd1306_128x64_noname+0xa6>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:292
      u8x8_cad_SendCmd(u8x8, 0x081 );
    12b8:	30 df       	rcall	.-416    	; 0x111a <u8x8_cad_StartTransfer>
    12ba:	61 e8       	ldi	r22, 0x81	; 129
    12bc:	ce 01       	movw	r24, r28
    12be:	90 df       	rcall	.-224    	; 0x11e0 <u8x8_cad_SendCmd>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:293
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
    12c0:	60 2f       	mov	r22, r16
    12c2:	ce 01       	movw	r24, r28
    12c4:	84 df       	rcall	.-248    	; 0x11ce <u8x8_cad_SendArg>
    12c6:	ce 01       	movw	r24, r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:326
	} while( c > 0 );
	*/
	arg_int--;
      } while( arg_int > 0 );
      
      u8x8_cad_EndTransfer(u8x8);
    12c8:	1f df       	rcall	.-450    	; 0x1108 <u8x8_cad_EndTransfer>
    12ca:	e7 cf       	rjmp	.-50     	; 0x129a <u8x8_d_ssd1306_128x64_noname+0xa8>
u8x8_d_helper_display_init():
    12cc:	ea 85       	ldd	r30, Y+10	; 0x0a
    12ce:	fb 85       	ldd	r31, Y+11	; 0x0b
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:67
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	20 e0       	ldi	r18, 0x00	; 0
    12d4:	40 e0       	ldi	r20, 0x00	; 0
    12d6:	68 e2       	ldi	r22, 0x28	; 40
    12d8:	ce 01       	movw	r24, r28
    12da:	09 95       	icall
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:68
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
    12dc:	ee 81       	ldd	r30, Y+6	; 0x06
    12de:	ff 81       	ldd	r31, Y+7	; 0x07
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	64 e1       	ldi	r22, 0x14	; 20
    12e8:	ce 01       	movw	r24, r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:71

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
    12ea:	09 95       	icall
    12ec:	41 e0       	ldi	r20, 0x01	; 1
    12ee:	6b e4       	ldi	r22, 0x4B	; 75
    12f0:	ce 01       	movw	r24, r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:72
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
    12f2:	03 df       	rcall	.-506    	; 0x10fa <u8x8_gpio_call>
    12f4:	e8 81       	ld	r30, Y
    12f6:	f9 81       	ldd	r31, Y+1	; 0x01
    12f8:	44 81       	ldd	r20, Z+4	; 0x04
    12fa:	69 e2       	ldi	r22, 0x29	; 41
    12fc:	ce 01       	movw	r24, r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:73
      u8x8_gpio_SetReset(u8x8, 0);
    12fe:	fd de       	rcall	.-518    	; 0x10fa <u8x8_gpio_call>
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	6b e4       	ldi	r22, 0x4B	; 75
    1304:	ce 01       	movw	r24, r28
    1306:	f9 de       	rcall	.-526    	; 0x10fa <u8x8_gpio_call>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:74
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
    1308:	e8 81       	ld	r30, Y
    130a:	f9 81       	ldd	r31, Y+1	; 0x01
    130c:	44 81       	ldd	r20, Z+4	; 0x04
    130e:	69 e2       	ldi	r22, 0x29	; 41
    1310:	ce 01       	movw	r24, r28
    1312:	f3 de       	rcall	.-538    	; 0x10fa <u8x8_gpio_call>
    1314:	41 e0       	ldi	r20, 0x01	; 1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:75
      u8x8_gpio_SetReset(u8x8, 1);
    1316:	6b e4       	ldi	r22, 0x4B	; 75
    1318:	ce 01       	movw	r24, r28
    131a:	ef de       	rcall	.-546    	; 0x10fa <u8x8_gpio_call>
    131c:	e8 81       	ld	r30, Y
    131e:	f9 81       	ldd	r31, Y+1	; 0x01
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:76
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
    1320:	45 81       	ldd	r20, Z+5	; 0x05
    1322:	69 e2       	ldi	r22, 0x29	; 41
    1324:	ce 01       	movw	r24, r28
    1326:	e9 de       	rcall	.-558    	; 0x10fa <u8x8_gpio_call>
u8x8_d_ssd1306_128x64_noname():
    1328:	62 ea       	ldi	r22, 0xA2	; 162
    132a:	78 ec       	ldi	r23, 0xC8	; 200
    132c:	aa cf       	rjmp	.-172    	; 0x1282 <u8x8_d_ssd1306_128x64_noname+0x90>
u8x8_d_helper_display_setup_memory():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_d_ssd1306_128x64_noname.c:369
  
  switch(msg)
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    132e:	87 ed       	ldi	r24, 0xD7	; 215
    1330:	98 ec       	ldi	r25, 0xC8	; 200
    1332:	88 83       	st	Y, r24
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:55
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
    1334:	99 83       	std	Y+1, r25	; 0x01
    1336:	1c 8a       	std	Y+20, r1	; 0x14
    1338:	b0 cf       	rjmp	.-160    	; 0x129a <u8x8_d_ssd1306_128x64_noname+0xa8>

0000133a <u8x8_byte_EndTransfer>:
u8x8_byte_EndTransfer():
    133a:	dc 01       	movw	r26, r24
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:56
      u8x8->x_offset = u8x8->display_info->default_x_offset;
    133c:	18 96       	adiw	r26, 0x08	; 8
    133e:	ed 91       	ld	r30, X+
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:61
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
}

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
    1340:	fc 91       	ld	r31, X
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	69 e1       	ldi	r22, 0x19	; 25
    134a:	09 94       	ijmp

0000134c <u8x8_byte_StartTransfer>:
u8x8_byte_StartTransfer():
    134c:	dc 01       	movw	r26, r24
    134e:	18 96       	adiw	r26, 0x08	; 8
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:56
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
}

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
    1350:	ed 91       	ld	r30, X+
    1352:	fc 91       	ld	r31, X
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	40 e0       	ldi	r20, 0x00	; 0
    135a:	68 e1       	ldi	r22, 0x18	; 24
    135c:	09 94       	ijmp

0000135e <u8x8_byte_SendByte>:
u8x8_byte_SendByte():
    135e:	cf 93       	push	r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:50
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
}

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    1360:	df 93       	push	r29
    1362:	1f 92       	push	r1
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	69 83       	std	Y+1, r22	; 0x01
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:51
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    136a:	be 01       	movw	r22, r28
    136c:	6f 5f       	subi	r22, 0xFF	; 255
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	92 dd       	rcall	.-1244   	; 0xe96 <u8x8_byte_SendBytes.constprop.3>
    1372:	0f 90       	pop	r0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_byte.c:52
}
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	08 95       	ret

0000137a <u8x8_i2c_data_transfer>:
u8x8_i2c_data_transfer():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:475
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
    137a:	ef 92       	push	r14
    137c:	ff 92       	push	r15
    137e:	1f 93       	push	r17
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	ec 01       	movw	r28, r24
    1386:	16 2f       	mov	r17, r22
    1388:	7a 01       	movw	r14, r20
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:476
    u8x8_byte_StartTransfer(u8x8);    
    138a:	e0 df       	rcall	.-64     	; 0x134c <u8x8_byte_StartTransfer>
    138c:	60 e4       	ldi	r22, 0x40	; 64
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:477
    u8x8_byte_SendByte(u8x8, 0x040);
    138e:	ce 01       	movw	r24, r28
    1390:	e6 df       	rcall	.-52     	; 0x135e <u8x8_byte_SendByte>
    1392:	e8 85       	ldd	r30, Y+8	; 0x08
    1394:	f9 85       	ldd	r31, Y+9	; 0x09
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:478
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
    1396:	97 01       	movw	r18, r14
    1398:	41 2f       	mov	r20, r17
    139a:	67 e1       	ldi	r22, 0x17	; 23
    139c:	ce 01       	movw	r24, r28
    139e:	09 95       	icall
    13a0:	ce 01       	movw	r24, r28
    13a2:	df 91       	pop	r29
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:479
    u8x8_byte_EndTransfer(u8x8);
    13a4:	cf 91       	pop	r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:480
}
    13a6:	1f 91       	pop	r17
    13a8:	ff 90       	pop	r15
    13aa:	ef 90       	pop	r14
    13ac:	c6 cf       	rjmp	.-116    	; 0x133a <u8x8_byte_EndTransfer>

000013ae <u8x8_cad_ssd13xx_fast_i2c>:
u8x8_cad_ssd13xx_fast_i2c():
    13ae:	ef 92       	push	r14
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:479
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
    u8x8_byte_StartTransfer(u8x8);    
    u8x8_byte_SendByte(u8x8, 0x040);
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
    u8x8_byte_EndTransfer(u8x8);
    13b0:	ff 92       	push	r15
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:535
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	df 93       	push	r29
    13b8:	ec 01       	movw	r28, r24
    13ba:	14 2f       	mov	r17, r20
    13bc:	79 01       	movw	r14, r18
    13be:	66 31       	cpi	r22, 0x16	; 22
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:538
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    13c0:	59 f1       	breq	.+86     	; 0x1418 <u8x8_cad_ssd13xx_fast_i2c+0x6a>
    13c2:	38 f4       	brcc	.+14     	; 0x13d2 <u8x8_cad_ssd13xx_fast_i2c+0x24>
    13c4:	64 31       	cpi	r22, 0x14	; 20
    13c6:	09 f4       	brne	.+2      	; 0x13ca <u8x8_cad_ssd13xx_fast_i2c+0x1c>
    13c8:	42 c0       	rjmp	.+132    	; 0x144e <u8x8_cad_ssd13xx_fast_i2c+0xa0>
    13ca:	65 31       	cpi	r22, 0x15	; 21
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:602
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    default:
      return 0;
    13cc:	71 f0       	breq	.+28     	; 0x13ea <u8x8_cad_ssd13xx_fast_i2c+0x3c>
    13ce:	80 e0       	ldi	r24, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:538
/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    13d0:	1d c0       	rjmp	.+58     	; 0x140c <u8x8_cad_ssd13xx_fast_i2c+0x5e>
    13d2:	68 31       	cpi	r22, 0x18	; 24
    13d4:	89 f1       	breq	.+98     	; 0x1438 <u8x8_cad_ssd13xx_fast_i2c+0x8a>
    13d6:	20 f1       	brcs	.+72     	; 0x1420 <u8x8_cad_ssd13xx_fast_i2c+0x72>
    13d8:	69 31       	cpi	r22, 0x19	; 25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:597
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
    13da:	c9 f7       	brne	.-14     	; 0x13ce <u8x8_cad_ssd13xx_fast_i2c+0x20>
    13dc:	80 91 77 38 	lds	r24, 0x3877	; 0x803877 <in_transfer.5222>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:598
	u8x8_byte_EndTransfer(u8x8); 
    13e0:	88 23       	and	r24, r24
    13e2:	51 f1       	breq	.+84     	; 0x1438 <u8x8_cad_ssd13xx_fast_i2c+0x8a>
    13e4:	ce 01       	movw	r24, r28
    13e6:	a9 df       	rcall	.-174    	; 0x133a <u8x8_byte_EndTransfer>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:544
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
    13e8:	27 c0       	rjmp	.+78     	; 0x1438 <u8x8_cad_ssd13xx_fast_i2c+0x8a>
    13ea:	80 91 77 38 	lds	r24, 0x3877	; 0x803877 <in_transfer.5222>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:545
	 u8x8_byte_EndTransfer(u8x8); 
    13ee:	88 23       	and	r24, r24
    13f0:	11 f0       	breq	.+4      	; 0x13f6 <u8x8_cad_ssd13xx_fast_i2c+0x48>
    13f2:	ce 01       	movw	r24, r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:547
      
      u8x8_byte_StartTransfer(u8x8);
    13f4:	a2 df       	rcall	.-188    	; 0x133a <u8x8_byte_EndTransfer>
    13f6:	ce 01       	movw	r24, r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:548
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
    13f8:	a9 df       	rcall	.-174    	; 0x134c <u8x8_byte_StartTransfer>
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	ce 01       	movw	r24, r28
    13fe:	af df       	rcall	.-162    	; 0x135e <u8x8_byte_SendByte>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:549
      u8x8_byte_SendByte(u8x8, arg_int);
    1400:	61 2f       	mov	r22, r17
    1402:	ce 01       	movw	r24, r28
    1404:	ac df       	rcall	.-168    	; 0x135e <u8x8_byte_SendByte>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:550
      in_transfer = 1;
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	80 93 77 38 	sts	0x3877, r24	; 0x803877 <in_transfer.5222>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:605
      break;
    default:
      return 0;
  }
  return 1;
}
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	1f 91       	pop	r17
    1412:	ff 90       	pop	r15
    1414:	ef 90       	pop	r14
    1416:	08 95       	ret
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:564
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
    1418:	64 2f       	mov	r22, r20
    141a:	a1 df       	rcall	.-190    	; 0x135e <u8x8_byte_SendByte>
    141c:	81 e0       	ldi	r24, 0x01	; 1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:604
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    141e:	f6 cf       	rjmp	.-20     	; 0x140c <u8x8_cad_ssd13xx_fast_i2c+0x5e>
    1420:	80 91 77 38 	lds	r24, 0x3877	; 0x803877 <in_transfer.5222>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:567
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;      
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
    1424:	88 23       	and	r24, r24
    1426:	11 f0       	breq	.+4      	; 0x142c <u8x8_cad_ssd13xx_fast_i2c+0x7e>
    1428:	ce 01       	movw	r24, r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:568
	u8x8_byte_EndTransfer(u8x8); 
    142a:	87 df       	rcall	.-242    	; 0x133a <u8x8_byte_EndTransfer>
    142c:	a7 01       	movw	r20, r14
    142e:	19 31       	cpi	r17, 0x19	; 25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:581
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    1430:	30 f4       	brcc	.+12     	; 0x143e <u8x8_cad_ssd13xx_fast_i2c+0x90>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:579
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    1432:	61 2f       	mov	r22, r17
    1434:	ce 01       	movw	r24, r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:585
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    1436:	a1 df       	rcall	.-190    	; 0x137a <u8x8_i2c_data_transfer>
    1438:	10 92 77 38 	sts	0x3877, r1	; 0x803877 <in_transfer.5222>
    143c:	ef cf       	rjmp	.-34     	; 0x141c <u8x8_cad_ssd13xx_fast_i2c+0x6e>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:599
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
    143e:	68 e1       	ldi	r22, 0x18	; 24
    1440:	ce 01       	movw	r24, r28
    1442:	9b df       	rcall	.-202    	; 0x137a <u8x8_i2c_data_transfer>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:581
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    1444:	18 51       	subi	r17, 0x18	; 24
    1446:	88 e1       	ldi	r24, 0x18	; 24
    1448:	e8 0e       	add	r14, r24
    144a:	f1 1c       	adc	r15, r1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:582
	arg_int-=24;
    144c:	ef cf       	rjmp	.-34     	; 0x142c <u8x8_cad_ssd13xx_fast_i2c+0x7e>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:583
	p+=24;
    144e:	8e 89       	ldd	r24, Y+22	; 0x16
    1450:	8f 3f       	cpi	r24, 0xFF	; 255
    1452:	11 f4       	brne	.+4      	; 0x1458 <u8x8_cad_ssd13xx_fast_i2c+0xaa>
    1454:	88 e7       	ldi	r24, 0x78	; 120
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:590
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    1456:	8e 8b       	std	Y+22, r24	; 0x16
    1458:	e8 85       	ldd	r30, Y+8	; 0x08
    145a:	f9 85       	ldd	r31, Y+9	; 0x09
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:591
	u8x8->i2c_address = 0x078;
    145c:	97 01       	movw	r18, r14
    145e:	41 2f       	mov	r20, r17
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:592
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    1460:	64 e1       	ldi	r22, 0x14	; 20
    1462:	ce 01       	movw	r24, r28
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	1f 91       	pop	r17
    146a:	ff 90       	pop	r15
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:605
      break;
    default:
      return 0;
  }
  return 1;
}
    146c:	ef 90       	pop	r14
    146e:	09 94       	ijmp

00001470 <u8g2_draw_l90_r0>:
u8g2_draw_l90_r0():
    1470:	0f 93       	push	r16
u8g2_draw_hv_line_2dir():
    1472:	fc 01       	movw	r30, r24
    1474:	e0 5c       	subi	r30, 0xC0	; 192
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_cad.c:592
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:309
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    1478:	01 90       	ld	r0, Z+
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:138
{

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
    147a:	f0 81       	ld	r31, Z
    147c:	e0 2d       	mov	r30, r0
    147e:	4e 1b       	sub	r20, r30
    1480:	5f 0b       	sbc	r21, r31
    1482:	dc 01       	movw	r26, r24
    1484:	d4 96       	adiw	r26, 0x34	; 52
    1486:	ed 91       	ld	r30, X+
    1488:	fc 91       	ld	r31, X
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:140
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    148a:	09 95       	icall
u8g2_draw_l90_r0():
    148c:	0f 91       	pop	r16
    148e:	08 95       	ret

00001490 <u8g2_update_dimension_r0>:
u8g2_update_dimension_r0():
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:314
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
}
    1494:	fc 01       	movw	r30, r24
u8g2_update_dimension_common():
    1496:	a0 81       	ld	r26, Z
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:214

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
    1498:	b1 81       	ldd	r27, Z+1	; 0x01
    149a:	82 ad       	ldd	r24, Z+58	; 0x3a
    149c:	90 e0       	ldi	r25, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:141
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
    149e:	9c 01       	movw	r18, r24
    14a0:	43 e0       	ldi	r20, 0x03	; 3
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:144
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
    14a2:	22 0f       	add	r18, r18
    14a4:	33 1f       	adc	r19, r19
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:145
  t *= 8;
    14a6:	4a 95       	dec	r20
    14a8:	e1 f7       	brne	.-8      	; 0x14a2 <u8g2_update_dimension_r0+0x12>
    14aa:	26 af       	std	Z+62, r18	; 0x3e
    14ac:	37 af       	std	Z+63, r19	; 0x3f
    14ae:	50 96       	adiw	r26, 0x10	; 16
    14b0:	2c 91       	ld	r18, X
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:146
  u8g2->pixel_buf_height = t;
    14b2:	50 97       	sbiw	r26, 0x10	; 16
    14b4:	48 e0       	ldi	r20, 0x08	; 8
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:153
  t = display_info->tile_width;
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
    14b6:	24 9f       	mul	r18, r20
    14b8:	90 01       	movw	r18, r0
    14ba:	11 24       	eor	r1, r1
    14bc:	24 af       	std	Z+60, r18	; 0x3c
    14be:	35 af       	std	Z+61, r19	; 0x3d
    14c0:	23 ad       	ldd	r18, Z+59	; 0x3b
    14c2:	30 e0       	ldi	r19, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:154
  u8g2->pixel_buf_width = t;
    14c4:	b9 01       	movw	r22, r18
    14c6:	53 e0       	ldi	r21, 0x03	; 3
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:156
  
  t = u8g2->tile_curr_row;
    14c8:	66 0f       	add	r22, r22
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:157
  t *= 8;
    14ca:	77 1f       	adc	r23, r23
    14cc:	5a 95       	dec	r21
    14ce:	e1 f7       	brne	.-8      	; 0x14c8 <u8g2_update_dimension_r0+0x38>
    14d0:	ef 01       	movw	r28, r30
    14d2:	c0 5c       	subi	r28, 0xC0	; 192
    14d4:	df 4f       	sbci	r29, 0xFF	; 255
    14d6:	68 83       	st	Y, r22
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:158
  u8g2->pixel_curr_row = t;
    14d8:	79 83       	std	Y+1, r23	; 0x01
    14da:	51 96       	adiw	r26, 0x11	; 17
    14dc:	4c 91       	ld	r20, X
    14de:	51 97       	sbiw	r26, 0x11	; 17
    14e0:	e9 01       	movw	r28, r18
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:162
  
  t = u8g2->tile_buf_height;
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
    14e2:	c8 0f       	add	r28, r24
    14e4:	d9 1f       	adc	r29, r25
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	4c 17       	cp	r20, r28
    14ea:	5d 07       	cpc	r21, r29
    14ec:	18 f4       	brcc	.+6      	; 0x14f4 <u8g2_update_dimension_r0+0x64>
    14ee:	ca 01       	movw	r24, r20
    14f0:	82 1b       	sub	r24, r18
    14f2:	93 0b       	sbc	r25, r19
    14f4:	ef 01       	movw	r28, r30
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:163
    t = display_info->tile_height - u8g2->tile_curr_row;
    14f6:	ce 5b       	subi	r28, 0xBE	; 190
    14f8:	df 4f       	sbci	r29, 0xFF	; 255
    14fa:	68 83       	st	Y, r22
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:166
  t *= 8;
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
    14fc:	79 83       	std	Y+1, r23	; 0x01
    14fe:	22 96       	adiw	r28, 0x02	; 2
    1500:	23 e0       	ldi	r18, 0x03	; 3
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:168
  u8g2->buf_y1 = u8g2->buf_y0;
  u8g2->buf_y1 += t;
    1506:	2a 95       	dec	r18
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:164
  
  t = u8g2->tile_buf_height;
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
    t = display_info->tile_height - u8g2->tile_curr_row;
  t *= 8;
    1508:	e1 f7       	brne	.-8      	; 0x1502 <u8g2_update_dimension_r0+0x72>
    150a:	86 0f       	add	r24, r22
    150c:	97 1f       	adc	r25, r23
    150e:	88 83       	st	Y, r24
    1510:	99 83       	std	Y+1, r25	; 0x01
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:168
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
  u8g2->buf_y1 = u8g2->buf_y0;
  u8g2->buf_y1 += t;
    1512:	22 96       	adiw	r28, 0x02	; 2
    1514:	54 96       	adiw	r26, 0x14	; 20
    1516:	8d 91       	ld	r24, X+
    1518:	9c 91       	ld	r25, X
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:172

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
    151a:	55 97       	sbiw	r26, 0x15	; 21
    151c:	88 83       	st	Y, r24
    151e:	99 83       	std	Y+1, r25	; 0x01
    1520:	e8 5b       	subi	r30, 0xB8	; 184
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	56 96       	adiw	r26, 0x16	; 22
    1526:	8d 91       	ld	r24, X+
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:173
  u8g2->height = display_info->pixel_height;
    1528:	9c 91       	ld	r25, X
    152a:	80 83       	st	Z, r24
    152c:	91 83       	std	Z+1, r25	; 0x01
u8g2_update_dimension_r0():
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	08 95       	ret

00001534 <u8g2_IsIntersection>:
u8g2_IsIntersection():
    1534:	0f 93       	push	r16
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:216


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
  u8g2_update_dimension_common(u8g2);  
}
    1536:	1f 93       	push	r17
    1538:	fc 01       	movw	r30, r24
    153a:	e2 5b       	subi	r30, 0xB2	; 178
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:167



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	01 90       	ld	r0, Z+
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:168
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    1540:	f0 81       	ld	r31, Z
    1542:	e0 2d       	mov	r30, r0
    1544:	dc 01       	movw	r26, r24
    1546:	a0 5b       	subi	r26, 0xB0	; 176
    1548:	bf 4f       	sbci	r27, 0xFF	; 255
u8g2_is_intersection_decision_tree():
    154a:	0d 90       	ld	r0, X+
    154c:	bc 91       	ld	r27, X
    154e:	a0 2d       	mov	r26, r0
    1550:	4a 17       	cp	r20, r26
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:125
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    1552:	5b 07       	cpc	r21, r27
    1554:	40 f4       	brcc	.+16     	; 0x1566 <u8g2_IsIntersection+0x32>
    1556:	e0 17       	cp	r30, r16
    1558:	f1 07       	cpc	r31, r17
    155a:	48 f0       	brcs	.+18     	; 0x156e <u8g2_IsIntersection+0x3a>
    155c:	04 17       	cp	r16, r20
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:127
  {
    if ( v1 > a0 )	// v1 >= a0
    155e:	15 07       	cpc	r17, r21
    1560:	30 f0       	brcs	.+12     	; 0x156e <u8g2_IsIntersection+0x3a>
u8g2_IsIntersection():
    1562:	80 e0       	ldi	r24, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:133
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
    1564:	19 c0       	rjmp	.+50     	; 0x1598 <u8g2_IsIntersection+0x64>
u8g2_is_intersection_decision_tree():
    1566:	e0 17       	cp	r30, r16
    1568:	f1 07       	cpc	r31, r17
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:169

/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
    156a:	c0 f3       	brcs	.-16     	; 0x155c <u8g2_IsIntersection+0x28>
    156c:	fa cf       	rjmp	.-12     	; 0x1562 <u8g2_IsIntersection+0x2e>
u8g2_IsIntersection():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:145
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    156e:	fc 01       	movw	r30, r24
    1570:	e6 5b       	subi	r30, 0xB6	; 182
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	40 81       	ld	r20, Z
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:171
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    1576:	51 81       	ldd	r21, Z+1	; 0x01
    1578:	84 5b       	subi	r24, 0xB4	; 180
    157a:	9f 4f       	sbci	r25, 0xFF	; 255
u8g2_is_intersection_decision_tree():
    157c:	fc 01       	movw	r30, r24
    157e:	80 81       	ld	r24, Z
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    1582:	68 17       	cp	r22, r24
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:125
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    1584:	79 07       	cpc	r23, r25
    1586:	58 f4       	brcc	.+22     	; 0x159e <u8g2_IsIntersection+0x6a>
u8g2_IsIntersection():
    1588:	81 e0       	ldi	r24, 0x01	; 1
u8g2_is_intersection_decision_tree():
    158a:	42 17       	cp	r20, r18
    158c:	53 07       	cpc	r21, r19
    158e:	20 f0       	brcs	.+8      	; 0x1598 <u8g2_IsIntersection+0x64>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:129
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    1590:	81 e0       	ldi	r24, 0x01	; 1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:127
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    1592:	26 17       	cp	r18, r22
    1594:	37 07       	cpc	r19, r23
    1596:	28 f7       	brcc	.-54     	; 0x1562 <u8g2_IsIntersection+0x2e>
u8g2_IsIntersection():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:133
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	08 95       	ret
u8g2_is_intersection_decision_tree():
    159e:	42 17       	cp	r20, r18
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:172
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
}
    15a0:	53 07       	cpc	r21, r19
    15a2:	b0 f3       	brcs	.-20     	; 0x1590 <u8g2_IsIntersection+0x5c>
    15a4:	de cf       	rjmp	.-68     	; 0x1562 <u8g2_IsIntersection+0x2e>

000015a6 <u8g2_update_page_win_r0>:
u8g2_update_page_win_r0():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_intersection.c:145
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    15a6:	2f 92       	push	r2
    15a8:	3f 92       	push	r3
    15aa:	4f 92       	push	r4
    15ac:	5f 92       	push	r5
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:219

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
    15ae:	6f 92       	push	r6
    15b0:	7f 92       	push	r7
    15b2:	8f 92       	push	r8
    15b4:	9f 92       	push	r9
    15b6:	af 92       	push	r10
    15b8:	bf 92       	push	r11
    15ba:	cf 92       	push	r12
    15bc:	df 92       	push	r13
    15be:	ef 92       	push	r14
    15c0:	ff 92       	push	r15
    15c2:	0f 93       	push	r16
    15c4:	1f 93       	push	r17
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    15ce:	2a 97       	sbiw	r28, 0x0a	; 10
    15d0:	cd bf       	out	0x3d, r28	; 61
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	89 87       	std	Y+9, r24	; 0x09
    15d6:	9a 87       	std	Y+10, r25	; 0x0a
    15d8:	86 5b       	subi	r24, 0xB6	; 182
    15da:	9f 4f       	sbci	r25, 0xFF	; 255
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	9a 83       	std	Y+2, r25	; 0x02
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:220
  u8g2->user_x0 = 0;
    15e0:	fc 01       	movw	r30, r24
    15e2:	10 82       	st	Z, r1
    15e4:	11 82       	std	Z+1, r1	; 0x01
    15e6:	e9 85       	ldd	r30, Y+9	; 0x09
    15e8:	fa 85       	ldd	r31, Y+10	; 0x0a
    15ea:	ea 5b       	subi	r30, 0xBA	; 186
    15ec:	ff 4f       	sbci	r31, 0xFF	; 255
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:221
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
    15ee:	40 80       	ld	r4, Z
    15f0:	51 80       	ldd	r5, Z+1	; 0x01
    15f2:	29 85       	ldd	r18, Y+9	; 0x09
    15f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    15f6:	24 5b       	subi	r18, 0xB4	; 180
    15f8:	3f 4f       	sbci	r19, 0xFF	; 255
    15fa:	2b 83       	std	Y+3, r18	; 0x03
    15fc:	3c 83       	std	Y+4, r19	; 0x04
    15fe:	f9 01       	movw	r30, r18
    1600:	40 82       	st	Z, r4
    1602:	51 82       	std	Z+1, r5	; 0x01
    1604:	e9 85       	ldd	r30, Y+9	; 0x09
    1606:	fa 85       	ldd	r31, Y+10	; 0x0a
    1608:	ee 5b       	subi	r30, 0xBE	; 190
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:223
  
  u8g2->user_y0 = u8g2->buf_y0;
    160c:	20 80       	ld	r2, Z
    160e:	31 80       	ldd	r3, Z+1	; 0x01
    1610:	29 85       	ldd	r18, Y+9	; 0x09
    1612:	3a 85       	ldd	r19, Y+10	; 0x0a
    1614:	22 5b       	subi	r18, 0xB2	; 178
    1616:	3f 4f       	sbci	r19, 0xFF	; 255
    1618:	2d 83       	std	Y+5, r18	; 0x05
    161a:	3e 83       	std	Y+6, r19	; 0x06
    161c:	f9 01       	movw	r30, r18
    161e:	20 82       	st	Z, r2
    1620:	31 82       	std	Z+1, r3	; 0x01
    1622:	e9 85       	ldd	r30, Y+9	; 0x09
    1624:	fa 85       	ldd	r31, Y+10	; 0x0a
    1626:	ec 5b       	subi	r30, 0xBC	; 188
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:224
  u8g2->user_y1 = u8g2->buf_y1;
    162a:	60 80       	ld	r6, Z
    162c:	71 80       	ldd	r7, Z+1	; 0x01
    162e:	29 85       	ldd	r18, Y+9	; 0x09
    1630:	3a 85       	ldd	r19, Y+10	; 0x0a
    1632:	20 5b       	subi	r18, 0xB0	; 176
    1634:	3f 4f       	sbci	r19, 0xFF	; 255
    1636:	2f 83       	std	Y+7, r18	; 0x07
    1638:	38 87       	std	Y+8, r19	; 0x08
    163a:	f9 01       	movw	r30, r18
    163c:	60 82       	st	Z, r6
    163e:	71 82       	std	Z+1, r7	; 0x01
u8g2_apply_clip_window():
    1640:	e9 85       	ldd	r30, Y+9	; 0x09
    1642:	fa 85       	ldd	r31, Y+10	; 0x0a
    1644:	e8 5a       	subi	r30, 0xA8	; 168
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:190

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	e0 80       	ld	r14, Z
    164a:	f1 80       	ldd	r15, Z+1	; 0x01
    164c:	e9 85       	ldd	r30, Y+9	; 0x09
    164e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1650:	ec 5a       	subi	r30, 0xAC	; 172
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	a0 80       	ld	r10, Z
    1656:	b1 80       	ldd	r11, Z+1	; 0x01
    1658:	e9 85       	ldd	r30, Y+9	; 0x09
    165a:	fa 85       	ldd	r31, Y+10	; 0x0a
    165c:	ea 5a       	subi	r30, 0xAA	; 170
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	c0 80       	ld	r12, Z
    1662:	d1 80       	ldd	r13, Z+1	; 0x01
    1664:	e9 85       	ldd	r30, Y+9	; 0x09
    1666:	fa 85       	ldd	r31, Y+10	; 0x0a
    1668:	ee 5a       	subi	r30, 0xAE	; 174
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	80 80       	ld	r8, Z
    166e:	91 80       	ldd	r9, Z+1	; 0x01
    1670:	87 01       	movw	r16, r14
    1672:	95 01       	movw	r18, r10
    1674:	a6 01       	movw	r20, r12
    1676:	b4 01       	movw	r22, r8
    1678:	89 85       	ldd	r24, Y+9	; 0x09
    167a:	9a 85       	ldd	r25, Y+10	; 0x0a
    167c:	5b df       	rcall	.-330    	; 0x1534 <u8g2_IsIntersection>
    167e:	29 85       	ldd	r18, Y+9	; 0x09
    1680:	3a 85       	ldd	r19, Y+10	; 0x0a
    1682:	2c 57       	subi	r18, 0x7C	; 124
    1684:	3f 4f       	sbci	r19, 0xFF	; 255
    1686:	29 87       	std	Y+9, r18	; 0x09
    1688:	3a 87       	std	Y+10, r19	; 0x0a
    168a:	81 11       	cpse	r24, r1
    168c:	18 c0       	rjmp	.+48     	; 0x16be <u8g2_update_page_win_r0+0x118>
    168e:	f9 01       	movw	r30, r18
    1690:	10 82       	st	Z, r1
u8g2_update_page_win_r0():
    1692:	2a 96       	adiw	r28, 0x0a	; 10
    1694:	cd bf       	out	0x3d, r28	; 61
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:192
  {
    u8g2->is_page_clip_window_intersection = 0;
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	df 91       	pop	r29
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:229
  u8g2->user_y1 = u8g2->buf_y1;
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
    169a:	cf 91       	pop	r28
    169c:	1f 91       	pop	r17
    169e:	0f 91       	pop	r16
    16a0:	ff 90       	pop	r15
    16a2:	ef 90       	pop	r14
    16a4:	df 90       	pop	r13
    16a6:	cf 90       	pop	r12
    16a8:	bf 90       	pop	r11
    16aa:	af 90       	pop	r10
    16ac:	9f 90       	pop	r9
    16ae:	8f 90       	pop	r8
    16b0:	7f 90       	pop	r7
    16b2:	6f 90       	pop	r6
    16b4:	5f 90       	pop	r5
    16b6:	4f 90       	pop	r4
    16b8:	3f 90       	pop	r3
    16ba:	2f 90       	pop	r2
    16bc:	08 95       	ret
u8g2_apply_clip_window():
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	e9 85       	ldd	r30, Y+9	; 0x09
    16c2:	fa 85       	ldd	r31, Y+10	; 0x0a
    16c4:	80 83       	st	Z, r24
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:196
  {
    u8g2->is_page_clip_window_intersection = 0;
  }
  else
  {
    u8g2->is_page_clip_window_intersection = 1;
    16c6:	81 14       	cp	r8, r1
    16c8:	91 04       	cpc	r9, r1
    16ca:	21 f0       	breq	.+8      	; 0x16d4 <u8g2_update_page_win_r0+0x12e>
    16cc:	e9 81       	ldd	r30, Y+1	; 0x01
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:198

    if ( u8g2->user_x0 < u8g2->clip_x0 )
    16ce:	fa 81       	ldd	r31, Y+2	; 0x02
    16d0:	80 82       	st	Z, r8
    16d2:	91 82       	std	Z+1, r9	; 0x01
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:199
      u8g2->user_x0 = u8g2->clip_x0;
    16d4:	a4 14       	cp	r10, r4
    16d6:	b5 04       	cpc	r11, r5
    16d8:	20 f4       	brcc	.+8      	; 0x16e2 <u8g2_update_page_win_r0+0x13c>
    16da:	eb 81       	ldd	r30, Y+3	; 0x03
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:200
    if ( u8g2->user_x1 > u8g2->clip_x1 )
    16dc:	fc 81       	ldd	r31, Y+4	; 0x04
    16de:	a0 82       	st	Z, r10
    16e0:	b1 82       	std	Z+1, r11	; 0x01
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:201
      u8g2->user_x1 = u8g2->clip_x1;
    16e2:	2c 14       	cp	r2, r12
    16e4:	3d 04       	cpc	r3, r13
    16e6:	20 f4       	brcc	.+8      	; 0x16f0 <u8g2_update_page_win_r0+0x14a>
    16e8:	ed 81       	ldd	r30, Y+5	; 0x05
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:202
    if ( u8g2->user_y0 < u8g2->clip_y0 )
    16ea:	fe 81       	ldd	r31, Y+6	; 0x06
    16ec:	c0 82       	st	Z, r12
    16ee:	d1 82       	std	Z+1, r13	; 0x01
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:203
      u8g2->user_y0 = u8g2->clip_y0;
    16f0:	e6 14       	cp	r14, r6
    16f2:	f7 04       	cpc	r15, r7
    16f4:	70 f6       	brcc	.-100    	; 0x1692 <u8g2_update_page_win_r0+0xec>
    16f6:	ef 81       	ldd	r30, Y+7	; 0x07
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:204
    if ( u8g2->user_y1 > u8g2->clip_y1 )
    16f8:	f8 85       	ldd	r31, Y+8	; 0x08
    16fa:	e0 82       	st	Z, r14
    16fc:	f1 82       	std	Z+1, r15	; 0x01
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_setup.c:205
      u8g2->user_y1 = u8g2->clip_y1;
    16fe:	c9 cf       	rjmp	.-110    	; 0x1692 <u8g2_update_page_win_r0+0xec>

00001700 <u8g2_DrawHVLine>:
u8g2_DrawHVLine():
    1700:	0f 93       	push	r16
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	e0 2f       	mov	r30, r16
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:151
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    1708:	dc 01       	movw	r26, r24
    170a:	ac 57       	subi	r26, 0x7C	; 124
    170c:	bf 4f       	sbci	r27, 0xFF	; 255
    170e:	fc 91       	ld	r31, X
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:157
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
    1710:	ff 23       	and	r31, r31
    1712:	09 f4       	brne	.+2      	; 0x1716 <u8g2_DrawHVLine+0x16>
    1714:	60 c0       	rjmp	.+192    	; 0x17d6 <u8g2_DrawHVLine+0xd6>
    1716:	21 15       	cp	r18, r1
    1718:	31 05       	cpc	r19, r1
    171a:	09 f4       	brne	.+2      	; 0x171e <u8g2_DrawHVLine+0x1e>
    171c:	5c c0       	rjmp	.+184    	; 0x17d6 <u8g2_DrawHVLine+0xd6>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:159
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    171e:	22 30       	cpi	r18, 0x02	; 2
    1720:	31 05       	cpc	r19, r1
    1722:	38 f0       	brcs	.+14     	; 0x1732 <u8g2_DrawHVLine+0x32>
    1724:	02 30       	cpi	r16, 0x02	; 2
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:163
    {
    
      /* convert to two directions */    
      if ( len > 1 )
    1726:	09 f0       	breq	.+2      	; 0x172a <u8g2_DrawHVLine+0x2a>
    1728:	4a c0       	rjmp	.+148    	; 0x17be <u8g2_DrawHVLine+0xbe>
    172a:	6f 5f       	subi	r22, 0xFF	; 255
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:165
      {
	if ( dir == 2 )
    172c:	7f 4f       	sbci	r23, 0xFF	; 255
    172e:	62 1b       	sub	r22, r18
    1730:	73 0b       	sbc	r23, r19
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:168
	{
	  x -= len;
	  x++;
    1732:	0e 2f       	mov	r16, r30
    1734:	01 70       	andi	r16, 0x01	; 1
    1736:	e0 fd       	sbrc	r30, 0
    1738:	52 c0       	rjmp	.+164    	; 0x17de <u8g2_DrawHVLine+0xde>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:179
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
    173a:	fc 01       	movw	r30, r24
    173c:	e2 5b       	subi	r30, 0xB2	; 178
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	01 90       	ld	r0, Z+
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:181
      {
	if ( y < u8g2->user_y0 )
    1742:	f0 81       	ld	r31, Z
    1744:	e0 2d       	mov	r30, r0
    1746:	4e 17       	cp	r20, r30
    1748:	5f 07       	cpc	r21, r31
    174a:	08 f4       	brcc	.+2      	; 0x174e <u8g2_DrawHVLine+0x4e>
    174c:	44 c0       	rjmp	.+136    	; 0x17d6 <u8g2_DrawHVLine+0xd6>
    174e:	fc 01       	movw	r30, r24
    1750:	e0 5b       	subi	r30, 0xB0	; 176
    1752:	ff 4f       	sbci	r31, 0xFF	; 255
    1754:	01 90       	ld	r0, Z+
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:183
	  return;
	if ( y >= u8g2->user_y1 )
    1756:	f0 81       	ld	r31, Z
    1758:	e0 2d       	mov	r30, r0
    175a:	4e 17       	cp	r20, r30
    175c:	5f 07       	cpc	r21, r31
    175e:	d8 f5       	brcc	.+118    	; 0x17d6 <u8g2_DrawHVLine+0xd6>
    1760:	fc 01       	movw	r30, r24
    1762:	e4 5b       	subi	r30, 0xB4	; 180
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	01 90       	ld	r0, Z+
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:185
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
    1768:	f0 81       	ld	r31, Z
    176a:	e0 2d       	mov	r30, r0
    176c:	dc 01       	movw	r26, r24
    176e:	a6 5b       	subi	r26, 0xB6	; 182
    1770:	bf 4f       	sbci	r27, 0xFF	; 255
    1772:	0d 90       	ld	r0, X+
    1774:	bc 91       	ld	r27, X
    1776:	a0 2d       	mov	r26, r0
u8g2_clip_intersection2():
    1778:	26 0f       	add	r18, r22
    177a:	37 1f       	adc	r19, r23
    177c:	26 17       	cp	r18, r22
    177e:	37 07       	cpc	r19, r23
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:66
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    1780:	38 f5       	brcc	.+78     	; 0x17d0 <u8g2_DrawHVLine+0xd0>
    1782:	6e 17       	cp	r22, r30
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:87
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    1784:	7f 07       	cpc	r23, r31
    1786:	18 f5       	brcc	.+70     	; 0x17ce <u8g2_DrawHVLine+0xce>
    1788:	9f 01       	movw	r18, r30
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:90
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    178a:	21 50       	subi	r18, 0x01	; 1
    178c:	31 09       	sbc	r19, r1
    178e:	a2 17       	cp	r26, r18
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:93
    {
      b = d;
      b--;
    1790:	b3 07       	cpc	r27, r19
    1792:	08 f5       	brcc	.+66     	; 0x17d6 <u8g2_DrawHVLine+0xd6>
    1794:	6a 17       	cp	r22, r26
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:105
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    return 0;
  if ( b <= c )
    1796:	7b 07       	cpc	r23, r27
    1798:	08 f4       	brcc	.+2      	; 0x179c <u8g2_DrawHVLine+0x9c>
    179a:	bd 01       	movw	r22, r26
    179c:	2e 17       	cp	r18, r30
    179e:	3f 07       	cpc	r19, r31
    17a0:	08 f4       	brcc	.+2      	; 0x17a4 <u8g2_DrawHVLine+0xa4>
    17a2:	f9 01       	movw	r30, r18
    17a4:	e6 1b       	sub	r30, r22
    17a6:	f7 0b       	sbc	r31, r23
u8g2_DrawHVLine():
    17a8:	ec 01       	movw	r28, r24
    17aa:	ae a9       	ldd	r26, Y+54	; 0x36
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:113
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    17ac:	bf a9       	ldd	r27, Y+55	; 0x37
    17ae:	14 96       	adiw	r26, 0x04	; 4
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:199
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    17b0:	0d 90       	ld	r0, X+
    17b2:	bc 91       	ld	r27, X
    17b4:	a0 2d       	mov	r26, r0
    17b6:	9f 01       	movw	r18, r30
    17b8:	fd 01       	movw	r30, r26
    17ba:	09 95       	icall
    17bc:	0c c0       	rjmp	.+24     	; 0x17d6 <u8g2_DrawHVLine+0xd6>
    17be:	03 30       	cpi	r16, 0x03	; 3
    17c0:	09 f0       	breq	.+2      	; 0x17c4 <u8g2_DrawHVLine+0xc4>
    17c2:	b7 cf       	rjmp	.-146    	; 0x1732 <u8g2_DrawHVLine+0x32>
    17c4:	4f 5f       	subi	r20, 0xFF	; 255
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:170
	if ( dir == 2 )
	{
	  x -= len;
	  x++;
	}
	else if ( dir == 3 )
    17c6:	5f 4f       	sbci	r21, 0xFF	; 255
    17c8:	42 1b       	sub	r20, r18
    17ca:	53 0b       	sbc	r21, r19
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:173
	{
	  y -= len;
	  y++;
    17cc:	b2 cf       	rjmp	.-156    	; 0x1732 <u8g2_DrawHVLine+0x32>
    17ce:	bd 01       	movw	r22, r26
u8g2_clip_intersection2():
    17d0:	6e 17       	cp	r22, r30
    17d2:	7f 07       	cpc	r23, r31
    17d4:	e0 f2       	brcs	.-72     	; 0x178e <u8g2_DrawHVLine+0x8e>
u8g2_DrawHVLine():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:185
      {
	if ( y < u8g2->user_y0 )
	  return;
	if ( y >= u8g2->user_y1 )
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
    17d6:	df 91       	pop	r29
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:103
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    17d8:	cf 91       	pop	r28
    17da:	0f 91       	pop	r16
    17dc:	08 95       	ret
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:201
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    }
}
    17de:	fc 01       	movw	r30, r24
    17e0:	e6 5b       	subi	r30, 0xB6	; 182
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	01 90       	ld	r0, Z+
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:190
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
    17e6:	f0 81       	ld	r31, Z
    17e8:	e0 2d       	mov	r30, r0
    17ea:	6e 17       	cp	r22, r30
    17ec:	7f 07       	cpc	r23, r31
    17ee:	98 f3       	brcs	.-26     	; 0x17d6 <u8g2_DrawHVLine+0xd6>
    17f0:	fc 01       	movw	r30, r24
    17f2:	e4 5b       	subi	r30, 0xB4	; 180
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	01 90       	ld	r0, Z+
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:192
	  return;
	if ( x >= u8g2->user_x1 )
    17f8:	f0 81       	ld	r31, Z
    17fa:	e0 2d       	mov	r30, r0
    17fc:	6e 17       	cp	r22, r30
    17fe:	7f 07       	cpc	r23, r31
    1800:	50 f7       	brcc	.-44     	; 0x17d6 <u8g2_DrawHVLine+0xd6>
    1802:	fc 01       	movw	r30, r24
    1804:	e0 5b       	subi	r30, 0xB0	; 176
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	01 90       	ld	r0, Z+
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:194
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
    180a:	f0 81       	ld	r31, Z
    180c:	e0 2d       	mov	r30, r0
    180e:	dc 01       	movw	r26, r24
    1810:	a2 5b       	subi	r26, 0xB2	; 178
    1812:	bf 4f       	sbci	r27, 0xFF	; 255
    1814:	0d 90       	ld	r0, X+
    1816:	bc 91       	ld	r27, X
    1818:	a0 2d       	mov	r26, r0
u8g2_clip_intersection2():
    181a:	24 0f       	add	r18, r20
    181c:	35 1f       	adc	r19, r21
    181e:	24 17       	cp	r18, r20
    1820:	35 07       	cpc	r19, r21
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:66
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    1822:	a8 f4       	brcc	.+42     	; 0x184e <u8g2_DrawHVLine+0x14e>
    1824:	4e 17       	cp	r20, r30
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:87
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    1826:	5f 07       	cpc	r21, r31
    1828:	88 f4       	brcc	.+34     	; 0x184c <u8g2_DrawHVLine+0x14c>
    182a:	9f 01       	movw	r18, r30
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:90
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    182c:	21 50       	subi	r18, 0x01	; 1
    182e:	31 09       	sbc	r19, r1
    1830:	a2 17       	cp	r26, r18
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:93
    {
      b = d;
      b--;
    1832:	b3 07       	cpc	r27, r19
    1834:	80 f6       	brcc	.-96     	; 0x17d6 <u8g2_DrawHVLine+0xd6>
    1836:	4a 17       	cp	r20, r26
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:105
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    return 0;
  if ( b <= c )
    1838:	5b 07       	cpc	r21, r27
    183a:	08 f4       	brcc	.+2      	; 0x183e <u8g2_DrawHVLine+0x13e>
    183c:	ad 01       	movw	r20, r26
    183e:	2e 17       	cp	r18, r30
    1840:	3f 07       	cpc	r19, r31
    1842:	08 f4       	brcc	.+2      	; 0x1846 <u8g2_DrawHVLine+0x146>
    1844:	f9 01       	movw	r30, r18
    1846:	e4 1b       	sub	r30, r20
    1848:	f5 0b       	sbc	r31, r21
    184a:	ae cf       	rjmp	.-164    	; 0x17a8 <u8g2_DrawHVLine+0xa8>
u8g2_DrawHVLine():
    184c:	ad 01       	movw	r20, r26
u8g2_clip_intersection2():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:113
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    184e:	4e 17       	cp	r20, r30
    1850:	5f 07       	cpc	r21, r31
    1852:	08 f6       	brcc	.-126    	; 0x17d6 <u8g2_DrawHVLine+0xd6>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:194
      {
	if ( x < u8g2->user_x0 )
	  return;
	if ( x >= u8g2->user_x1 )
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
    1854:	ed cf       	rjmp	.-38     	; 0x1830 <u8g2_DrawHVLine+0x130>

00001856 <u8g2_font_calc_vref_top>:
u8g2_font_calc_vref_top():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_hvline.c:103
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    1856:	8a 57       	subi	r24, 0x7A	; 122
    1858:	9f 4f       	sbci	r25, 0xFF	; 255
    185a:	fc 01       	movw	r30, r24
    185c:	80 81       	ld	r24, Z
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1252

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2)
{
  u8g2_uint_t tmp;
  /* reference pos is one pixel above the upper edge of the reference glyph */
  tmp = (u8g2_uint_t)(u8g2->font_ref_ascent);
    185e:	08 2e       	mov	r0, r24
    1860:	00 0c       	add	r0, r0
    1862:	99 0b       	sbc	r25, r25
    1864:	01 96       	adiw	r24, 0x01	; 1
    1866:	08 95       	ret

00001868 <u8g2_add_vector_x>:
u8g2_add_vector_x():
    1868:	21 30       	cpi	r18, 0x01	; 1
    186a:	69 f0       	breq	.+26     	; 0x1886 <u8g2_add_vector_x+0x1e>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1255
  tmp++;
  return tmp;
}
    186c:	38 f0       	brcs	.+14     	; 0x187c <u8g2_add_vector_x+0x14>
    186e:	22 30       	cpi	r18, 0x02	; 2
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:318
  return dy;
}

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
    1870:	79 f0       	breq	.+30     	; 0x1890 <u8g2_add_vector_x+0x28>
    1872:	84 0f       	add	r24, r20
    1874:	91 1d       	adc	r25, r1
    1876:	47 fd       	sbrc	r20, 7
    1878:	9a 95       	dec	r25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:330
      break;
    case 2:
      dx -= x;
      break;
    default:
      dx += y;
    187a:	08 95       	ret
    187c:	86 0f       	add	r24, r22
    187e:	91 1d       	adc	r25, r1
    1880:	67 fd       	sbrc	r22, 7
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:334
      break;      
  }
  return dx;
}
    1882:	9a 95       	dec	r25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:321
u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
  {
    case 0:
      dx += x;
    1884:	08 95       	ret
    1886:	84 1b       	sub	r24, r20
    1888:	91 09       	sbc	r25, r1
    188a:	47 fd       	sbrc	r20, 7
    188c:	93 95       	inc	r25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:324
      break;
    case 1:
      dx -= y;
    188e:	08 95       	ret
    1890:	86 1b       	sub	r24, r22
    1892:	91 09       	sbc	r25, r1
    1894:	67 fd       	sbrc	r22, 7
    1896:	93 95       	inc	r25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:327
      break;
    case 2:
      dx -= x;
    1898:	08 95       	ret

0000189a <u8g2_add_vector_y>:
u8g2_add_vector_y():
    189a:	21 30       	cpi	r18, 0x01	; 1
    189c:	69 f0       	breq	.+26     	; 0x18b8 <u8g2_add_vector_y+0x1e>
    189e:	38 f0       	brcs	.+14     	; 0x18ae <u8g2_add_vector_y+0x14>
    18a0:	22 30       	cpi	r18, 0x02	; 2
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:298


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
    18a2:	79 f0       	breq	.+30     	; 0x18c2 <u8g2_add_vector_y+0x28>
    18a4:	86 1b       	sub	r24, r22
    18a6:	91 09       	sbc	r25, r1
    18a8:	67 fd       	sbrc	r22, 7
    18aa:	93 95       	inc	r25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:310
      break;
    case 2:
      dy -= y;
      break;
    default:
      dy -= x;
    18ac:	08 95       	ret
    18ae:	84 0f       	add	r24, r20
    18b0:	91 1d       	adc	r25, r1
    18b2:	47 fd       	sbrc	r20, 7
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:314
      break;      
  }
  return dy;
}
    18b4:	9a 95       	dec	r25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:301
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
  {
    case 0:
      dy += y;
    18b6:	08 95       	ret
    18b8:	86 0f       	add	r24, r22
    18ba:	91 1d       	adc	r25, r1
    18bc:	67 fd       	sbrc	r22, 7
    18be:	9a 95       	dec	r25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:304
      break;
    case 1:
      dy += x;
    18c0:	08 95       	ret
    18c2:	84 1b       	sub	r24, r20
    18c4:	91 09       	sbc	r25, r1
    18c6:	47 fd       	sbrc	r20, 7
    18c8:	93 95       	inc	r25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:307
      break;
    case 2:
      dy -= y;
    18ca:	08 95       	ret

000018cc <u8g2_font_decode_len>:
u8g2_font_decode_len():
    18cc:	3f 92       	push	r3
    18ce:	4f 92       	push	r4
    18d0:	5f 92       	push	r5
    18d2:	6f 92       	push	r6
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:388
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
    18d4:	7f 92       	push	r7
    18d6:	8f 92       	push	r8
    18d8:	9f 92       	push	r9
    18da:	af 92       	push	r10
    18dc:	bf 92       	push	r11
    18de:	cf 92       	push	r12
    18e0:	df 92       	push	r13
    18e2:	ef 92       	push	r14
    18e4:	ff 92       	push	r15
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	7c 01       	movw	r14, r24
    18f0:	16 2f       	mov	r17, r22
    18f2:	44 2e       	mov	r4, r20
    18f4:	ec 01       	movw	r28, r24
    18f6:	c2 5a       	subi	r28, 0xA2	; 162
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:405
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
  
  cnt = len;
  
  /* get the local position */
  lx = decode->x;
    18f8:	df 4f       	sbci	r29, 0xFF	; 255
    18fa:	5e 80       	ldd	r5, Y+6	; 0x06
    18fc:	6f 80       	ldd	r6, Y+7	; 0x07
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:406
  ly = decode->y;
    18fe:	6c 01       	movw	r12, r24
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:458
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
    1900:	8a e8       	ldi	r24, 0x8A	; 138
    1902:	c8 0e       	add	r12, r24
    1904:	d1 1c       	adc	r13, r1
    1906:	78 84       	ldd	r7, Y+8	; 0x08
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:411
  ly = decode->y;
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
    1908:	75 18       	sub	r7, r5
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:412
    rem -= lx;
    190a:	31 2e       	mov	r3, r17
    190c:	71 16       	cp	r7, r17
    190e:	08 f4       	brcc	.+2      	; 0x1912 <u8g2_font_decode_len+0x46>
    1910:	37 2c       	mov	r3, r7
    1912:	8c 80       	ldd	r8, Y+4	; 0x04
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:426
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
    y = decode->target_y;
    1914:	9d 80       	ldd	r9, Y+5	; 0x05
    1916:	0e 85       	ldd	r16, Y+14	; 0x0e
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:431

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
    1918:	20 2f       	mov	r18, r16
    191a:	46 2d       	mov	r20, r6
    191c:	65 2d       	mov	r22, r5
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	9b 81       	ldd	r25, Y+3	; 0x03
    1922:	a2 df       	rcall	.-188    	; 0x1868 <u8g2_add_vector_x>
    1924:	5c 01       	movw	r10, r24
    1926:	20 2f       	mov	r18, r16
    1928:	46 2d       	mov	r20, r6
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:432
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
    192a:	65 2d       	mov	r22, r5
    192c:	c4 01       	movw	r24, r8
    192e:	b5 df       	rcall	.-150    	; 0x189a <u8g2_add_vector_y>
    1930:	ac 01       	movw	r20, r24
    1932:	44 20       	and	r4, r4
    1934:	71 f0       	breq	.+28     	; 0x1952 <u8g2_font_decode_len+0x86>
    1936:	8c 85       	ldd	r24, Y+12	; 0x0c
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:442
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
    1938:	f6 01       	movw	r30, r12
    193a:	80 83       	st	Z, r24
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:444
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
    193c:	23 2d       	mov	r18, r3
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:458
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	b5 01       	movw	r22, r10
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:459
      u8g2_DrawHVLine(u8g2, 
    1942:	c7 01       	movw	r24, r14
    1944:	dd de       	rcall	.-582    	; 0x1700 <u8g2_DrawHVLine>
    1946:	17 15       	cp	r17, r7
    1948:	48 f0       	brcs	.+18     	; 0x195c <u8g2_font_decode_len+0x90>
    194a:	17 19       	sub	r17, r7
    194c:	63 94       	inc	r6
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:472
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
    194e:	51 2c       	mov	r5, r1
    1950:	da cf       	rjmp	.-76     	; 0x1906 <u8g2_font_decode_len+0x3a>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:474
      break;
    cnt -= rem;
    1952:	8b 85       	ldd	r24, Y+11	; 0x0b
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:476
    lx = 0;
    ly++;
    1954:	81 11       	cpse	r24, r1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:475
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
      break;
    cnt -= rem;
    lx = 0;
    1956:	f7 cf       	rjmp	.-18     	; 0x1946 <u8g2_font_decode_len+0x7a>
    1958:	8d 85       	ldd	r24, Y+13	; 0x0d
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:456
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
    195a:	ee cf       	rjmp	.-36     	; 0x1938 <u8g2_font_decode_len+0x6c>
    195c:	15 0d       	add	r17, r5
    195e:	1e 83       	std	Y+6, r17	; 0x06
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:458
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
    1960:	6f 82       	std	Y+7, r6	; 0x07
    1962:	df 91       	pop	r29
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:478
      break;
    cnt -= rem;
    lx = 0;
    ly++;
  }
  lx += cnt;
    1964:	cf 91       	pop	r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:480
  
  decode->x = lx;
    1966:	1f 91       	pop	r17
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:481
  decode->y = ly;  
    1968:	0f 91       	pop	r16
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:482
}
    196a:	ff 90       	pop	r15
    196c:	ef 90       	pop	r14
    196e:	df 90       	pop	r13
    1970:	cf 90       	pop	r12
    1972:	bf 90       	pop	r11
    1974:	af 90       	pop	r10
    1976:	9f 90       	pop	r9
    1978:	8f 90       	pop	r8
    197a:	7f 90       	pop	r7
    197c:	6f 90       	pop	r6
    197e:	5f 90       	pop	r5
    1980:	4f 90       	pop	r4
    1982:	3f 90       	pop	r3
    1984:	08 95       	ret

00001986 <u8g2_font_decode_get_unsigned_bits>:
u8g2_font_decode_get_unsigned_bits():
    1986:	dc 01       	movw	r26, r24
    1988:	1a 96       	adiw	r26, 0x0a	; 10
    198a:	4c 91       	ld	r20, X
    198c:	1a 97       	sbiw	r26, 0x0a	; 10
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:238
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
    198e:	ed 91       	ld	r30, X+
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:240
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
    1990:	fc 91       	ld	r31, X
    1992:	11 97       	sbiw	r26, 0x01	; 1
    1994:	24 91       	lpm	r18, Z
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:244
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	04 2e       	mov	r0, r20
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <u8g2_font_decode_get_unsigned_bits+0x1a>
    199c:	35 95       	asr	r19
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:246
  
  val >>= bit_pos;
    199e:	27 95       	ror	r18
    19a0:	0a 94       	dec	r0
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <u8g2_font_decode_get_unsigned_bits+0x16>
    19a4:	84 2f       	mov	r24, r20
    19a6:	86 0f       	add	r24, r22
    19a8:	88 30       	cpi	r24, 0x08	; 8
    19aa:	68 f0       	brcs	.+26     	; 0x19c6 <u8g2_font_decode_get_unsigned_bits+0x40>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:248
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
    19ac:	31 96       	adiw	r30, 0x01	; 1
    19ae:	ed 93       	st	X+, r30
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:249
  if ( bit_pos_plus_cnt >= 8 )
    19b0:	fc 93       	st	X, r31
    19b2:	11 97       	sbiw	r26, 0x01	; 1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:253
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    19b4:	e4 91       	lpm	r30, Z
    19b6:	98 e0       	ldi	r25, 0x08	; 8
    19b8:	94 1b       	sub	r25, r20
    19ba:	01 c0       	rjmp	.+2      	; 0x19be <u8g2_font_decode_get_unsigned_bits+0x38>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:255
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    19bc:	ee 0f       	add	r30, r30
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:252
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
  {
    uint8_t s = 8;
    s -= bit_pos;
    19be:	9a 95       	dec	r25
    19c0:	ea f7       	brpl	.-6      	; 0x19bc <u8g2_font_decode_get_unsigned_bits+0x36>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:255
    f->decode_ptr++;
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    19c2:	2e 2b       	or	r18, r30
    19c4:	88 50       	subi	r24, 0x08	; 8
    19c6:	1a 96       	adiw	r26, 0x0a	; 10
    19c8:	8c 93       	st	X, r24
    19ca:	8f ef       	ldi	r24, 0xFF	; 255
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:257
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
    19cc:	9f ef       	ldi	r25, 0xFF	; 255
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:262
  }
  val &= (1U<<cnt)-1;
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
    19ce:	01 c0       	rjmp	.+2      	; 0x19d2 <u8g2_font_decode_get_unsigned_bits+0x4c>
    19d0:	88 0f       	add	r24, r24
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:259
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
  }
  val &= (1U<<cnt)-1;
    19d2:	6a 95       	dec	r22
    19d4:	ea f7       	brpl	.-6      	; 0x19d0 <u8g2_font_decode_get_unsigned_bits+0x4a>
    19d6:	80 95       	com	r24
    19d8:	82 23       	and	r24, r18
    19da:	08 95       	ret

000019dc <u8g2_font_get_word>:
u8g2_font_get_word():
    19dc:	fc 01       	movw	r30, r24
    19de:	e6 0f       	add	r30, r22
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:264
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
  return val;
}
    19e0:	f1 1d       	adc	r31, r1
    19e2:	84 91       	lpm	r24, Z
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:121

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	98 2f       	mov	r25, r24
    19e8:	88 27       	eor	r24, r24
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:122
    pos = u8x8_pgm_read( font );
    19ea:	31 96       	adiw	r30, 0x01	; 1
    19ec:	e4 91       	lpm	r30, Z
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:124
    font++;
    pos <<= 8;
    19ee:	8e 0f       	add	r24, r30
    19f0:	91 1d       	adc	r25, r1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:123
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
    pos = u8x8_pgm_read( font );
    font++;
    19f2:	08 95       	ret

000019f4 <u8g2_DrawGlyph>:
u8g2_DrawGlyph():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:125
    pos <<= 8;
    pos += u8x8_pgm_read( font);
    19f4:	4f 92       	push	r4
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:127
    return pos;
}
    19f6:	5f 92       	push	r5
    19f8:	6f 92       	push	r6
    19fa:	7f 92       	push	r7
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:937
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
    19fc:	8f 92       	push	r8
    19fe:	9f 92       	push	r9
    1a00:	af 92       	push	r10
    1a02:	bf 92       	push	r11
    1a04:	cf 92       	push	r12
    1a06:	df 92       	push	r13
    1a08:	ef 92       	push	r14
    1a0a:	ff 92       	push	r15
    1a0c:	0f 93       	push	r16
    1a0e:	1f 93       	push	r17
    1a10:	cf 93       	push	r28
    1a12:	df 93       	push	r29
    1a14:	ec 01       	movw	r28, r24
    1a16:	6b 01       	movw	r12, r22
    1a18:	8a 01       	movw	r16, r20
    1a1a:	79 01       	movw	r14, r18
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	e4 59       	subi	r30, 0x94	; 148
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	80 81       	ld	r24, Z
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:939
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
    1a24:	81 30       	cpi	r24, 0x01	; 1
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <u8g2_DrawGlyph+0x36>
    1a28:	4b c0       	rjmp	.+150    	; 0x1ac0 <u8g2_DrawGlyph+0xcc>
    1a2a:	08 f4       	brcc	.+2      	; 0x1a2e <u8g2_DrawGlyph+0x3a>
    1a2c:	3e c0       	rjmp	.+124    	; 0x1aaa <u8g2_DrawGlyph+0xb6>
    1a2e:	82 30       	cpi	r24, 0x02	; 2
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <u8g2_DrawGlyph+0x40>
    1a32:	51 c0       	rjmp	.+162    	; 0x1ad6 <u8g2_DrawGlyph+0xe2>
    1a34:	83 30       	cpi	r24, 0x03	; 3
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <u8g2_DrawGlyph+0x46>
    1a38:	59 c0       	rjmp	.+178    	; 0x1aec <u8g2_DrawGlyph+0xf8>
u8g2_font_draw_glyph():
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	e0 5a       	subi	r30, 0xA0	; 160
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	c0 82       	st	Z, r12
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:872
}

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
  u8g2_uint_t dx = 0;
  u8g2->font_decode.target_x = x;
    1a42:	d1 82       	std	Z+1, r13	; 0x01
    1a44:	32 96       	adiw	r30, 0x02	; 2
    1a46:	00 83       	st	Z, r16
    1a48:	11 83       	std	Z+1, r17	; 0x01
u8g2_font_get_glyph_data():
    1a4a:	38 97       	sbiw	r30, 0x08	; 8
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:873
  u8g2->font_decode.target_y = y;
    1a4c:	80 81       	ld	r24, Z
    1a4e:	91 81       	ldd	r25, Z+1	; 0x01
    1a50:	47 96       	adiw	r24, 0x17	; 23
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:784
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
  const uint8_t *font = u8g2->font;
    1a52:	2f ef       	ldi	r18, 0xFF	; 255
    1a54:	e2 16       	cp	r14, r18
    1a56:	f1 04       	cpc	r15, r1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:785
  font += U8G2_FONT_DATA_STRUCT_SIZE;
    1a58:	11 f0       	breq	.+4      	; 0x1a5e <u8g2_DrawGlyph+0x6a>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:788

  
  if ( encoding <= 255 )
    1a5a:	08 f0       	brcs	.+2      	; 0x1a5e <u8g2_DrawGlyph+0x6a>
    1a5c:	eb c0       	rjmp	.+470    	; 0x1c34 <u8g2_DrawGlyph+0x240>
    1a5e:	e1 e6       	ldi	r30, 0x61	; 97
    1a60:	ee 16       	cp	r14, r30
    1a62:	f1 04       	cpc	r15, r1
    1a64:	08 f4       	brcc	.+2      	; 0x1a68 <u8g2_DrawGlyph+0x74>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:790
  {
    if ( encoding >= 'a' )
    1a66:	4d c0       	rjmp	.+154    	; 0x1b02 <u8g2_DrawGlyph+0x10e>
    1a68:	fe 01       	movw	r30, r28
    1a6a:	e0 58       	subi	r30, 0x80	; 128
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	20 81       	ld	r18, Z
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:792
    {
      font += u8g2->font_info.start_pos_lower_a;
    1a70:	31 81       	ldd	r19, Z+1	; 0x01
    1a72:	82 0f       	add	r24, r18
    1a74:	93 1f       	adc	r25, r19
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:796
    }
    else if ( encoding >= 'A' )
    {
      font += u8g2->font_info.start_pos_upper_A;
    1a76:	9c 01       	movw	r18, r24
    1a78:	2f 5f       	subi	r18, 0xFF	; 255
    1a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7c:	f9 01       	movw	r30, r18
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:801
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
    1a7e:	44 91       	lpm	r20, Z
    1a80:	41 11       	cpse	r20, r1
    1a82:	48 c0       	rjmp	.+144    	; 0x1b14 <u8g2_DrawGlyph+0x120>
u8g2_DrawGlyph():
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	df 91       	pop	r29
    1a8a:	cf 91       	pop	r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:871
  return NULL;
}

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
  u8g2_uint_t dx = 0;
    1a8c:	1f 91       	pop	r17
    1a8e:	0f 91       	pop	r16
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:958
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
}
    1a90:	ff 90       	pop	r15
    1a92:	ef 90       	pop	r14
    1a94:	df 90       	pop	r13
    1a96:	cf 90       	pop	r12
    1a98:	bf 90       	pop	r11
    1a9a:	af 90       	pop	r10
    1a9c:	9f 90       	pop	r9
    1a9e:	8f 90       	pop	r8
    1aa0:	7f 90       	pop	r7
    1aa2:	6f 90       	pop	r6
    1aa4:	5f 90       	pop	r5
    1aa6:	4f 90       	pop	r4
    1aa8:	08 95       	ret
    1aaa:	fe 01       	movw	r30, r28
    1aac:	e4 5a       	subi	r30, 0xA4	; 164
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	01 90       	ld	r0, Z+
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:942
{
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
    1ab2:	f0 81       	ld	r31, Z
    1ab4:	e0 2d       	mov	r30, r0
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	09 95       	icall
    1aba:	08 0f       	add	r16, r24
    1abc:	19 1f       	adc	r17, r25
    1abe:	bd cf       	rjmp	.-134    	; 0x1a3a <u8g2_DrawGlyph+0x46>
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	e4 5a       	subi	r30, 0xA4	; 164
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	01 90       	ld	r0, Z+
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:945
      break;
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
    1ac8:	f0 81       	ld	r31, Z
    1aca:	e0 2d       	mov	r30, r0
    1acc:	ce 01       	movw	r24, r28
    1ace:	09 95       	icall
    1ad0:	c8 1a       	sub	r12, r24
    1ad2:	d9 0a       	sbc	r13, r25
    1ad4:	b2 cf       	rjmp	.-156    	; 0x1a3a <u8g2_DrawGlyph+0x46>
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e4 5a       	subi	r30, 0xA4	; 164
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	01 90       	ld	r0, Z+
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:948
      break;
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
    1ade:	f0 81       	ld	r31, Z
    1ae0:	e0 2d       	mov	r30, r0
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	09 95       	icall
    1ae6:	08 1b       	sub	r16, r24
    1ae8:	19 0b       	sbc	r17, r25
    1aea:	a7 cf       	rjmp	.-178    	; 0x1a3a <u8g2_DrawGlyph+0x46>
    1aec:	fe 01       	movw	r30, r28
    1aee:	e4 5a       	subi	r30, 0xA4	; 164
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:951
      break;
    case 3:
      x += u8g2->font_calc_vref(u8g2);
    1af2:	01 90       	ld	r0, Z+
    1af4:	f0 81       	ld	r31, Z
    1af6:	e0 2d       	mov	r30, r0
    1af8:	ce 01       	movw	r24, r28
    1afa:	09 95       	icall
    1afc:	c8 0e       	add	r12, r24
    1afe:	d9 1e       	adc	r13, r25
    1b00:	9c cf       	rjmp	.-200    	; 0x1a3a <u8g2_DrawGlyph+0x46>
u8g2_font_get_glyph_data():
    1b02:	f1 e4       	ldi	r31, 0x41	; 65
    1b04:	ef 16       	cp	r14, r31
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:794
  {
    if ( encoding >= 'a' )
    {
      font += u8g2->font_info.start_pos_lower_a;
    }
    else if ( encoding >= 'A' )
    1b06:	f1 04       	cpc	r15, r1
    1b08:	08 f4       	brcc	.+2      	; 0x1b0c <u8g2_DrawGlyph+0x118>
    1b0a:	b5 cf       	rjmp	.-150    	; 0x1a76 <u8g2_DrawGlyph+0x82>
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	e2 58       	subi	r30, 0x82	; 130
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:796
    {
      font += u8g2->font_info.start_pos_upper_A;
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	ad cf       	rjmp	.-166    	; 0x1a6e <u8g2_DrawGlyph+0x7a>
    1b14:	fc 01       	movw	r30, r24
    1b16:	44 91       	lpm	r20, Z
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:803
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
	break;
      if ( u8x8_pgm_read( font ) == encoding )
    1b18:	4e 15       	cp	r20, r14
    1b1a:	1f 04       	cpc	r1, r15
    1b1c:	09 f0       	breq	.+2      	; 0x1b20 <u8g2_DrawGlyph+0x12c>
    1b1e:	85 c0       	rjmp	.+266    	; 0x1c2a <u8g2_DrawGlyph+0x236>
    1b20:	02 96       	adiw	r24, 0x02	; 2
u8g2_font_draw_glyph():
    1b22:	00 97       	sbiw	r24, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:805
      {
	return font+2;	/* skip encoding and glyph size */
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <u8g2_DrawGlyph+0x134>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:877
  u8g2->font_decode.target_x = x;
  u8g2->font_decode.target_y = y;
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
  if ( glyph_data != NULL )
    1b26:	ae cf       	rjmp	.-164    	; 0x1a84 <u8g2_DrawGlyph+0x90>
u8g2_font_decode_glyph():
    1b28:	7e 01       	movw	r14, r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:618
{
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
    1b2a:	fe e5       	ldi	r31, 0x5E	; 94
    1b2c:	ef 0e       	add	r14, r31
    1b2e:	f1 1c       	adc	r15, r1
u8g2_font_setup_decode():
    1b30:	f7 01       	movw	r30, r14
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:581


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
  decode->decode_ptr = glyph_data;
    1b32:	80 83       	st	Z, r24
    1b34:	91 83       	std	Z+1, r25	; 0x01
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:582
  decode->decode_bit_pos = 0;
    1b36:	12 86       	std	Z+10, r1	; 0x0a
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:590
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
    1b38:	73 96       	adiw	r30, 0x13	; 19
    1b3a:	60 81       	ld	r22, Z
    1b3c:	c7 01       	movw	r24, r14
    1b3e:	23 df       	rcall	.-442    	; 0x1986 <u8g2_font_decode_get_unsigned_bits>
    1b40:	f7 01       	movw	r30, r14
    1b42:	80 87       	std	Z+8, r24	; 0x08
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:591
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
    1b44:	74 96       	adiw	r30, 0x14	; 20
    1b46:	60 81       	ld	r22, Z
    1b48:	c7 01       	movw	r24, r14
    1b4a:	1d df       	rcall	.-454    	; 0x1986 <u8g2_font_decode_get_unsigned_bits>
    1b4c:	98 2e       	mov	r9, r24
    1b4e:	f7 01       	movw	r30, r14
    1b50:	81 87       	std	Z+9, r24	; 0x09
    1b52:	5e 01       	movw	r10, r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:593
  
  decode->fg_color = u8g2->draw_color;
    1b54:	fa e8       	ldi	r31, 0x8A	; 138
    1b56:	af 0e       	add	r10, r31
    1b58:	b1 1c       	adc	r11, r1
    1b5a:	f5 01       	movw	r30, r10
    1b5c:	90 81       	ld	r25, Z
    1b5e:	f7 01       	movw	r30, r14
    1b60:	94 87       	std	Z+12, r25	; 0x0c
    1b62:	81 e0       	ldi	r24, 0x01	; 1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:594
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
    1b64:	91 11       	cpse	r25, r1
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	f7 01       	movw	r30, r14
    1b6a:	85 87       	std	Z+13, r24	; 0x0d
u8g2_font_decode_glyph():
    1b6c:	fe 01       	movw	r30, r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:623
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
  h = u8g2->font_decode.glyph_height;
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
    1b6e:	ed 58       	subi	r30, 0x8D	; 141
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	c0 80       	ld	r12, Z
u8g2_font_decode_get_signed_bits():
    1b74:	6c 2d       	mov	r22, r12
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:285
*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
    1b76:	c7 01       	movw	r24, r14
    1b78:	06 df       	rcall	.-500    	; 0x1986 <u8g2_font_decode_get_unsigned_bits>
    1b7a:	58 2e       	mov	r5, r24
u8g2_font_decode_glyph():
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	ec 58       	subi	r30, 0x8C	; 140
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:624
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
  h = u8g2->font_decode.glyph_height;
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	d0 80       	ld	r13, Z
u8g2_font_decode_get_signed_bits():
    1b84:	6d 2d       	mov	r22, r13
    1b86:	c7 01       	movw	r24, r14
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:285
*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
    1b88:	fe de       	rcall	.-516    	; 0x1986 <u8g2_font_decode_get_unsigned_bits>
    1b8a:	48 2e       	mov	r4, r24
u8g2_font_decode_glyph():
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	eb 58       	subi	r30, 0x8B	; 139
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:625
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
  h = u8g2->font_decode.glyph_height;
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
    1b92:	10 81       	ld	r17, Z
u8g2_font_decode_get_signed_bits():
    1b94:	61 2f       	mov	r22, r17
    1b96:	c7 01       	movw	r24, r14
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:285
*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
    1b98:	f6 de       	rcall	.-532    	; 0x1986 <u8g2_font_decode_get_unsigned_bits>
    1b9a:	9f ef       	ldi	r25, 0xFF	; 255
    1b9c:	91 0f       	add	r25, r17
    1b9e:	01 e0       	ldi	r16, 0x01	; 1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:287
  d = 1;
  cnt--;
    1ba0:	10 e0       	ldi	r17, 0x00	; 0
    1ba2:	98 01       	movw	r18, r16
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:288
  d <<= cnt;
    1ba4:	01 c0       	rjmp	.+2      	; 0x1ba8 <u8g2_DrawGlyph+0x1b4>
    1ba6:	22 0f       	add	r18, r18
    1ba8:	9a 95       	dec	r25
    1baa:	ea f7       	brpl	.-6      	; 0x1ba6 <u8g2_DrawGlyph+0x1b2>
    1bac:	88 2e       	mov	r8, r24
    1bae:	82 1a       	sub	r8, r18
u8g2_font_decode_glyph():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:289
  v -= d;
    1bb0:	f7 01       	movw	r30, r14
    1bb2:	60 84       	ldd	r6, Z+8	; 0x08
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:627
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
  
  if ( decode->glyph_width > 0 )
    1bb4:	16 14       	cp	r1, r6
    1bb6:	0c f0       	brlt	.+2      	; 0x1bba <u8g2_DrawGlyph+0x1c6>
    1bb8:	a3 c0       	rjmp	.+326    	; 0x1d00 <u8g2_DrawGlyph+0x30c>
u8g2_font_decode_get_signed_bits():
    1bba:	ca 94       	dec	r12
    1bbc:	c8 01       	movw	r24, r16
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:287
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
  d = 1;
  cnt--;
    1bbe:	01 c0       	rjmp	.+2      	; 0x1bc2 <u8g2_DrawGlyph+0x1ce>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:288
  d <<= cnt;
    1bc0:	88 0f       	add	r24, r24
    1bc2:	ca 94       	dec	r12
    1bc4:	ea f7       	brpl	.-6      	; 0x1bc0 <u8g2_DrawGlyph+0x1cc>
    1bc6:	58 1a       	sub	r5, r24
u8g2_font_decode_glyph():
    1bc8:	76 84       	ldd	r7, Z+14	; 0x0e
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:289
  v -= d;
    1bca:	49 0c       	add	r4, r9
u8g2_font_decode_get_signed_bits():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:630
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
  
  if ( decode->glyph_width > 0 )
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
    1bcc:	da 94       	dec	r13
    1bce:	a8 01       	movw	r20, r16
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:287
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
  d = 1;
  cnt--;
    1bd0:	01 c0       	rjmp	.+2      	; 0x1bd4 <u8g2_DrawGlyph+0x1e0>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:288
  d <<= cnt;
    1bd2:	44 0f       	add	r20, r20
    1bd4:	da 94       	dec	r13
    1bd6:	ea f7       	brpl	.-6      	; 0x1bd2 <u8g2_DrawGlyph+0x1de>
u8g2_font_decode_glyph():
    1bd8:	f4 2f       	mov	r31, r20
    1bda:	f4 19       	sub	r31, r4
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:630
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
  
  if ( decode->glyph_width > 0 )
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
    1bdc:	4f 2e       	mov	r4, r31
    1bde:	27 2d       	mov	r18, r7
    1be0:	4f 2f       	mov	r20, r31
    1be2:	65 2d       	mov	r22, r5
    1be4:	f7 01       	movw	r30, r14
    1be6:	82 81       	ldd	r24, Z+2	; 0x02
    1be8:	93 81       	ldd	r25, Z+3	; 0x03
    1bea:	3e de       	rcall	.-900    	; 0x1868 <u8g2_add_vector_x>
    1bec:	6c 01       	movw	r12, r24
    1bee:	f7 01       	movw	r30, r14
    1bf0:	82 83       	std	Z+2, r24	; 0x02
    1bf2:	93 83       	std	Z+3, r25	; 0x03
    1bf4:	27 2d       	mov	r18, r7
    1bf6:	44 2d       	mov	r20, r4
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:631
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
    1bf8:	65 2d       	mov	r22, r5
    1bfa:	84 81       	ldd	r24, Z+4	; 0x04
    1bfc:	95 81       	ldd	r25, Z+5	; 0x05
    1bfe:	4d de       	rcall	.-870    	; 0x189a <u8g2_add_vector_y>
    1c00:	f7 01       	movw	r30, r14
    1c02:	84 83       	std	Z+4, r24	; 0x04
    1c04:	95 83       	std	Z+5, r25	; 0x05
    1c06:	f1 e0       	ldi	r31, 0x01	; 1
    1c08:	7f 16       	cp	r7, r31
    1c0a:	09 f4       	brne	.+2      	; 0x1c0e <u8g2_DrawGlyph+0x21a>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:650
      y0 = decode->target_y;
      x1 = x0;
      y1 = y0;
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
    1c0c:	7d c0       	rjmp	.+250    	; 0x1d08 <u8g2_DrawGlyph+0x314>
    1c0e:	7f 16       	cp	r7, r31
    1c10:	08 f4       	brcc	.+2      	; 0x1c14 <u8g2_DrawGlyph+0x220>
    1c12:	3d c0       	rjmp	.+122    	; 0x1c8e <u8g2_DrawGlyph+0x29a>
    1c14:	22 e0       	ldi	r18, 0x02	; 2
    1c16:	72 16       	cp	r7, r18
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <u8g2_DrawGlyph+0x228>
    1c1a:	85 c0       	rjmp	.+266    	; 0x1d26 <u8g2_DrawGlyph+0x332>
    1c1c:	e3 e0       	ldi	r30, 0x03	; 3
    1c1e:	7e 16       	cp	r7, r30
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <u8g2_DrawGlyph+0x230>
    1c22:	95 c0       	rjmp	.+298    	; 0x1d4e <u8g2_DrawGlyph+0x35a>
u8g2_DrawGlyph():
    1c24:	bc 01       	movw	r22, r24
    1c26:	96 01       	movw	r18, r12
    1c28:	3c c0       	rjmp	.+120    	; 0x1ca2 <u8g2_DrawGlyph+0x2ae>
u8g2_font_get_glyph_data():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:647
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
      y0 = decode->target_y;
      x1 = x0;
      y1 = y0;
    1c2a:	f9 01       	movw	r30, r18
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:646
#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
      y0 = decode->target_y;
      x1 = x0;
    1c2c:	24 91       	lpm	r18, Z
    1c2e:	82 0f       	add	r24, r18
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:807
	break;
      if ( u8x8_pgm_read( font ) == encoding )
      {
	return font+2;	/* skip encoding and glyph size */
      }
      font += u8x8_pgm_read( font + 1 );
    1c30:	91 1d       	adc	r25, r1
    1c32:	21 cf       	rjmp	.-446    	; 0x1a76 <u8g2_DrawGlyph+0x82>
    1c34:	fe 01       	movw	r30, r28
    1c36:	ee 57       	subi	r30, 0x7E	; 126
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:825
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
    1c3a:	00 81       	ld	r16, Z
    1c3c:	11 81       	ldd	r17, Z+1	; 0x01
    1c3e:	08 0f       	add	r16, r24
    1c40:	19 1f       	adc	r17, r25
u8g2_DrawGlyph():
    1c42:	68 01       	movw	r12, r16
u8g2_font_get_glyph_data():
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	c6 01       	movw	r24, r12
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:826
    unicode_lookup_table = font; 
    1c48:	c9 de       	rcall	.-622    	; 0x19dc <u8g2_font_get_word>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:831
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
    1c4a:	08 0f       	add	r16, r24
    1c4c:	19 1f       	adc	r17, r25
    1c4e:	62 e0       	ldi	r22, 0x02	; 2
    1c50:	c6 01       	movw	r24, r12
    1c52:	c4 de       	rcall	.-632    	; 0x19dc <u8g2_font_get_word>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:832
      e = u8g2_font_get_word(unicode_lookup_table, 2);
    1c54:	f4 e0       	ldi	r31, 0x04	; 4
    1c56:	cf 0e       	add	r12, r31
    1c58:	d1 1c       	adc	r13, r1
    1c5a:	8e 15       	cp	r24, r14
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:833
      unicode_lookup_table+=4;
    1c5c:	9f 05       	cpc	r25, r15
    1c5e:	90 f3       	brcs	.-28     	; 0x1c44 <u8g2_DrawGlyph+0x250>
    1c60:	f8 01       	movw	r30, r16
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:834
    } while( e < encoding );
    1c62:	84 91       	lpm	r24, Z
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	98 2f       	mov	r25, r24
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:839
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
    1c68:	88 27       	eor	r24, r24
    1c6a:	31 96       	adiw	r30, 0x01	; 1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:840
      e <<= 8;
    1c6c:	e4 91       	lpm	r30, Z
    1c6e:	8e 2b       	or	r24, r30
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:841
      e |= u8x8_pgm_read( font + 1 );
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <u8g2_DrawGlyph+0x282>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:849
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
    1c74:	07 cf       	rjmp	.-498    	; 0x1a84 <u8g2_DrawGlyph+0x90>
    1c76:	e8 16       	cp	r14, r24
    1c78:	f9 06       	cpc	r15, r25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:852
	break;
  
      if ( e == encoding )
    1c7a:	19 f4       	brne	.+6      	; 0x1c82 <u8g2_DrawGlyph+0x28e>
    1c7c:	c8 01       	movw	r24, r16
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:859
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
    1c7e:	03 96       	adiw	r24, 0x03	; 3
    1c80:	50 cf       	rjmp	.-352    	; 0x1b22 <u8g2_DrawGlyph+0x12e>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:861
      }
      font += u8x8_pgm_read( font + 2 );
    1c82:	f8 01       	movw	r30, r16
    1c84:	32 96       	adiw	r30, 0x02	; 2
    1c86:	e4 91       	lpm	r30, Z
    1c88:	0e 0f       	add	r16, r30
    1c8a:	11 1d       	adc	r17, r1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:653
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
      {
	case 0:
	    x1 += decode->glyph_width;
    1c8c:	e9 cf       	rjmp	.-46     	; 0x1c60 <u8g2_DrawGlyph+0x26c>
u8g2_font_decode_glyph():
    1c8e:	96 01       	movw	r18, r12
    1c90:	26 0d       	add	r18, r6
    1c92:	31 1d       	adc	r19, r1
    1c94:	67 fc       	sbrc	r6, 7
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:654
	    y1 += h;
    1c96:	3a 95       	dec	r19
    1c98:	bc 01       	movw	r22, r24
    1c9a:	69 0d       	add	r22, r9
    1c9c:	71 1d       	adc	r23, r1
    1c9e:	97 fc       	sbrc	r9, 7
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:682
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
    1ca0:	7a 95       	dec	r23
    1ca2:	8b 01       	movw	r16, r22
    1ca4:	ac 01       	movw	r20, r24
    1ca6:	b6 01       	movw	r22, r12
    1ca8:	ce 01       	movw	r24, r28
    1caa:	44 dc       	rcall	.-1912   	; 0x1534 <u8g2_IsIntersection>
    1cac:	88 23       	and	r24, r24
    1cae:	41 f1       	breq	.+80     	; 0x1d00 <u8g2_DrawGlyph+0x30c>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:688
	return d;
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
    1cb0:	f7 01       	movw	r30, r14
    1cb2:	16 82       	std	Z+6, r1	; 0x06
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:689
    decode->y = 0;
    1cb4:	17 82       	std	Z+7, r1	; 0x07
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:694
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
    1cb6:	8e 01       	movw	r16, r28
    1cb8:	01 59       	subi	r16, 0x91	; 145
    1cba:	1f 4f       	sbci	r17, 0xFF	; 255
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:695
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
    1cbc:	6e 01       	movw	r12, r28
    1cbe:	f0 e7       	ldi	r31, 0x70	; 112
    1cc0:	cf 0e       	add	r12, r31
    1cc2:	d1 1c       	adc	r13, r1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:694
    decode->y = 0;
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
    1cc4:	f8 01       	movw	r30, r16
    1cc6:	60 81       	ld	r22, Z
    1cc8:	c7 01       	movw	r24, r14
    1cca:	5d de       	rcall	.-838    	; 0x1986 <u8g2_font_decode_get_unsigned_bits>
    1ccc:	68 2e       	mov	r6, r24
    1cce:	f6 01       	movw	r30, r12
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:695
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
    1cd0:	60 81       	ld	r22, Z
    1cd2:	c7 01       	movw	r24, r14
    1cd4:	58 de       	rcall	.-848    	; 0x1986 <u8g2_font_decode_get_unsigned_bits>
    1cd6:	78 2e       	mov	r7, r24
    1cd8:	40 e0       	ldi	r20, 0x00	; 0
    1cda:	66 2d       	mov	r22, r6
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:698
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
    1cdc:	ce 01       	movw	r24, r28
    1cde:	f6 dd       	rcall	.-1044   	; 0x18cc <u8g2_font_decode_len>
    1ce0:	41 e0       	ldi	r20, 0x01	; 1
    1ce2:	67 2d       	mov	r22, r7
    1ce4:	ce 01       	movw	r24, r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:699
	u8g2_font_decode_len(u8g2, b, 1);
    1ce6:	f2 dd       	rcall	.-1052   	; 0x18cc <u8g2_font_decode_len>
    1ce8:	61 e0       	ldi	r22, 0x01	; 1
    1cea:	c7 01       	movw	r24, r14
    1cec:	4c de       	rcall	.-872    	; 0x1986 <u8g2_font_decode_get_unsigned_bits>
    1cee:	81 11       	cpse	r24, r1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:700
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
    1cf0:	f3 cf       	rjmp	.-26     	; 0x1cd8 <u8g2_DrawGlyph+0x2e4>
    1cf2:	f7 01       	movw	r30, r14
    1cf4:	87 81       	ldd	r24, Z+7	; 0x07
    1cf6:	89 15       	cp	r24, r9
    1cf8:	2c f3       	brlt	.-54     	; 0x1cc4 <u8g2_DrawGlyph+0x2d0>
    1cfa:	84 85       	ldd	r24, Z+12	; 0x0c
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:702

      if ( decode->y >= h )
    1cfc:	f5 01       	movw	r30, r10
    1cfe:	80 83       	st	Z, r24
u8g2_font_draw_glyph():
    1d00:	88 2d       	mov	r24, r8
    1d02:	88 0c       	add	r8, r8
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:707
	break;
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
    1d04:	99 0b       	sbc	r25, r25
    1d06:	c0 ce       	rjmp	.-640    	; 0x1a88 <u8g2_DrawGlyph+0x94>
u8g2_font_decode_glyph():
    1d08:	09 19       	sub	r16, r9
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:879
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
  if ( glyph_data != NULL )
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
    1d0a:	11 09       	sbc	r17, r1
    1d0c:	97 fc       	sbrc	r9, 7
    1d0e:	13 95       	inc	r17
    1d10:	96 01       	movw	r18, r12
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:658
	    x1 += decode->glyph_width;
	    y1 += h;
	    break;
	case 1:
	    x0 -= h;
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    1d12:	2f 5f       	subi	r18, 0xFF	; 255
    1d14:	3f 4f       	sbci	r19, 0xFF	; 255
    1d16:	bc 01       	movw	r22, r24
    1d18:	66 0d       	add	r22, r6
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:659
	    x1++;
    1d1a:	71 1d       	adc	r23, r1
    1d1c:	67 fc       	sbrc	r6, 7
    1d1e:	7a 95       	dec	r23
u8g2_DrawGlyph():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:660
	    y1 += decode->glyph_width;
    1d20:	c0 0e       	add	r12, r16
    1d22:	d1 1e       	adc	r13, r17
    1d24:	be cf       	rjmp	.-132    	; 0x1ca2 <u8g2_DrawGlyph+0x2ae>
u8g2_font_decode_glyph():
    1d26:	a8 01       	movw	r20, r16
    1d28:	46 19       	sub	r20, r6
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:658
	    x1 += decode->glyph_width;
	    y1 += h;
	    break;
	case 1:
	    x0 -= h;
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    1d2a:	51 09       	sbc	r21, r1
    1d2c:	67 fc       	sbrc	r6, 7
    1d2e:	53 95       	inc	r21
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:664
	    x1++;
	    y1 += decode->glyph_width;
	    break;
	case 2:
	    x0 -= decode->glyph_width;
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    1d30:	96 01       	movw	r18, r12
    1d32:	2f 5f       	subi	r18, 0xFF	; 255
    1d34:	3f 4f       	sbci	r19, 0xFF	; 255
    1d36:	09 19       	sub	r16, r9
    1d38:	11 09       	sbc	r17, r1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:665
	    x1++;
    1d3a:	97 fc       	sbrc	r9, 7
    1d3c:	13 95       	inc	r17
    1d3e:	bc 01       	movw	r22, r24
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:667
	    y0 -= h;
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    1d40:	6f 5f       	subi	r22, 0xFF	; 255
    1d42:	7f 4f       	sbci	r23, 0xFF	; 255
u8g2_DrawGlyph():
    1d44:	80 0f       	add	r24, r16
    1d46:	91 1f       	adc	r25, r17
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:668
	    y1++;
    1d48:	c4 0e       	add	r12, r20
    1d4a:	d5 1e       	adc	r13, r21
    1d4c:	aa cf       	rjmp	.-172    	; 0x1ca2 <u8g2_DrawGlyph+0x2ae>
u8g2_font_decode_glyph():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:667
	case 2:
	    x0 -= decode->glyph_width;
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
	    x1++;
	    y0 -= h;
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    1d4e:	96 01       	movw	r18, r12
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:664
	    x1++;
	    y1 += decode->glyph_width;
	    break;
	case 2:
	    x0 -= decode->glyph_width;
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    1d50:	29 0d       	add	r18, r9
    1d52:	31 1d       	adc	r19, r1
    1d54:	97 fc       	sbrc	r9, 7
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:671
	    y0 -= h;
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
	    y1++;
	    break;	  
	case 3:
	    x1 += h;
    1d56:	3a 95       	dec	r19
    1d58:	06 19       	sub	r16, r6
    1d5a:	11 09       	sbc	r17, r1
    1d5c:	67 fc       	sbrc	r6, 7
    1d5e:	13 95       	inc	r17
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:673
	    y0 -= decode->glyph_width;
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    1d60:	bc 01       	movw	r22, r24
    1d62:	6f 5f       	subi	r22, 0xFF	; 255
    1d64:	7f 4f       	sbci	r23, 0xFF	; 255
u8g2_DrawGlyph():
    1d66:	80 0f       	add	r24, r16
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:674
	    y1++;
    1d68:	91 1f       	adc	r25, r17
    1d6a:	9b cf       	rjmp	.-202    	; 0x1ca2 <u8g2_DrawGlyph+0x2ae>

00001d6c <u8g2_draw_string.constprop.60>:
u8g2_draw_string.constprop.60():
    1d6c:	cf 92       	push	r12
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:673
	    y1++;
	    break;	  
	case 3:
	    x1 += h;
	    y0 -= decode->glyph_width;
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    1d6e:	df 92       	push	r13
    1d70:	ef 92       	push	r14
    1d72:	ff 92       	push	r15
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:967
  y += 2*u8g2->font_calc_vref(u8g2);
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	cf 93       	push	r28
    1d7a:	df 93       	push	r29
    1d7c:	8c 01       	movw	r16, r24
u8x8_utf8_init():
    1d7e:	10 92 2b 3d 	sts	0x3D2B, r1	; 0x803d2b <u8g2+0x1c>
    1d82:	7b 01       	movw	r14, r22
u8g2_draw_string.constprop.60():
    1d84:	d1 2c       	mov	r13, r1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_8x8.c:287
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    1d86:	c1 2c       	mov	r12, r1
u8x8_utf8_init():
    1d88:	d0 e0       	ldi	r29, 0x00	; 0
    1d8a:	c0 e0       	ldi	r28, 0x00	; 0
u8g2_draw_string.constprop.60():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:972
{
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  sum = 0;
    1d8c:	f7 01       	movw	r30, r14
    1d8e:	61 91       	ld	r22, Z+
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_8x8.c:287
    1d90:	7f 01       	movw	r14, r30
    1d92:	e0 91 15 3d 	lds	r30, 0x3D15	; 0x803d15 <u8g2+0x6>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:975
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    1d96:	f0 91 16 3d 	lds	r31, 0x3D16	; 0x803d16 <u8g2+0x7>
    1d9a:	83 e1       	ldi	r24, 0x13	; 19
    1d9c:	9d e3       	ldi	r25, 0x3D	; 61
    1d9e:	09 95       	icall
    1da0:	8f 3f       	cpi	r24, 0xFF	; 255
    1da2:	98 07       	cpc	r25, r24
    1da4:	11 f1       	breq	.+68     	; 0x1dea <u8g2_draw_string.constprop.60+0x7e>
    1da6:	8e 3f       	cpi	r24, 0xFE	; 254
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:976
    if ( e == 0x0ffff )
    1da8:	2f ef       	ldi	r18, 0xFF	; 255
    1daa:	92 07       	cpc	r25, r18
    1dac:	79 f3       	breq	.-34     	; 0x1d8c <u8g2_draw_string.constprop.60+0x20>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:979
      break;
    str++;
    if ( e != 0x0fffe )
    1dae:	9c 01       	movw	r18, r24
    1db0:	a8 01       	movw	r20, r16
    1db2:	be 01       	movw	r22, r28
    1db4:	83 e1       	ldi	r24, 0x13	; 19
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:981
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
    1db6:	9d e3       	ldi	r25, 0x3D	; 61
    1db8:	1d de       	rcall	.-966    	; 0x19f4 <u8g2_DrawGlyph>
    1dba:	20 91 7f 3d 	lds	r18, 0x3D7F	; 0x803d7f <u8g2+0x70>
    1dbe:	21 30       	cpi	r18, 0x01	; 1
    1dc0:	59 f0       	breq	.+22     	; 0x1dd8 <u8g2_draw_string.constprop.60+0x6c>
    1dc2:	38 f0       	brcs	.+14     	; 0x1dd2 <u8g2_draw_string.constprop.60+0x66>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:984
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
    1dc4:	22 30       	cpi	r18, 0x02	; 2
    1dc6:	59 f0       	breq	.+22     	; 0x1dde <u8g2_draw_string.constprop.60+0x72>
    1dc8:	23 30       	cpi	r18, 0x03	; 3
    1dca:	61 f0       	breq	.+24     	; 0x1de4 <u8g2_draw_string.constprop.60+0x78>
    1dcc:	c8 0e       	add	r12, r24
    1dce:	d9 1e       	adc	r13, r25
    1dd0:	dd cf       	rjmp	.-70     	; 0x1d8c <u8g2_draw_string.constprop.60+0x20>
    1dd2:	c8 0f       	add	r28, r24
    1dd4:	d9 1f       	adc	r29, r25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1010

#else
      x += delta;
#endif

      sum += delta;    
    1dd6:	fa cf       	rjmp	.-12     	; 0x1dcc <u8g2_draw_string.constprop.60+0x60>
    1dd8:	08 0f       	add	r16, r24
    1dda:	19 1f       	adc	r17, r25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:987
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
      {
	case 0:
	  x += delta;
    1ddc:	f7 cf       	rjmp	.-18     	; 0x1dcc <u8g2_draw_string.constprop.60+0x60>
    1dde:	c8 1b       	sub	r28, r24
    1de0:	d9 0b       	sbc	r29, r25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:990
	  break;
	case 1:
	  y += delta;
    1de2:	f4 cf       	rjmp	.-24     	; 0x1dcc <u8g2_draw_string.constprop.60+0x60>
    1de4:	08 1b       	sub	r16, r24
    1de6:	19 0b       	sbc	r17, r25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:993
	  break;
	case 2:
	  x -= delta;
    1de8:	f1 cf       	rjmp	.-30     	; 0x1dcc <u8g2_draw_string.constprop.60+0x60>
    1dea:	c6 01       	movw	r24, r12
    1dec:	df 91       	pop	r29
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:996
	  break;
	case 3:
	  y -= delta;
    1dee:	cf 91       	pop	r28
    1df0:	1f 91       	pop	r17
    1df2:	0f 91       	pop	r16
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1014

      sum += delta;    
    }
  }
  return sum;
}
    1df4:	ff 90       	pop	r15
    1df6:	ef 90       	pop	r14
    1df8:	df 90       	pop	r13
    1dfa:	cf 90       	pop	r12
    1dfc:	08 95       	ret

00001dfe <u8g2_SetBufferCurrTileRow>:
u8g2_SetBufferCurrTileRow():
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	ec 01       	movw	r28, r24
    1e04:	6b af       	std	Y+59, r22	; 0x3b
    1e06:	ee a9       	ldd	r30, Y+54	; 0x36
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:101
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
    1e08:	ff a9       	ldd	r31, Y+55	; 0x37
    1e0a:	01 90       	ld	r0, Z+
    1e0c:	f0 81       	ld	r31, Z
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:102
  u8g2->tile_curr_row = row;
    1e0e:	e0 2d       	mov	r30, r0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:103
  u8g2->cb->update_dimension(u8g2);
    1e10:	09 95       	icall
    1e12:	ee a9       	ldd	r30, Y+54	; 0x36
    1e14:	ff a9       	ldd	r31, Y+55	; 0x37
    1e16:	02 80       	ldd	r0, Z+2	; 0x02
    1e18:	f3 81       	ldd	r31, Z+3	; 0x03
    1e1a:	e0 2d       	mov	r30, r0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:104
  u8g2->cb->update_page_win(u8g2);
    1e1c:	ce 01       	movw	r24, r28
    1e1e:	df 91       	pop	r29
    1e20:	cf 91       	pop	r28
    1e22:	09 94       	ijmp

00001e24 <u8g2_send_buffer>:
u8g2_send_buffer():
    1e24:	af 92       	push	r10
    1e26:	bf 92       	push	r11
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:105
}
    1e28:	cf 92       	push	r12
    1e2a:	df 92       	push	r13
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:104
/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
  u8g2->tile_curr_row = row;
  u8g2->cb->update_dimension(u8g2);
  u8g2->cb->update_page_win(u8g2);
    1e2c:	ef 92       	push	r14
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:73
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
    1e2e:	ff 92       	push	r15
    1e30:	0f 93       	push	r16
    1e32:	1f 93       	push	r17
    1e34:	cf 93       	push	r28
    1e36:	df 93       	push	r29
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	25 97       	sbiw	r28, 0x05	; 5
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	8c 01       	movw	r16, r24
    1e44:	dc 01       	movw	r26, r24
    1e46:	da 96       	adiw	r26, 0x3a	; 58
    1e48:	ac 90       	ld	r10, X
    1e4a:	da 97       	sbiw	r26, 0x3a	; 58
    1e4c:	db 96       	adiw	r26, 0x3b	; 59
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:80
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
    1e4e:	ec 90       	ld	r14, X
    1e50:	db 97       	sbiw	r26, 0x3b	; 59
    1e52:	ed 91       	ld	r30, X+
    1e54:	fc 91       	ld	r31, X
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:81
  dest_row = u8g2->tile_curr_row;
    1e56:	b1 88       	ldd	r11, Z+17	; 0x11
    1e58:	fe 2c       	mov	r15, r14
    1e5a:	d1 2c       	mov	r13, r1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:82
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    1e5c:	c1 2c       	mov	r12, r1
u8g2_send_tile_row():
    1e5e:	d8 01       	movw	r26, r16
    1e60:	ed 91       	ld	r30, X+
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:81
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
    1e62:	fc 91       	ld	r31, X
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:82
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    1e64:	11 97       	sbiw	r26, 0x01	; 1
    1e66:	80 89       	ldd	r24, Z+16	; 0x10
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:57
{
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    1e68:	d8 96       	adiw	r26, 0x38	; 56
    1e6a:	2d 91       	ld	r18, X+
    1e6c:	3c 91       	ld	r19, X
u8x8_DrawTile():
    1e6e:	1c 82       	std	Y+4, r1	; 0x04
    1e70:	fd 82       	std	Y+5, r15	; 0x05
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:59
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
    1e72:	8b 83       	std	Y+3, r24	; 0x03
u8g2_send_tile_row():
    1e74:	b8 e0       	ldi	r27, 0x08	; 8
    1e76:	8b 9f       	mul	r24, r27
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:85
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
  u8x8_tile_t tile;
  tile.x_pos = x;
    1e78:	c0 01       	movw	r24, r0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:86
  tile.y_pos = y;
    1e7a:	11 24       	eor	r1, r1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:87
  tile.cnt = cnt;
    1e7c:	8c 9d       	mul	r24, r12
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:61
  offset *= w;
  offset *= 8;
    1e7e:	a0 01       	movw	r20, r0
    1e80:	8d 9d       	mul	r24, r13
    1e82:	50 0d       	add	r21, r0
    1e84:	9c 9d       	mul	r25, r12
    1e86:	50 0d       	add	r21, r0
    1e88:	11 24       	eor	r1, r1
    1e8a:	24 0f       	add	r18, r20
    1e8c:	35 1f       	adc	r19, r21
u8x8_DrawTile():
    1e8e:	29 83       	std	Y+1, r18	; 0x01
    1e90:	3a 83       	std	Y+2, r19	; 0x02
    1e92:	d8 01       	movw	r26, r16
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:62
  ptr += offset;
    1e94:	14 96       	adiw	r26, 0x04	; 4
    1e96:	ed 91       	ld	r30, X+
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:88
  tile.tile_ptr = tile_ptr;
    1e98:	fc 91       	ld	r31, X
    1e9a:	9e 01       	movw	r18, r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:89
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
    1e9c:	2f 5f       	subi	r18, 0xFF	; 255
    1e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea0:	41 e0       	ldi	r20, 0x01	; 1
    1ea2:	6f e0       	ldi	r22, 0x0F	; 15
    1ea4:	c8 01       	movw	r24, r16
    1ea6:	09 95       	icall
u8g2_send_buffer():
    1ea8:	f3 94       	inc	r15
    1eaa:	8f 2d       	mov	r24, r15
    1eac:	8e 19       	sub	r24, r14
    1eae:	8a 15       	cp	r24, r10
    1eb0:	28 f4       	brcc	.+10     	; 0x1ebc <u8g2_send_buffer+0x98>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:88
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
    1eb2:	bf ef       	ldi	r27, 0xFF	; 255
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:89
  } while( src_row < src_max && dest_row < dest_max );
    1eb4:	cb 1a       	sub	r12, r27
    1eb6:	db 0a       	sbc	r13, r27
    1eb8:	fb 14       	cp	r15, r11
    1eba:	88 f2       	brcs	.-94     	; 0x1e5e <u8g2_send_buffer+0x3a>
    1ebc:	25 96       	adiw	r28, 0x05	; 5
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	df 91       	pop	r29
    1ec4:	cf 91       	pop	r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:90
}
    1ec6:	1f 91       	pop	r17
    1ec8:	0f 91       	pop	r16
    1eca:	ff 90       	pop	r15
    1ecc:	ef 90       	pop	r14
    1ece:	df 90       	pop	r13
    1ed0:	cf 90       	pop	r12
    1ed2:	bf 90       	pop	r11
    1ed4:	af 90       	pop	r10
    1ed6:	08 95       	ret

00001ed8 <RLhelper_SX1278::setDint(unsigned char)>:
_ZN15RLhelper_SX12787setDintEh():
    1ed8:	fc 01       	movw	r30, r24
    1eda:	66 83       	std	Z+6, r22	; 0x06
    1edc:	08 95       	ret

00001ede <u8g2_prepare()>:
_Z12u8g2_preparev():
    1ede:	80 91 6d 3d 	lds	r24, 0x3D6D	; 0x803d6d <u8g2+0x5e>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:486
	}
}

void RLhelper_SX1278::setDint(uint8_t pin)
{
	_dint = pin;
    1ee2:	90 91 6e 3d 	lds	r25, 0x3D6E	; 0x803d6e <u8g2+0x5f>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:487
}
    1ee6:	8c 57       	subi	r24, 0x7C	; 124
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1281

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
  if ( u8g2->font != font )
    1ee8:	90 40       	sbci	r25, 0x00	; 0
    1eea:	09 f4       	brne	.+2      	; 0x1eee <u8g2_prepare()+0x10>
    1eec:	91 c0       	rjmp	.+290    	; 0x2010 <u8g2_prepare()+0x132>
    1eee:	ec e7       	ldi	r30, 0x7C	; 124
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	e0 93 6d 3d 	sts	0x3D6D, r30	; 0x803d6d <u8g2+0x5e>
    1ef6:	f0 93 6e 3d 	sts	0x3D6E, r31	; 0x803d6e <u8g2+0x5f>
u8g2_font_get_byte():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1287
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    1efa:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    1efc:	e0 93 80 3d 	sts	0x3D80, r30	; 0x803d80 <u8g2+0x71>
u8g2_font_get_byte():
    1f00:	ed e7       	ldi	r30, 0x7D	; 125
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:114
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1f04:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:134
/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
    1f06:	e0 93 81 3d 	sts	0x3D81, r30	; 0x803d81 <u8g2+0x72>
u8g2_font_get_byte():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:114
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1f0a:	ee e7       	ldi	r30, 0x7E	; 126
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:135
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
    1f10:	e0 93 82 3d 	sts	0x3D82, r30	; 0x803d82 <u8g2+0x73>
u8g2_font_get_byte():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:114
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1f14:	ef e7       	ldi	r30, 0x7F	; 127
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:136
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
    1f1a:	e0 93 83 3d 	sts	0x3D83, r30	; 0x803d83 <u8g2+0x74>
u8g2_font_get_byte():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:114
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1f1e:	e0 e8       	ldi	r30, 0x80	; 128
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:137
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
    1f24:	e0 93 84 3d 	sts	0x3D84, r30	; 0x803d84 <u8g2+0x75>
u8g2_font_get_byte():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:114
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1f28:	e1 e8       	ldi	r30, 0x81	; 129
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:140
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
    1f2e:	e0 93 85 3d 	sts	0x3D85, r30	; 0x803d85 <u8g2+0x76>
u8g2_font_get_byte():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:114
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1f32:	e2 e8       	ldi	r30, 0x82	; 130
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:141
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
    1f38:	e0 93 86 3d 	sts	0x3D86, r30	; 0x803d86 <u8g2+0x77>
u8g2_font_get_byte():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:114
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1f3c:	e3 e8       	ldi	r30, 0x83	; 131
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:142
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
    1f40:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    1f42:	e0 93 87 3d 	sts	0x3D87, r30	; 0x803d87 <u8g2+0x78>
u8g2_font_get_byte():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:114
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1f46:	e4 e8       	ldi	r30, 0x84	; 132
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:143
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
    1f4a:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:114
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1f4c:	e0 93 88 3d 	sts	0x3D88, r30	; 0x803d88 <u8g2+0x79>
u8g2_font_get_byte():
    1f50:	e5 e8       	ldi	r30, 0x85	; 133
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:144
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:114
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1f56:	e0 93 89 3d 	sts	0x3D89, r30	; 0x803d89 <u8g2+0x7a>
u8g2_font_get_byte():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:147
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
    1f5a:	e6 e8       	ldi	r30, 0x86	; 134
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:114
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1f5e:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    1f60:	e0 93 8a 3d 	sts	0x3D8A, r30	; 0x803d8a <u8g2+0x7b>
u8g2_font_get_byte():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:148
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
    1f64:	e7 e8       	ldi	r30, 0x87	; 135
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:114
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1f68:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    1f6a:	e0 93 8b 3d 	sts	0x3D8B, r30	; 0x803d8b <u8g2+0x7c>
u8g2_font_get_byte():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:149
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
  font_info->x_offset = u8g2_font_get_byte(font, 11);
    1f6e:	e8 e8       	ldi	r30, 0x88	; 136
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:114
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1f72:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    1f74:	e0 93 8c 3d 	sts	0x3D8C, r30	; 0x803d8c <u8g2+0x7d>
u8g2_font_get_byte():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:150
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
  font_info->x_offset = u8g2_font_get_byte(font, 11);
  font_info->y_offset = u8g2_font_get_byte(font, 12);
    1f78:	e9 e8       	ldi	r30, 0x89	; 137
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:114
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1f7c:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    1f7e:	e0 93 8d 3d 	sts	0x3D8D, r30	; 0x803d8d <u8g2+0x7e>
u8g2_font_get_byte():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:153
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
  font_info->x_offset = u8g2_font_get_byte(font, 11);
  font_info->y_offset = u8g2_font_get_byte(font, 12);
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
    1f82:	ea e8       	ldi	r30, 0x8A	; 138
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:114
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1f86:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    1f88:	e0 93 8e 3d 	sts	0x3D8E, r30	; 0x803d8e <u8g2+0x7f>
u8g2_font_get_byte():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:154
  font_info->x_offset = u8g2_font_get_byte(font, 11);
  font_info->y_offset = u8g2_font_get_byte(font, 12);
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
  font_info->descent_g = u8g2_font_get_byte(font, 14);
    1f8c:	eb e8       	ldi	r30, 0x8B	; 139
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:114
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1f90:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    1f92:	e0 93 8f 3d 	sts	0x3D8F, r30	; 0x803d8f <u8g2+0x80>
u8g2_font_get_byte():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:155
  font_info->y_offset = u8g2_font_get_byte(font, 12);
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
  font_info->descent_g = u8g2_font_get_byte(font, 14);
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
    1f96:	ec e8       	ldi	r30, 0x8C	; 140
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:114
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1f9a:	e4 91       	lpm	r30, Z
u8g2_read_font_info():
    1f9c:	e0 93 90 3d 	sts	0x3D90, r30	; 0x803d90 <u8g2+0x81>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:156
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
  font_info->descent_g = u8g2_font_get_byte(font, 14);
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
  font_info->descent_para = u8g2_font_get_byte(font, 16);
    1fa0:	61 e1       	ldi	r22, 0x11	; 17
    1fa2:	8c e7       	ldi	r24, 0x7C	; 124
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:159
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	1a dd       	rcall	.-1484   	; 0x19dc <u8g2_font_get_word>
    1fa8:	80 93 91 3d 	sts	0x3D91, r24	; 0x803d91 <u8g2+0x82>
    1fac:	90 93 92 3d 	sts	0x3D92, r25	; 0x803d92 <u8g2+0x83>
    1fb0:	63 e1       	ldi	r22, 0x13	; 19
    1fb2:	8c e7       	ldi	r24, 0x7C	; 124
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:160
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
    1fb6:	12 dd       	rcall	.-1500   	; 0x19dc <u8g2_font_get_word>
    1fb8:	80 93 93 3d 	sts	0x3D93, r24	; 0x803d93 <u8g2+0x84>
    1fbc:	90 93 94 3d 	sts	0x3D94, r25	; 0x803d94 <u8g2+0x85>
    1fc0:	65 e1       	ldi	r22, 0x15	; 21
    1fc2:	8c e7       	ldi	r24, 0x7C	; 124
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	0a dd       	rcall	.-1516   	; 0x19dc <u8g2_font_get_word>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:164
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
    1fc8:	80 93 95 3d 	sts	0x3D95, r24	; 0x803d95 <u8g2+0x86>
    1fcc:	90 93 96 3d 	sts	0x3D96, r25	; 0x803d96 <u8g2+0x87>
u8g2_UpdateRefHeight():
    1fd0:	80 91 6d 3d 	lds	r24, 0x3D6D	; 0x803d6d <u8g2+0x5e>
    1fd4:	90 91 6e 3d 	lds	r25, 0x3D6E	; 0x803d6e <u8g2+0x5f>
    1fd8:	89 2b       	or	r24, r25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1183

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
  if ( u8g2->font == NULL )
    1fda:	d1 f0       	breq	.+52     	; 0x2010 <u8g2_prepare()+0x132>
    1fdc:	80 91 8d 3d 	lds	r24, 0x3D8D	; 0x803d8d <u8g2+0x7e>
    1fe0:	80 93 99 3d 	sts	0x3D99, r24	; 0x803d99 <u8g2+0x8a>
    1fe4:	40 91 8e 3d 	lds	r20, 0x3D8E	; 0x803d8e <u8g2+0x7f>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1185
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
    1fe8:	40 93 9a 3d 	sts	0x3D9A, r20	; 0x803d9a <u8g2+0x8b>
    1fec:	90 91 98 3d 	lds	r25, 0x3D98	; 0x803d98 <u8g2+0x89>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1186
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
    1ff0:	99 23       	and	r25, r25
    1ff2:	71 f0       	breq	.+28     	; 0x2010 <u8g2_prepare()+0x132>
    1ff4:	91 30       	cpi	r25, 0x01	; 1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1187
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
    1ff6:	a1 f5       	brne	.+104    	; 0x2060 <u8g2_prepare()+0x182>
    1ff8:	90 91 8f 3d 	lds	r25, 0x3D8F	; 0x803d8f <u8g2+0x80>
    1ffc:	89 17       	cp	r24, r25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1190
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
    1ffe:	14 f4       	brge	.+4      	; 0x2004 <u8g2_prepare()+0x126>
    2000:	90 93 99 3d 	sts	0x3D99, r25	; 0x803d99 <u8g2+0x8a>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1192
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
    2004:	80 91 90 3d 	lds	r24, 0x3D90	; 0x803d90 <u8g2+0x81>
    2008:	84 17       	cp	r24, r20
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1193
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
    200a:	14 f4       	brge	.+4      	; 0x2010 <u8g2_prepare()+0x132>
    200c:	80 93 9a 3d 	sts	0x3D9A, r24	; 0x803d9a <u8g2+0x8b>
u8g2_SetFontRefHeightExtendedText():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1194
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	80 93 98 3d 	sts	0x3D98, r24	; 0x803d98 <u8g2+0x89>
u8g2_UpdateRefHeight():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1195
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
    2016:	80 91 6d 3d 	lds	r24, 0x3D6D	; 0x803d6d <u8g2+0x5e>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1214
  u8g2_UpdateRefHeight(u8g2);
}

void u8g2_SetFontRefHeightExtendedText(u8g2_t *u8g2)
{
  u8g2->font_height_mode = U8G2_FONT_HEIGHT_MODE_XTEXT;
    201a:	90 91 6e 3d 	lds	r25, 0x3D6E	; 0x803d6e <u8g2+0x5f>
    201e:	89 2b       	or	r24, r25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1183

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
  if ( u8g2->font == NULL )
    2020:	a1 f0       	breq	.+40     	; 0x204a <u8g2_prepare()+0x16c>
    2022:	20 91 8d 3d 	lds	r18, 0x3D8D	; 0x803d8d <u8g2+0x7e>
    2026:	20 93 99 3d 	sts	0x3D99, r18	; 0x803d99 <u8g2+0x8a>
    202a:	90 91 8e 3d 	lds	r25, 0x3D8E	; 0x803d8e <u8g2+0x7f>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1185
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
    202e:	90 93 9a 3d 	sts	0x3D9A, r25	; 0x803d9a <u8g2+0x8b>
    2032:	80 91 8f 3d 	lds	r24, 0x3D8F	; 0x803d8f <u8g2+0x80>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1186
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
    2036:	28 17       	cp	r18, r24
    2038:	14 f4       	brge	.+4      	; 0x203e <u8g2_prepare()+0x160>
    203a:	80 93 99 3d 	sts	0x3D99, r24	; 0x803d99 <u8g2+0x8a>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1192
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
    203e:	80 91 90 3d 	lds	r24, 0x3D90	; 0x803d90 <u8g2+0x81>
    2042:	89 17       	cp	r24, r25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1193
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
    2044:	14 f4       	brge	.+4      	; 0x204a <u8g2_prepare()+0x16c>
    2046:	80 93 9a 3d 	sts	0x3D9A, r24	; 0x803d9a <u8g2+0x8b>
_ZN4U8G212setDrawColorEh():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1194
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
    204a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <u8g2_SetDrawColor.constprop.43>
u8g2_SetFontPosTop():
    204e:	8b e2       	ldi	r24, 0x2B	; 43
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1195
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
    2050:	9c e0       	ldi	r25, 0x0C	; 12
    2052:	80 93 6f 3d 	sts	0x3D6F, r24	; 0x803d6f <u8g2+0x60>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:218
      { u8x8_RefreshDisplay(u8g2_GetU8x8(&u8g2)); }
    


    /* clib/u8g2.hvline.c */
    void setDrawColor(uint8_t color_index) { u8g2_SetDrawColor(&u8g2, color_index); }
    2056:	90 93 70 3d 	sts	0x3D70, r25	; 0x803d70 <u8g2+0x61>
u8g2_SetFontDirection():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1259
  return tmp;
}

void u8g2_SetFontPosTop(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_top;
    205a:	10 92 7f 3d 	sts	0x3D7F, r1	; 0x803d7f <u8g2+0x70>
_Z12u8g2_preparev():
    205e:	08 95       	ret
u8g2_UpdateRefHeight():
    2060:	30 91 8a 3d 	lds	r19, 0x3D8A	; 0x803d8a <u8g2+0x7b>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1559


void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)
{
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = dir;
    2064:	20 91 8c 3d 	lds	r18, 0x3D8C	; 0x803d8c <u8g2+0x7d>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:140
  u8g2.setFont(u8g2_font_7x13_mf);
  u8g2.setFontRefHeightExtendedText();
  u8g2.setDrawColor(1);
  u8g2.setFontPosTop();
  u8g2.setFontDirection(0);
}
    2068:	08 2e       	mov	r0, r24
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1199
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
    206a:	00 0c       	add	r0, r0
    206c:	99 0b       	sbc	r25, r25
    206e:	62 2f       	mov	r22, r18
    2070:	02 2e       	mov	r0, r18
    2072:	00 0c       	add	r0, r0
    2074:	77 0b       	sbc	r23, r23
    2076:	63 0f       	add	r22, r19
    2078:	71 1d       	adc	r23, r1
    207a:	37 fd       	sbrc	r19, 7
    207c:	7a 95       	dec	r23
    207e:	86 17       	cp	r24, r22
    2080:	97 07       	cpc	r25, r23
    2082:	1c f4       	brge	.+6      	; 0x208a <u8g2_prepare()+0x1ac>
    2084:	32 0f       	add	r19, r18
    2086:	30 93 99 3d 	sts	0x3D99, r19	; 0x803d99 <u8g2+0x8a>
    208a:	24 17       	cp	r18, r20
    208c:	0c f0       	brlt	.+2      	; 0x2090 <u8g2_prepare()+0x1b2>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1200
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
    208e:	c0 cf       	rjmp	.-128    	; 0x2010 <u8g2_prepare()+0x132>
    2090:	20 93 9a 3d 	sts	0x3D9A, r18	; 0x803d9a <u8g2+0x8b>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1201
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
    2094:	bd cf       	rjmp	.-134    	; 0x2010 <u8g2_prepare()+0x132>

00002096 <U8G2::write(unsigned char const*, unsigned int)>:
_ZN4U8G25writeEPKhj():
    2096:	cf 92       	push	r12
    2098:	df 92       	push	r13
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1202
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
    209a:	ef 92       	push	r14
    209c:	ff 92       	push	r15
    209e:	0f 93       	push	r16
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:364
	
      }
      return 1;
     }

    size_t write(const uint8_t *buffer, size_t size) {
    20a0:	1f 93       	push	r17
    20a2:	cf 93       	push	r28
    20a4:	df 93       	push	r29
    20a6:	6c 01       	movw	r12, r24
    20a8:	eb 01       	movw	r28, r22
    20aa:	7b 01       	movw	r14, r22
    20ac:	e4 0e       	add	r14, r20
    20ae:	f5 1e       	adc	r15, r21
    20b0:	10 e0       	ldi	r17, 0x00	; 0
    20b2:	00 e0       	ldi	r16, 0x00	; 0
    20b4:	ce 15       	cp	r28, r14
    20b6:	df 05       	cpc	r29, r15
    20b8:	61 f0       	breq	.+24     	; 0x20d2 <U8G2::write(unsigned char const*, unsigned int)+0x3c>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:365
      size_t cnt = 0;
    20ba:	69 91       	ld	r22, Y+
    20bc:	d6 01       	movw	r26, r12
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:366
      while( size > 0 ) {
    20be:	ed 91       	ld	r30, X+
    20c0:	fc 91       	ld	r31, X
    20c2:	01 90       	ld	r0, Z+
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:367
	cnt += write(*buffer++); 
    20c4:	f0 81       	ld	r31, Z
    20c6:	e0 2d       	mov	r30, r0
    20c8:	c6 01       	movw	r24, r12
    20ca:	09 95       	icall
    20cc:	08 0f       	add	r16, r24
    20ce:	19 1f       	adc	r17, r25
    20d0:	f1 cf       	rjmp	.-30     	; 0x20b4 <U8G2::write(unsigned char const*, unsigned int)+0x1e>
    20d2:	c8 01       	movw	r24, r16
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	1f 91       	pop	r17
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:371
	size--;
      }
      return cnt;
    }
    20da:	0f 91       	pop	r16
    20dc:	ff 90       	pop	r15
    20de:	ef 90       	pop	r14
    20e0:	df 90       	pop	r13
    20e2:	cf 90       	pop	r12
    20e4:	08 95       	ret

000020e6 <U8G2::write(unsigned char)>:
_ZN4U8G25writeEh():
    20e6:	cf 92       	push	r12
    20e8:	df 92       	push	r13
    20ea:	ef 92       	push	r14
    20ec:	ff 92       	push	r15
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:326
    void writeBufferPBM2(Print &p);
    void writeBufferXBM2(Print &p);
#endif

    /* virtual function for print base class */    
    size_t write(uint8_t v) {
    20ee:	0f 93       	push	r16
    20f0:	1f 93       	push	r17
    20f2:	cf 93       	push	r28
    20f4:	df 93       	push	r29
    20f6:	ec 01       	movw	r28, r24
    20f8:	6c 01       	movw	r12, r24
    20fa:	24 e0       	ldi	r18, 0x04	; 4
    20fc:	c2 0e       	add	r12, r18
    20fe:	d1 1c       	adc	r13, r1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:327
      uint16_t e = cpp_next_cb(&(u8g2.u8x8), v);
    2100:	fc 01       	movw	r30, r24
    2102:	e0 57       	subi	r30, 0x70	; 112
    2104:	ff 4f       	sbci	r31, 0xFF	; 255
    2106:	01 90       	ld	r0, Z+
    2108:	f0 81       	ld	r31, Z
    210a:	e0 2d       	mov	r30, r0
    210c:	c6 01       	movw	r24, r12
    210e:	09 95       	icall
    2110:	8e 3f       	cpi	r24, 0xFE	; 254
    2112:	ef ef       	ldi	r30, 0xFF	; 255
    2114:	9e 07       	cpc	r25, r30
    2116:	d0 f4       	brcc	.+52     	; 0x214c <U8G2::write(unsigned char)+0x66>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:329
      
      if ( e < 0x0fffe )
    2118:	8e 01       	movw	r16, r28
    211a:	0c 56       	subi	r16, 0x6C	; 108
    211c:	1f 4f       	sbci	r17, 0xFF	; 255
    211e:	f8 01       	movw	r30, r16
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:331
      {
	u8g2_uint_t delta = u8g2_DrawGlyph(&u8g2, tx, ty, e);
    2120:	40 81       	ld	r20, Z
    2122:	51 81       	ldd	r21, Z+1	; 0x01
    2124:	7e 01       	movw	r14, r28
    2126:	f2 e9       	ldi	r31, 0x92	; 146
    2128:	ef 0e       	add	r14, r31
    212a:	f1 1c       	adc	r15, r1
    212c:	f7 01       	movw	r30, r14
    212e:	60 81       	ld	r22, Z
    2130:	71 81       	ldd	r23, Z+1	; 0x01
    2132:	9c 01       	movw	r18, r24
    2134:	c6 01       	movw	r24, r12
    2136:	5e dc       	rcall	.-1860   	; 0x19f4 <u8g2_DrawGlyph>
    2138:	c0 59       	subi	r28, 0x90	; 144
    213a:	df 4f       	sbci	r29, 0xFF	; 255
    213c:	28 81       	ld	r18, Y
    213e:	21 30       	cpi	r18, 0x01	; 1
    2140:	c1 f0       	breq	.+48     	; 0x2172 <U8G2::write(unsigned char)+0x8c>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:334
	
#ifdef U8G2_WITH_FONT_ROTATION
	switch(u8g2.font_decode.dir)
    2142:	78 f0       	brcs	.+30     	; 0x2162 <U8G2::write(unsigned char)+0x7c>
    2144:	22 30       	cpi	r18, 0x02	; 2
    2146:	b9 f0       	breq	.+46     	; 0x2176 <U8G2::write(unsigned char)+0x90>
    2148:	23 30       	cpi	r18, 0x03	; 3
    214a:	e9 f0       	breq	.+58     	; 0x2186 <U8G2::write(unsigned char)+0xa0>
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	df 91       	pop	r29
    2152:	cf 91       	pop	r28
    2154:	1f 91       	pop	r17
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:362
	
	
	
      }
      return 1;
     }
    2156:	0f 91       	pop	r16
    2158:	ff 90       	pop	r15
    215a:	ef 90       	pop	r14
    215c:	df 90       	pop	r13
    215e:	cf 90       	pop	r12
    2160:	08 95       	ret
    2162:	f7 01       	movw	r30, r14
    2164:	20 81       	ld	r18, Z
    2166:	31 81       	ldd	r19, Z+1	; 0x01
    2168:	82 0f       	add	r24, r18
    216a:	93 1f       	adc	r25, r19
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:337
	
#ifdef U8G2_WITH_FONT_ROTATION
	switch(u8g2.font_decode.dir)
	{
	  case 0:
	    tx += delta;
    216c:	80 83       	st	Z, r24
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:340
	    break;
	  case 1:
	    ty += delta;
    216e:	91 83       	std	Z+1, r25	; 0x01
    2170:	ed cf       	rjmp	.-38     	; 0x214c <U8G2::write(unsigned char)+0x66>
    2172:	f8 01       	movw	r30, r16
    2174:	f7 cf       	rjmp	.-18     	; 0x2164 <U8G2::write(unsigned char)+0x7e>
    2176:	f7 01       	movw	r30, r14
    2178:	20 81       	ld	r18, Z
    217a:	31 81       	ldd	r19, Z+1	; 0x01
    217c:	28 1b       	sub	r18, r24
    217e:	39 0b       	sbc	r19, r25
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:343
	    break;
	  case 2:
	    tx -= delta;
    2180:	20 83       	st	Z, r18
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:346
	    break;
	  case 3:
	    ty -= delta;
    2182:	31 83       	std	Z+1, r19	; 0x01
    2184:	e3 cf       	rjmp	.-58     	; 0x214c <U8G2::write(unsigned char)+0x66>
    2186:	f8 01       	movw	r30, r16
    2188:	f7 cf       	rjmp	.-18     	; 0x2178 <U8G2::write(unsigned char)+0x92>

0000218a <Print::flush()>:
_ZN5Print5flushEv():
    218a:	08 95       	ret

0000218c <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	08 95       	ret

00002192 <SSD1306Device::ssd1306_send_data_start() [clone .constprop.14]>:
_ZN13SSD1306Device23ssd1306_send_data_startEv.constprop.14():
    2192:	eb e9       	ldi	r30, 0x9B	; 155
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/Print.h:95
    size_t println(void);

    int16_t printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));
    int16_t printf(const __FlashStringHelper *format, ...);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    2194:	f8 e3       	ldi	r31, 0x38	; 56
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/Print.h:65
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overridden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    2196:	88 e7       	ldi	r24, 0x78	; 120
    2198:	84 87       	std	Z+12, r24	; 0x0c
    219a:	15 86       	std	Z+13, r1	; 0x0d
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:484
  if (__builtin_constant_p(address) > 0x7F) {     // Compile-time check if address is actually 7 bit long
    badArg("Supplied address seems to be 8 bit. Only 7-bit-addresses are supported");
    return;
  }
  // set address of targeted client
  vars._clientAddress = address << 1;
    219c:	80 e4       	ldi	r24, 0x40	; 64
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	0c 94 56 08 	jmp	0x10ac	; 0x10ac <TwoWire::write(int) [clone .constprop.17]>

000021a4 <digitalWrite>:
digitalWrite():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:485
  (*txHead) = 0;  // fill buffer from 0
    21a4:	cf 93       	push	r28
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:139
#ifdef TINYWIRE
 	TinyWireM.beginTransmission(SSD1306);
	TinyWireM.write(0x40); // write data
#else 	
	Wire.beginTransmission(SSD1306);
	Wire.write(0x40);	//write data
    21a6:	df 93       	push	r29
    21a8:	82 31       	cpi	r24, 0x12	; 18
    21aa:	08 f0       	brcs	.+2      	; 0x21ae <digitalWrite+0xa>
    21ac:	47 c0       	rjmp	.+142    	; 0x223c <digitalWrite+0x98>
check_valid_digital_pin():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:240
    default:
      break;
  }
}

void digitalWrite(uint8_t pin, uint8_t val) {
    21ae:	90 e0       	ldi	r25, 0x00	; 0
digitalWrite():
    21b0:	ec 01       	movw	r28, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:243
  check_valid_digital_pin(pin);
  /* Get bit mask for pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
    21b2:	cb 5d       	subi	r28, 0xDB	; 219
    21b4:	d6 43       	sbci	r29, 0x36	; 54
    21b6:	28 81       	ld	r18, Y
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/Arduino.h:873
#if !defined(NUM_TOTAL_PINS)
  #define NUM_TOTAL_PINS                (NUM_DIGITAL_PINS) /* Used the same way as NUM_DIGITAL_PINS. so it doesn't mean what it's named  - I didn't make the convention*/
#endif

inline __attribute__((always_inline)) void check_valid_digital_pin(pin_size_t pin) {
  if (__builtin_constant_p(pin)) {
    21b8:	2f 3f       	cpi	r18, 0xFF	; 255
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:243
    21ba:	09 f4       	brne	.+2      	; 0x21be <digitalWrite+0x1a>
    21bc:	3f c0       	rjmp	.+126    	; 0x223c <digitalWrite+0x98>
    21be:	ac 01       	movw	r20, r24
    21c0:	4d 5e       	subi	r20, 0xED	; 237
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:244
  if (bit_mask == NOT_A_PIN) {
    21c2:	56 43       	sbci	r21, 0x36	; 54
    21c4:	da 01       	movw	r26, r20
    21c6:	ec 91       	ld	r30, X
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:249
    return;
  }

  /* Get port */
  PORT_t *port = digitalPinToPortStruct(pin);
    21c8:	b0 e2       	ldi	r27, 0x20	; 32
    21ca:	eb 9f       	mul	r30, r27
    21cc:	f0 01       	movw	r30, r0
    21ce:	11 24       	eor	r1, r1
    21d0:	fc 5f       	subi	r31, 0xFC	; 252
    21d2:	61 11       	cpse	r22, r1
    21d4:	36 c0       	rjmp	.+108    	; 0x2242 <digitalWrite+0x9e>
    21d6:	26 83       	std	Z+6, r18	; 0x06
    21d8:	30 81       	ld	r19, Z
    21da:	23 23       	and	r18, r19
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:257
  the behavior of digitalWrite() on classic AVR devices, where
  you could digitalWrite() a pin while it's an input, to ensure
  that the value of the port was set correctly when it was
  changed to an output. Code in the wild relies on this behavior. */

  if (val == LOW) { /* If LOW */
    21dc:	a1 f4       	brne	.+40     	; 0x2206 <digitalWrite+0x62>
    21de:	9c 01       	movw	r18, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:258
    port->OUTCLR = bit_mask;
    21e0:	2f 5f       	subi	r18, 0xFF	; 255
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:282
  } else {
    port->OUTSET = bit_mask;
  }

  /* Input direction */
  if (!(port->DIR & bit_mask)) {
    21e2:	36 43       	sbci	r19, 0x36	; 54
    21e4:	d9 01       	movw	r26, r18
    21e6:	2c 91       	ld	r18, X
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:289
      pull up is enabled if this function is called.
      Should we purposely implement this side effect?
    */

    /* Get bit position for getting pin ctrl reg */
    uint8_t bit_pos = digitalPinToBitPosition(pin);
    21e8:	30 97       	sbiw	r30, 0x00	; 0
    21ea:	a1 f1       	breq	.+104    	; 0x2254 <digitalWrite+0xb0>
    21ec:	28 30       	cpi	r18, 0x08	; 8
    21ee:	90 f5       	brcc	.+100    	; 0x2254 <digitalWrite+0xb0>
    21f0:	70 96       	adiw	r30, 0x10	; 16
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:292

    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
    21f2:	e2 0f       	add	r30, r18
    21f4:	f1 1d       	adc	r31, r1
    21f6:	3f b7       	in	r19, 0x3f	; 63
    21f8:	f8 94       	cli
    21fa:	20 81       	ld	r18, Z
    21fc:	61 11       	cpse	r22, r1
    21fe:	2d c0       	rjmp	.+90     	; 0x225a <digitalWrite+0xb6>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:295

    /* Save system status and disable interrupts */
    uint8_t status = SREG;
    2200:	27 7f       	andi	r18, 0xF7	; 247
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:296
    cli();
    2202:	20 83       	st	Z, r18
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:300

    if (val == LOW) {
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
    2204:	3f bf       	out	0x3f, r19	; 63
turnOffPWM():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:298

    /* Save system status and disable interrupts */
    uint8_t status = SREG;
    cli();

    if (val == LOW) {
    2206:	81 51       	subi	r24, 0x11	; 17
    2208:	97 43       	sbci	r25, 0x37	; 55
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:300
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
    220a:	fc 01       	movw	r30, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:303
    } else {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
    220c:	90 81       	ld	r25, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:307
    }

    /* Restore system status */
    SREG = status;
    220e:	99 23       	and	r25, r25
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:107
   * any timers with minimum overhead - critical on these parts
   * Since nothing that will show up here can have more than one
   * one bit set, binary and will give 0x00 if that bit is cleared
   * which is NOT_ON_TIMER.
   */
  uint8_t digital_pin_timer =  digitalPinToTimer(pin) & __PeripheralControl;
    2210:	a9 f0       	breq	.+42     	; 0x223c <digitalWrite+0x98>
    2212:	88 81       	ld	r24, Y
    2214:	90 34       	cpi	r25, 0x40	; 64
    2216:	41 f1       	breq	.+80     	; 0x2268 <digitalWrite+0xc4>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:109
  /* end megaTinyCore-specific section */
  if (digital_pin_timer== NOT_ON_TIMER) {
    2218:	90 38       	cpi	r25, 0x80	; 128
    221a:	19 f1       	breq	.+70     	; 0x2262 <digitalWrite+0xbe>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:113
    return;
  }

  uint8_t bit_mask = digitalPinToBitMask(pin);
    221c:	90 31       	cpi	r25, 0x10	; 16
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:116
  // TCB_t *timerB;

  switch (digital_pin_timer) {
    221e:	71 f4       	brne	.+28     	; 0x223c <digitalWrite+0x98>
    2220:	da 01       	movw	r26, r20
    2222:	9c 91       	ld	r25, X
    2224:	91 30       	cpi	r25, 0x01	; 1
    2226:	d9 f4       	brne	.+54     	; 0x225e <digitalWrite+0xba>
    2228:	85 30       	cpi	r24, 0x05	; 5
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:132
          }
          if (bit_mask > 0x04) {  // -> bit_pos > 2 -> output channel controlled by HCMP
            bit_mask <<= 1;       // mind the gap (between LCMP and HCMP)
          }
        #else
          if (digitalPinToPort(pin) == PB) {        // WO0-WO2, Bitmask has one of these bits 1: 0b00hhhlll.
    222a:	10 f0       	brcs	.+4      	; 0x2230 <digitalWrite+0x8c>
    222c:	88 0f       	add	r24, r24
    222e:	82 95       	swap	r24
    2230:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <u8g2_cb_r0+0x7f406e>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:133
            if (bit_mask > 0x04) { // Is it one of the three high ones? If so
    2234:	80 95       	com	r24
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:134
              bit_mask <<= 1;      // nudge it 1 place left swap nybbles since that's 1 clock faster than 3 rightshifts.
    2236:	89 23       	and	r24, r25
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:135
              _SWAP(bit_mask);     // swap nybbles since that's 1 clock faster than 3 rightshifts.
    2238:	80 93 01 0a 	sts	0x0A01, r24	; 0x800a01 <u8g2_cb_r0+0x7f406e>
digitalWrite():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:142
          } else {
            // Otherwise, it's WO3-5. These will always be on 0b00hhh000,. Here since we ARE working with a high half timer, we need to just leftshift it once.
            bit_mask <<= 1;
          }
        #endif
        TCA0.SPLIT.CTRLB &= ~bit_mask;
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	08 95       	ret
    2242:	64 30       	cpi	r22, 0x04	; 4
    2244:	29 f4       	brne	.+10     	; 0x2250 <digitalWrite+0xac>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:320
   * analogWritten() 255, then digitallyWritten() to HIGH, which
   * would turn it off for the time between turnOffPWM() and
   * PORT->OUTCLR)
   * Since there's no penalty, why make a glitch we don't have to? */
  turnOffPWM(pin);
}
    2246:	34 81       	ldd	r19, Z+4	; 0x04
    2248:	27 83       	std	Z+7, r18	; 0x07
    224a:	64 81       	ldd	r22, Z+4	; 0x04
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:259
  that the value of the port was set correctly when it was
  changed to an output. Code in the wild relies on this behavior. */

  if (val == LOW) { /* If LOW */
    port->OUTCLR = bit_mask;
  } else if (val == CHANGE) { /* If TOGGLE
    224c:	62 23       	and	r22, r18
    224e:	c4 cf       	rjmp	.-120    	; 0x21d8 <digitalWrite+0x34>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:266
     * we need to know if it's been set high or low
     * otherwise the pullup state could get out of
     * sync with the output bit. Annoying! But we should
     * have to read it before writing OUTTGL, since that can
     * have a 1 clock delay. So read first + invert */
    val = !(port->OUT & bit_mask);
    2250:	25 83       	std	Z+5, r18	; 0x05
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:267
    port->OUTTGL = bit_mask;
    2252:	c2 cf       	rjmp	.-124    	; 0x21d8 <digitalWrite+0x34>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:272
    // Now, for the pullup setting part below
    // we need to know if it's been set high or low
    // otherwise the pullup state could get out of
    // sync with the output bit. Annoying!
    val = port->OUT & bit_mask;
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	e0 e0       	ldi	r30, 0x00	; 0
    2258:	ce cf       	rjmp	.-100    	; 0x21f6 <digitalWrite+0x52>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:278
    // val will now be 0 (LOW) if the toggling made it LOW
    // or bit_mask if not. And further down, we only need to
    // know if it's
  /* If HIGH OR  > TOGGLE  */
  } else {
    port->OUTSET = bit_mask;
    225a:	28 60       	ori	r18, 0x08	; 8
    225c:	d2 cf       	rjmp	.-92     	; 0x2202 <digitalWrite+0x5e>
turnOffPWM():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:292

    /* Get bit position for getting pin ctrl reg */
    uint8_t bit_pos = digitalPinToBitPosition(pin);

    /* Calculate where pin control register is */
    volatile uint8_t *pin_ctrl_reg = getPINnCTRLregister(port, bit_pos);
    225e:	88 0f       	add	r24, r24
    2260:	e7 cf       	rjmp	.-50     	; 0x2230 <digitalWrite+0x8c>
    2262:	10 92 a0 06 	sts	0x06A0, r1	; 0x8006a0 <u8g2_cb_r0+0x7f3d0d>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:303
    if (val == LOW) {
      /* Disable pullup */
      *pin_ctrl_reg &= ~PORT_PULLUPEN_bm;
    } else {
      /* Enable pull-up */
      *pin_ctrl_reg |= PORT_PULLUPEN_bm;
    2266:	ea cf       	rjmp	.-44     	; 0x223c <digitalWrite+0x98>
digitalWrite():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:139
              bit_mask <<= 1;      // nudge it 1 place left swap nybbles since that's 1 clock faster than 3 rightshifts.
              _SWAP(bit_mask);     // swap nybbles since that's 1 clock faster than 3 rightshifts.
            }
          } else {
            // Otherwise, it's WO3-5. These will always be on 0b00hhh000,. Here since we ARE working with a high half timer, we need to just leftshift it once.
            bit_mask <<= 1;
    2268:	20 e4       	ldi	r18, 0x40	; 64
turnOffPWM():
    226a:	82 30       	cpi	r24, 0x02	; 2
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:157
    /* We don't need the type b timers as this core does not use them for PWM      */

    // 1-series parts have a DAC that we can use...
    #if defined(DAC0)
      case DACOUT:
        DAC0.CTRLA = 0x00;
    226c:	09 f4       	brne	.+2      	; 0x2270 <digitalWrite+0xcc>
digitalWrite():
    226e:	20 e8       	ldi	r18, 0x80	; 128
turnOffPWM():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:194
            #endif

            SREG = oldSREG;
          }
        #else
          uint8_t fc_mask = (bit_mask == 0x02 ? 0x80 : 0x40);
    2270:	90 91 92 0a 	lds	r25, 0x0A92	; 0x800a92 <u8g2_cb_r0+0x7f40ff>
    2274:	92 23       	and	r25, r18
    2276:	11 f3       	breq	.-60     	; 0x223c <digitalWrite+0x98>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:195
          if (TCD0.FAULTCTRL & fc_mask) {
    2278:	6f b7       	in	r22, 0x3f	; 63
    227a:	f8 94       	cli
    227c:	90 91 80 0a 	lds	r25, 0x0A80	; 0x800a80 <u8g2_cb_r0+0x7f40ed>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:196
            uint8_t oldSREG = SREG;
    2280:	9e 7f       	andi	r25, 0xFE	; 254
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:197
            cli();
    2282:	90 93 80 0a 	sts	0x0A80, r25	; 0x800a80 <u8g2_cb_r0+0x7f40ed>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:200
            // uint8_t TCD0_prescaler=TCD0.CTRLA&(~TCD_ENABLE_bm);
            //
            TCD0.CTRLA &= ~TCD_ENABLE_bm;
    2286:	40 91 92 0a 	lds	r20, 0x0A92	; 0x800a92 <u8g2_cb_r0+0x7f40ff>
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	20 95       	com	r18
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:201
            _PROTECTED_WRITE(TCD0.FAULTCTRL, TCD0.FAULTCTRL & (~fc_mask));
    228e:	30 95       	com	r19
    2290:	50 e0       	ldi	r21, 0x00	; 0
    2292:	24 23       	and	r18, r20
    2294:	35 23       	and	r19, r21
    2296:	98 ed       	ldi	r25, 0xD8	; 216
    2298:	94 bf       	out	0x34, r25	; 52
    229a:	20 93 92 0a 	sts	0x0A92, r18	; 0x800a92 <u8g2_cb_r0+0x7f40ff>
    229e:	90 91 8e 0a 	lds	r25, 0x0A8E	; 0x800a8e <u8g2_cb_r0+0x7f40fb>
    22a2:	90 ff       	sbrs	r25, 0
    22a4:	fc cf       	rjmp	.-8      	; 0x229e <digitalWrite+0xfa>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:202
            while (!(TCD0.STATUS & TCD_ENRDY_bm)); // wait until it can be re-enabled
    22a6:	90 91 80 0a 	lds	r25, 0x0A80	; 0x800a80 <u8g2_cb_r0+0x7f40ed>
    22aa:	91 60       	ori	r25, 0x01	; 1
    22ac:	90 93 80 0a 	sts	0x0A80, r25	; 0x800a80 <u8g2_cb_r0+0x7f40ed>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:203
            TCD0.CTRLA |= TCD_ENABLE_bm;           // re-enable it
    22b0:	81 30       	cpi	r24, 0x01	; 1
    22b2:	39 f4       	brne	.+14     	; 0x22c2 <digitalWrite+0x11e>
    22b4:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <u8g2_cb_r0+0x7f3abd>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:220
                  PORTA.PIN6CTRL &= ~(PORT_INVEN_bm);
                } else {
                  PORTA.PIN7CTRL &= ~(PORT_INVEN_bm);
                }
              #else
                if (bit_mask == 0x01) {
    22b8:	8f 77       	andi	r24, 0x7F	; 127
    22ba:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <u8g2_cb_r0+0x7f3abd>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:221
                  PORTC.PIN0CTRL &= ~(PORT_INVEN_bm);
    22be:	6f bf       	out	0x3f, r22	; 63
    22c0:	bd cf       	rjmp	.-134    	; 0x223c <digitalWrite+0x98>
    22c2:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <u8g2_cb_r0+0x7f3abe>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:227
                } else {
                  PORTC.PIN1CTRL &= ~(PORT_INVEN_bm);
                }
              #endif
            #endif
            SREG = oldSREG;
    22c6:	8f 77       	andi	r24, 0x7F	; 127
    22c8:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <u8g2_cb_r0+0x7f3abe>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:223
                }
              #else
                if (bit_mask == 0x01) {
                  PORTC.PIN0CTRL &= ~(PORT_INVEN_bm);
                } else {
                  PORTC.PIN1CTRL &= ~(PORT_INVEN_bm);
    22cc:	f8 cf       	rjmp	.-16     	; 0x22be <digitalWrite+0x11a>

000022ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>:
_ZN15RLhelper_SX127814singleTransferEhh():
    22ce:	0f 93       	push	r16
    22d0:	1f 93       	push	r17
    22d2:	cf 93       	push	r28
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:296
{
	singleTransfer(address | 0x80, value);
}

uint8_t RLhelper_SX1278::singleTransfer(uint8_t address, uint8_t value)
{
    22d4:	df 93       	push	r29
    22d6:	ec 01       	movw	r28, r24
    22d8:	06 2f       	mov	r16, r22
    22da:	14 2f       	mov	r17, r20
    22dc:	60 e0       	ldi	r22, 0x00	; 0
    22de:	89 85       	ldd	r24, Y+9	; 0x09
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:298
	uint8_t response;
	digitalWrite(_ss, LOW);
    22e0:	61 df       	rcall	.-318    	; 0x21a4 <digitalWrite>
    22e2:	eb 85       	ldd	r30, Y+11	; 0x0b
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:300
	#if !defined(__AVR_ATtiny84__)
		_spi->beginTransaction(_spiSettings);
    22e4:	fc 85       	ldd	r31, Y+12	; 0x0c
    22e6:	9f 81       	ldd	r25, Y+7	; 0x07
    22e8:	88 85       	ldd	r24, Y+8	; 0x08
beginTransaction():
    22ea:	20 85       	ldd	r18, Z+8	; 0x08
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:318
  }
  interruptMode = SPI_IMODE_NONE;
}

void SPIClass::beginTransaction(SPISettings settings) {
  if (interruptMode != SPI_IMODE_NONE) {
    22ec:	22 23       	and	r18, r18
    22ee:	19 f0       	breq	.+6      	; 0x22f6 <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)+0x28>
    22f0:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:319
    old_sreg = SREG;
    22f2:	21 87       	std	Z+9, r18	; 0x09
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:320
    cli(); // NoInterrupts();
    22f4:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:322
  }
  in_transaction = 1;
    22f6:	21 e0       	ldi	r18, 0x01	; 1
    22f8:	22 87       	std	Z+10, r18	; 0x0a
config():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:178
  #endif
  initialized = true;
}

void SPIClass::config(SPISettings settings) {
  SPI0.CTRLA = settings.ctrla;
    22fa:	90 93 20 08 	sts	0x0820, r25	; 0x800820 <u8g2_cb_r0+0x7f3e8d>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:179
  SPI0.CTRLB = settings.ctrlb;
    22fe:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <u8g2_cb_r0+0x7f3e8e>
transfer():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:360
  * The following NOP introduces a small delay that can prevent the wait
  * loop from iterating when running at the maximum speed. This gives
  * about 10% more speed, even if it seems counter-intuitive. At lower
  * speeds it is unnoticed.
  */
  asm volatile("nop");
    2302:	00 00       	nop
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:362

  SPI0.DATA = data;
    2304:	00 93 24 08 	sts	0x0824, r16	; 0x800824 <u8g2_cb_r0+0x7f3e91>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:363
  while ((SPI0.INTFLAGS & SPI_RXCIF_bm) == 0);  // wait for complete send
    2308:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <u8g2_cb_r0+0x7f3e90>
    230c:	87 ff       	sbrs	r24, 7
    230e:	fc cf       	rjmp	.-8      	; 0x2308 <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)+0x3a>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:364
  return SPI0.DATA;                             // read data back
    2310:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <u8g2_cb_r0+0x7f3e91>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:360
  * The following NOP introduces a small delay that can prevent the wait
  * loop from iterating when running at the maximum speed. This gives
  * about 10% more speed, even if it seems counter-intuitive. At lower
  * speeds it is unnoticed.
  */
  asm volatile("nop");
    2314:	00 00       	nop
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:362

  SPI0.DATA = data;
    2316:	10 93 24 08 	sts	0x0824, r17	; 0x800824 <u8g2_cb_r0+0x7f3e91>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:363
  while ((SPI0.INTFLAGS & SPI_RXCIF_bm) == 0);  // wait for complete send
    231a:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <u8g2_cb_r0+0x7f3e90>
    231e:	87 ff       	sbrs	r24, 7
    2320:	fc cf       	rjmp	.-8      	; 0x231a <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)+0x4c>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:364
  return SPI0.DATA;                             // read data back
    2322:	10 91 24 08 	lds	r17, 0x0824	; 0x800824 <u8g2_cb_r0+0x7f3e91>
_ZN15RLhelper_SX127814singleTransferEhh():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:305
	#endif
	_spi->transfer(address);
	response = _spi->transfer(value);
	#if !defined(__AVR_ATtiny84__)
		_spi->endTransaction();
    2326:	eb 85       	ldd	r30, Y+11	; 0x0b
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:327
  in_transaction = 1;
  config(settings);
}

void SPIClass::endTransaction(void) {
  if (in_transaction) {
    2328:	fc 85       	ldd	r31, Y+12	; 0x0c
endTransaction():
    232a:	82 85       	ldd	r24, Z+10	; 0x0a
    232c:	88 23       	and	r24, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:328
    in_transaction = 0;
    232e:	31 f0       	breq	.+12     	; 0x233c <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)+0x6e>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:329
    if (interruptMode != SPI_IMODE_NONE) {
    2330:	12 86       	std	Z+10, r1	; 0x0a
    2332:	80 85       	ldd	r24, Z+8	; 0x08
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:330
      SREG = old_sreg;
    2334:	88 23       	and	r24, r24
    2336:	11 f0       	breq	.+4      	; 0x233c <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)+0x6e>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:307
	#endif
	digitalWrite(_ss, HIGH);
    2338:	81 85       	ldd	r24, Z+9	; 0x09
    233a:	8f bf       	out	0x3f, r24	; 63
_ZN15RLhelper_SX127814singleTransferEhh():
    233c:	61 e0       	ldi	r22, 0x01	; 1
    233e:	89 85       	ldd	r24, Y+9	; 0x09
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:309
	return response;
}
    2340:	31 df       	rcall	.-414    	; 0x21a4 <digitalWrite>
    2342:	81 2f       	mov	r24, r17
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	1f 91       	pop	r17
    234a:	0f 91       	pop	r16
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:292
	return singleTransfer(address & 0x7f, 0x00);
}

void RLhelper_SX1278::writeRegister(uint8_t address, uint8_t value)
{
	singleTransfer(address | 0x80, value);
    234c:	08 95       	ret

0000234e <RLhelper_SX1278::sleep()>:
_ZN15RLhelper_SX12785sleepEv():
    234e:	40 e8       	ldi	r20, 0x80	; 128
    2350:	61 e8       	ldi	r22, 0x81	; 129
    2352:	bd cf       	rjmp	.-134    	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>

00002354 <RLhelper_SX1278::idle()>:
_ZN15RLhelper_SX12784idleEv():
    2354:	41 e8       	ldi	r20, 0x81	; 129
    2356:	61 e8       	ldi	r22, 0x81	; 129
    2358:	ba cf       	rjmp	.-140    	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>

0000235a <RLhelper_SX1278::readRegister(unsigned char)>:
_ZN15RLhelper_SX127812readRegisterEh():
    235a:	40 e0       	ldi	r20, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:287
	}
}

uint8_t RLhelper_SX1278::readRegister(uint8_t address)
{
	return singleTransfer(address & 0x7f, 0x00);
    235c:	b8 cf       	rjmp	.-144    	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>

0000235e <RLhelper_SX1278::setLdoFlag() [clone .constprop.31]>:
_ZN15RLhelper_SX127810setLdoFlagEv.constprop.31():
    235e:	cf 92       	push	r12
    2360:	df 92       	push	r13
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:362
	}
	writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
	setLdoFlag();
}

void RLhelper_SX1278::setLdoFlag()
    2362:	ef 92       	push	r14
    2364:	ff 92       	push	r15
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
getSignalBandwidth():
    236a:	6d e1       	ldi	r22, 0x1D	; 29
    236c:	8d ef       	ldi	r24, 0xFD	; 253
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:382
	return readRegister(REG_MODEM_CONFIG_2) >> 4;
}

long RLhelper_SX1278::getSignalBandwidth()
{
	byte bw = (readRegister(REG_MODEM_CONFIG_1) >> 4);
    236e:	98 e3       	ldi	r25, 0x38	; 56
    2370:	f4 df       	rcall	.-24     	; 0x235a <RLhelper_SX1278::readRegister(unsigned char)>
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	34 e0       	ldi	r19, 0x04	; 4
    2376:	95 95       	asr	r25
    2378:	87 95       	ror	r24
    237a:	3a 95       	dec	r19
    237c:	e1 f7       	brne	.-8      	; 0x2376 <RLhelper_SX1278::setLdoFlag() [clone .constprop.31]+0x18>
    237e:	8a 30       	cpi	r24, 0x0A	; 10
    2380:	91 05       	cpc	r25, r1
    2382:	0c f0       	brlt	.+2      	; 0x2386 <RLhelper_SX1278::setLdoFlag() [clone .constprop.31]+0x28>
    2384:	3f c0       	rjmp	.+126    	; 0x2404 <RLhelper_SX1278::setLdoFlag() [clone .constprop.31]+0xa6>
    2386:	fc 01       	movw	r30, r24
    2388:	ee 0f       	add	r30, r30
    238a:	ff 1f       	adc	r31, r31
    238c:	e8 0f       	add	r30, r24
    238e:	f9 1f       	adc	r31, r25
    2390:	e9 5c       	subi	r30, 0xC9	; 201
    2392:	f6 43       	sbci	r31, 0x36	; 54
    2394:	c0 80       	ld	r12, Z
    2396:	d1 80       	ldd	r13, Z+1	; 0x01
    2398:	e2 80       	ldd	r14, Z+2	; 0x02
    239a:	0e 2c       	mov	r0, r14
    239c:	00 0c       	add	r0, r0
    239e:	ff 08       	sbc	r15, r15
getSpreadingFactor():
    23a0:	6e e1       	ldi	r22, 0x1E	; 30
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:377
	writeRegister(REG_MODEM_CONFIG_3, config3);
}

int RLhelper_SX1278::getSpreadingFactor()
{
	return readRegister(REG_MODEM_CONFIG_2) >> 4;
    23a2:	8d ef       	ldi	r24, 0xFD	; 253
    23a4:	98 e3       	ldi	r25, 0x38	; 56
    23a6:	d9 df       	rcall	.-78     	; 0x235a <RLhelper_SX1278::readRegister(unsigned char)>
    23a8:	d8 2f       	mov	r29, r24
_ZN15RLhelper_SX127810setLdoFlagEv.constprop.31():
    23aa:	66 e2       	ldi	r22, 0x26	; 38
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:370
	long symbolDuration = 1000 / ( getSignalBandwidth() / (1L << getSpreadingFactor()) ) ;
	
	// Section 4.1.1.6
	boolean ldoOn = symbolDuration > 16;
	
	uint8_t config3 = readRegister(REG_MODEM_CONFIG_3);
    23ac:	8d ef       	ldi	r24, 0xFD	; 253
    23ae:	98 e3       	ldi	r25, 0x38	; 56
    23b0:	d4 df       	rcall	.-88     	; 0x235a <RLhelper_SX1278::readRegister(unsigned char)>
    23b2:	c8 2f       	mov	r28, r24
getSpreadingFactor():
    23b4:	d2 95       	swap	r29
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:377
	writeRegister(REG_MODEM_CONFIG_3, config3);
}

int RLhelper_SX1278::getSpreadingFactor()
{
	return readRegister(REG_MODEM_CONFIG_2) >> 4;
    23b6:	df 70       	andi	r29, 0x0F	; 15
_ZN15RLhelper_SX127810setLdoFlagEv.constprop.31():
    23b8:	21 e0       	ldi	r18, 0x01	; 1
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:365
}

void RLhelper_SX1278::setLdoFlag()
{
	// Section 4.1.1.5
	long symbolDuration = 1000 / ( getSignalBandwidth() / (1L << getSpreadingFactor()) ) ;
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e0       	ldi	r20, 0x00	; 0
    23be:	50 e0       	ldi	r21, 0x00	; 0
    23c0:	04 c0       	rjmp	.+8      	; 0x23ca <RLhelper_SX1278::setLdoFlag() [clone .constprop.31]+0x6c>
    23c2:	22 0f       	add	r18, r18
    23c4:	33 1f       	adc	r19, r19
    23c6:	44 1f       	adc	r20, r20
    23c8:	55 1f       	adc	r21, r21
    23ca:	da 95       	dec	r29
    23cc:	d2 f7       	brpl	.-12     	; 0x23c2 <RLhelper_SX1278::setLdoFlag() [clone .constprop.31]+0x64>
    23ce:	c7 01       	movw	r24, r14
    23d0:	b6 01       	movw	r22, r12
    23d2:	0e 94 67 20 	call	0x40ce	; 0x40ce <__divmodsi4>
    23d6:	68 ee       	ldi	r22, 0xE8	; 232
    23d8:	73 e0       	ldi	r23, 0x03	; 3
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	0e 94 67 20 	call	0x40ce	; 0x40ce <__divmodsi4>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:371
	
	// Section 4.1.1.6
	boolean ldoOn = symbolDuration > 16;
	
	uint8_t config3 = readRegister(REG_MODEM_CONFIG_3);
	bitWrite(config3, 3, ldoOn);
    23e2:	21 31       	cpi	r18, 0x11	; 17
    23e4:	31 05       	cpc	r19, r1
    23e6:	41 05       	cpc	r20, r1
    23e8:	51 05       	cpc	r21, r1
    23ea:	8c f0       	brlt	.+34     	; 0x240e <RLhelper_SX1278::setLdoFlag() [clone .constprop.31]+0xb0>
    23ec:	4c 2f       	mov	r20, r28
    23ee:	48 60       	ori	r20, 0x08	; 8
writeRegister():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:292
	return singleTransfer(address & 0x7f, 0x00);
}

void RLhelper_SX1278::writeRegister(uint8_t address, uint8_t value)
{
	singleTransfer(address | 0x80, value);
    23f0:	66 ea       	ldi	r22, 0xA6	; 166
    23f2:	8d ef       	ldi	r24, 0xFD	; 253
    23f4:	98 e3       	ldi	r25, 0x38	; 56
_ZN15RLhelper_SX127810setLdoFlagEv.constprop.31():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:373
	boolean ldoOn = symbolDuration > 16;
	
	uint8_t config3 = readRegister(REG_MODEM_CONFIG_3);
	bitWrite(config3, 3, ldoOn);
	writeRegister(REG_MODEM_CONFIG_3, config3);
}
    23f6:	df 91       	pop	r29
    23f8:	cf 91       	pop	r28
    23fa:	ff 90       	pop	r15
    23fc:	ef 90       	pop	r14
    23fe:	df 90       	pop	r13
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:292
	return singleTransfer(address & 0x7f, 0x00);
}

void RLhelper_SX1278::writeRegister(uint8_t address, uint8_t value)
{
	singleTransfer(address | 0x80, value);
    2400:	cf 90       	pop	r12
writeRegister():
    2402:	65 cf       	rjmp	.-310    	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
getSignalBandwidth():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:382
	return readRegister(REG_MODEM_CONFIG_2) >> 4;
}

long RLhelper_SX1278::getSignalBandwidth()
{
	byte bw = (readRegister(REG_MODEM_CONFIG_1) >> 4);
    2404:	cc 24       	eor	r12, r12
    2406:	ca 94       	dec	r12
    2408:	dc 2c       	mov	r13, r12
    240a:	76 01       	movw	r14, r12
    240c:	c9 cf       	rjmp	.-110    	; 0x23a0 <RLhelper_SX1278::setLdoFlag() [clone .constprop.31]+0x42>
_ZN15RLhelper_SX127810setLdoFlagEv.constprop.31():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:371
	
	// Section 4.1.1.6
	boolean ldoOn = symbolDuration > 16;
	
	uint8_t config3 = readRegister(REG_MODEM_CONFIG_3);
	bitWrite(config3, 3, ldoOn);
    240e:	4c 2f       	mov	r20, r28
    2410:	47 7f       	andi	r20, 0xF7	; 247
    2412:	ee cf       	rjmp	.-36     	; 0x23f0 <RLhelper_SX1278::setLdoFlag() [clone .constprop.31]+0x92>

00002414 <RLhelper_SX1278::isTransmitting()>:
_ZN15RLhelper_SX127814isTransmittingEv():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:450
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
	return 1;
}

bool RLhelper_SX1278::isTransmitting()
{
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	ec 01       	movw	r28, r24
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:451
	uint8_t reg = readRegister(REG_OP_MODE);
    241a:	61 e0       	ldi	r22, 0x01	; 1
    241c:	9e df       	rcall	.-196    	; 0x235a <RLhelper_SX1278::readRegister(unsigned char)>
    241e:	83 70       	andi	r24, 0x03	; 3
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:452
	if ((reg & MODE_TX) == MODE_TX) {
    2420:	83 30       	cpi	r24, 0x03	; 3
    2422:	59 f0       	breq	.+22     	; 0x243a <RLhelper_SX1278::isTransmitting()+0x26>
    2424:	62 e1       	ldi	r22, 0x12	; 18
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:455
		return true;
	}
	if (readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) {
    2426:	ce 01       	movw	r24, r28
    2428:	98 df       	rcall	.-208    	; 0x235a <RLhelper_SX1278::readRegister(unsigned char)>
    242a:	83 ff       	sbrs	r24, 3
    242c:	04 c0       	rjmp	.+8      	; 0x2436 <RLhelper_SX1278::isTransmitting()+0x22>
writeRegister():
    242e:	48 e0       	ldi	r20, 0x08	; 8
    2430:	62 e9       	ldi	r22, 0x92	; 146
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:292
	return singleTransfer(address & 0x7f, 0x00);
}

void RLhelper_SX1278::writeRegister(uint8_t address, uint8_t value)
{
	singleTransfer(address | 0x80, value);
    2432:	ce 01       	movw	r24, r28
    2434:	4c df       	rcall	.-360    	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
_ZN15RLhelper_SX127814isTransmittingEv():
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	01 c0       	rjmp	.+2      	; 0x243c <RLhelper_SX1278::isTransmitting()+0x28>
    243a:	81 e0       	ldi	r24, 0x01	; 1
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:459
	}
	if (readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) {
		// clear IRQ's
		writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
	}
	return false;
    243c:	df 91       	pop	r29
    243e:	cf 91       	pop	r28
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:453

bool RLhelper_SX1278::isTransmitting()
{
	uint8_t reg = readRegister(REG_OP_MODE);
	if ((reg & MODE_TX) == MODE_TX) {
		return true;
    2440:	08 95       	ret

00002442 <RLhelper_SX1278::lqi()>:
_ZN15RLhelper_SX12783lqiEv():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:460
	if (readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) {
		// clear IRQ's
		writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
	}
	return false;
}
    2442:	cf 92       	push	r12
    2444:	df 92       	push	r13
    2446:	ef 92       	push	r14
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:248
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
	return 1;
}

int RLhelper_SX1278::lqi()
{
    2448:	ff 92       	push	r15
    244a:	0f 93       	push	r16
    244c:	1f 93       	push	r17
    244e:	cf 93       	push	r28
    2450:	df 93       	push	r29
    2452:	8c 01       	movw	r16, r24
    2454:	6a e1       	ldi	r22, 0x1A	; 26
    2456:	81 df       	rcall	.-254    	; 0x235a <RLhelper_SX1278::readRegister(unsigned char)>
    2458:	c8 2f       	mov	r28, r24
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:249
	int rssi = (readRegister(REG_PKT_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
    245a:	d0 e0       	ldi	r29, 0x00	; 0
    245c:	f8 01       	movw	r30, r16
    245e:	66 85       	ldd	r22, Z+14	; 0x0e
    2460:	77 85       	ldd	r23, Z+15	; 0x0f
    2462:	80 89       	ldd	r24, Z+16	; 0x10
    2464:	91 89       	ldd	r25, Z+17	; 0x11
    2466:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <__floatsisf>
    246a:	2a ee       	ldi	r18, 0xEA	; 234
    246c:	36 e5       	ldi	r19, 0x56	; 86
    246e:	4a ef       	ldi	r20, 0xFA	; 250
    2470:	5d e4       	ldi	r21, 0x4D	; 77
    2472:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__cmpsf2>
    2476:	87 fd       	sbrc	r24, 7
    2478:	44 c0       	rjmp	.+136    	; 0x2502 <RLhelper_SX1278::lqi()+0xc0>
    247a:	8d e9       	ldi	r24, 0x9D	; 157
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	c8 1b       	sub	r28, r24
    2480:	d9 0b       	sbc	r29, r25
    2482:	69 e1       	ldi	r22, 0x19	; 25
    2484:	c8 01       	movw	r24, r16
    2486:	69 df       	rcall	.-302    	; 0x235a <RLhelper_SX1278::readRegister(unsigned char)>
    2488:	87 fd       	sbrc	r24, 7
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:250
	float rawSNR = (int8_t)readRegister(REG_PKT_SNR_VALUE) / 4;
    248a:	8d 5f       	subi	r24, 0xFD	; 253
    248c:	85 95       	asr	r24
    248e:	85 95       	asr	r24
    2490:	68 2f       	mov	r22, r24
    2492:	88 0f       	add	r24, r24
    2494:	77 0b       	sbc	r23, r23
    2496:	88 0b       	sbc	r24, r24
    2498:	99 0b       	sbc	r25, r25
    249a:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <__floatsisf>
    249e:	6b 01       	movw	r12, r22
    24a0:	7c 01       	movw	r14, r24
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	a9 01       	movw	r20, r18
    24a8:	0e 94 af 1e 	call	0x3d5e	; 0x3d5e <__cmpsf2>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:251
	if(rawSNR < 0.0) {
    24ac:	87 ff       	sbrs	r24, 7
    24ae:	0d c0       	rjmp	.+26     	; 0x24ca <RLhelper_SX1278::lqi()+0x88>
    24b0:	be 01       	movw	r22, r28
    24b2:	dd 0f       	add	r29, r29
    24b4:	88 0b       	sbc	r24, r24
    24b6:	99 0b       	sbc	r25, r25
    24b8:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <__floatsisf>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:252
		rssi += rawSNR;
    24bc:	a7 01       	movw	r20, r14
    24be:	96 01       	movw	r18, r12
    24c0:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <__addsf3>
    24c4:	0e 94 14 20 	call	0x4028	; 0x4028 <__fixsfsi>
    24c8:	eb 01       	movw	r28, r22
    24ca:	9e 01       	movw	r18, r28
    24cc:	dd 0f       	add	r29, r29
    24ce:	44 0b       	sbc	r20, r20
    24d0:	55 0b       	sbc	r21, r21
map():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:254
	}
	return map(rssi, -128, -10, 0, 100);
    24d2:	20 58       	subi	r18, 0x80	; 128
    24d4:	3f 4f       	sbci	r19, 0xFF	; 255
    24d6:	4f 4f       	sbci	r20, 0xFF	; 255
    24d8:	5f 4f       	sbci	r21, 0xFF	; 255
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/Common.cpp:5
#include "Common.h"

/* C++ prototypes */
long map(long x, long in_min, long in_max, long out_min, long out_max) {
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    24da:	a4 e6       	ldi	r26, 0x64	; 100
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	0e 94 65 1f 	call	0x3eca	; 0x3eca <__muluhisi3>
    24e2:	26 e7       	ldi	r18, 0x76	; 118
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e0       	ldi	r20, 0x00	; 0
    24e8:	50 e0       	ldi	r21, 0x00	; 0
    24ea:	0e 94 67 20 	call	0x40ce	; 0x40ce <__divmodsi4>
_ZN15RLhelper_SX12783lqiEv():
    24ee:	c9 01       	movw	r24, r18
    24f0:	df 91       	pop	r29
    24f2:	cf 91       	pop	r28
    24f4:	1f 91       	pop	r17
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:255
}
    24f6:	0f 91       	pop	r16
    24f8:	ff 90       	pop	r15
    24fa:	ef 90       	pop	r14
    24fc:	df 90       	pop	r13
    24fe:	cf 90       	pop	r12
    2500:	08 95       	ret
    2502:	84 ea       	ldi	r24, 0xA4	; 164
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	bb cf       	rjmp	.-138    	; 0x247e <RLhelper_SX1278::lqi()+0x3c>

00002508 <onReceive(unsigned char, rl_packetV1_t*)>:
_Z9onReceivehP13rl_packetV1_t():
    2508:	fb 01       	movw	r30, r22
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:249
	return 1;
}

int RLhelper_SX1278::lqi()
{
	int rssi = (readRegister(REG_PKT_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
    250a:	80 81       	ld	r24, Z
    250c:	8d 3f       	cpi	r24, 0xFD	; 253
    250e:	09 f0       	breq	.+2      	; 0x2512 <onReceive(unsigned char, rl_packetV1_t*)+0xa>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:168
{
  // ***************************************
  // ! ! ! don't publish anything here ! ! !
  // ! ! ! and stay short time         ! ! !
  // ***************************************
  if (pIn->destinationID == RL_ID_PING && pIn->senderID == HUB_ID)
    2510:	4b c0       	rjmp	.+150    	; 0x25a8 <onReceive(unsigned char, rl_packetV1_t*)+0xa0>
    2512:	81 81       	ldd	r24, Z+1	; 0x01
    2514:	81 11       	cpse	r24, r1
    2516:	48 c0       	rjmp	.+144    	; 0x25a8 <onReceive(unsigned char, rl_packetV1_t*)+0xa0>
millis():
    2518:	2f b7       	in	r18, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	80 91 82 38 	lds	r24, 0x3882	; 0x803882 <timingStruct+0x4>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:441
  unsigned long millis() {
    // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
    unsigned long m;
    // disable interrupts while we read timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to timer_millis)
    uint8_t oldSREG = SREG;
    2520:	90 91 83 38 	lds	r25, 0x3883	; 0x803883 <timingStruct+0x5>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:493
        "adc %D0, %D1"    "\n\t"
        : "+r" (m), "+r" (temp), "+d" (cnt)
        );
      */
    #else
      m = timingStruct.timer_millis;
    2524:	a0 91 84 38 	lds	r26, 0x3884	; 0x803884 <timingStruct+0x6>
    2528:	b0 91 85 38 	lds	r27, 0x3885	; 0x803885 <timingStruct+0x7>
    252c:	2f bf       	out	0x3f, r18	; 63
_Z9onReceivehP13rl_packetV1_t():
    252e:	80 93 5c 38 	sts	0x385C, r24	; 0x80385c <msIN>
    2532:	90 93 5d 38 	sts	0x385D, r25	; 0x80385d <msIN+0x1>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:170
  {
    msIN = millis();
    2536:	a0 93 5e 38 	sts	0x385E, r26	; 0x80385e <msIN+0x2>
    253a:	b0 93 5f 38 	sts	0x385F, r27	; 0x80385f <msIN+0x3>
    253e:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <countIN>
    2542:	90 91 5b 38 	lds	r25, 0x385B	; 0x80385b <countIN+0x1>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:171
    countIN++;
    2546:	01 96       	adiw	r24, 0x01	; 1
    2548:	80 93 5a 38 	sts	0x385A, r24	; 0x80385a <countIN>
    254c:	90 93 5b 38 	sts	0x385B, r25	; 0x80385b <countIN+0x1>
    2550:	84 81       	ldd	r24, Z+4	; 0x04
    2552:	95 81       	ldd	r25, Z+5	; 0x05
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:172
    hubRSSI = pIn->data.num.value;
    2554:	80 93 58 38 	sts	0x3858, r24	; 0x803858 <hubRSSI>
    2558:	90 93 59 38 	sts	0x3859, r25	; 0x803859 <hubRSSI+0x1>
lqi():
    255c:	8d ef       	ldi	r24, 0xFD	; 253
    255e:	98 e3       	ldi	r25, 0x38	; 56
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:220
	_onTxDone();
  }
}

int RadioLinkClass::lqi() {
  return RLhelper.lqi();
    2560:	70 df       	rcall	.-288    	; 0x2442 <RLhelper_SX1278::lqi()>
_Z9onReceivehP13rl_packetV1_t():
    2562:	80 93 8f 38 	sts	0x388F, r24	; 0x80388f <lastRSSI>
    2566:	90 93 90 38 	sts	0x3890, r25	; 0x803890 <lastRSSI+0x1>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:173
    lastRSSI = RLcomm.lqi();
    256a:	80 91 5c 38 	lds	r24, 0x385C	; 0x80385c <msIN>
    256e:	90 91 5d 38 	lds	r25, 0x385D	; 0x80385d <msIN+0x1>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:174
    msPING = msIN - msOUT;
    2572:	a0 91 5e 38 	lds	r26, 0x385E	; 0x80385e <msIN+0x2>
    2576:	b0 91 5f 38 	lds	r27, 0x385F	; 0x80385f <msIN+0x3>
    257a:	40 91 91 38 	lds	r20, 0x3891	; 0x803891 <msOUT>
    257e:	50 91 92 38 	lds	r21, 0x3892	; 0x803892 <msOUT+0x1>
    2582:	60 91 93 38 	lds	r22, 0x3893	; 0x803893 <msOUT+0x2>
    2586:	70 91 94 38 	lds	r23, 0x3894	; 0x803894 <msOUT+0x3>
    258a:	84 1b       	sub	r24, r20
    258c:	95 0b       	sbc	r25, r21
    258e:	a6 0b       	sbc	r26, r22
    2590:	b7 0b       	sbc	r27, r23
    2592:	80 93 54 38 	sts	0x3854, r24	; 0x803854 <msPING>
    2596:	90 93 55 38 	sts	0x3855, r25	; 0x803855 <msPING+0x1>
    259a:	a0 93 56 38 	sts	0x3856, r26	; 0x803856 <msPING+0x2>
    259e:	b0 93 57 38 	sts	0x3857, r27	; 0x803857 <msPING+0x3>
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	80 93 88 38 	sts	0x3888, r24	; 0x803888 <needPing>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:175
    needPing = true;
    25a8:	08 95       	ret

000025aa <RLhelper_SX1278::read(unsigned char*, unsigned char)>:
_ZN15RLhelper_SX12784readEPhh():
    25aa:	cf 92       	push	r12
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:178
    return;
  }
}
    25ac:	df 92       	push	r13
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:210
	}
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
}

int RLhelper_SX1278::read(byte* buf, uint8_t len)
{
    25ae:	ef 92       	push	r14
    25b0:	ff 92       	push	r15
    25b2:	0f 93       	push	r16
    25b4:	1f 93       	push	r17
    25b6:	cf 93       	push	r28
    25b8:	df 93       	push	r29
    25ba:	7c 01       	movw	r14, r24
    25bc:	c6 2e       	mov	r12, r22
    25be:	c7 2f       	mov	r28, r23
    25c0:	d4 2e       	mov	r13, r20
    25c2:	63 e1       	ldi	r22, 0x13	; 19
    25c4:	ca de       	rcall	.-620    	; 0x235a <RLhelper_SX1278::readRegister(unsigned char)>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:212
	byte p = 0;
	byte available = readRegister(REG_RX_NB_BYTES);
    25c6:	d8 2f       	mov	r29, r24
    25c8:	0c 2d       	mov	r16, r12
    25ca:	1c 2f       	mov	r17, r28
    25cc:	c0 e0       	ldi	r28, 0x00	; 0
    25ce:	cd 17       	cp	r28, r29
    25d0:	51 f0       	breq	.+20     	; 0x25e6 <RLhelper_SX1278::read(unsigned char*, unsigned char)+0x3c>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:211
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
}

int RLhelper_SX1278::read(byte* buf, uint8_t len)
{
	byte p = 0;
    25d2:	cd 15       	cp	r28, r13
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:213
	byte available = readRegister(REG_RX_NB_BYTES);
	while (p < available && p < len)
    25d4:	41 f0       	breq	.+16     	; 0x25e6 <RLhelper_SX1278::read(unsigned char*, unsigned char)+0x3c>
    25d6:	60 e0       	ldi	r22, 0x00	; 0
    25d8:	c7 01       	movw	r24, r14
    25da:	bf de       	rcall	.-642    	; 0x235a <RLhelper_SX1278::readRegister(unsigned char)>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:215
	{
		buf[p++] = readRegister(REG_FIFO);
    25dc:	cf 5f       	subi	r28, 0xFF	; 255
    25de:	f8 01       	movw	r30, r16
    25e0:	81 93       	st	Z+, r24
    25e2:	8f 01       	movw	r16, r30
    25e4:	f4 cf       	rjmp	.-24     	; 0x25ce <RLhelper_SX1278::read(unsigned char*, unsigned char)+0x24>
    25e6:	8c 2f       	mov	r24, r28
    25e8:	90 e0       	ldi	r25, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:218
	}
	return p;
}
    25ea:	df 91       	pop	r29
    25ec:	cf 91       	pop	r28
    25ee:	1f 91       	pop	r17
    25f0:	0f 91       	pop	r16
    25f2:	ff 90       	pop	r15
    25f4:	ef 90       	pop	r14
    25f6:	df 90       	pop	r13
    25f8:	cf 90       	pop	r12
    25fa:	08 95       	ret

000025fc <RadioLinkClass::onRxDone(int)>:
_ZN14RadioLinkClass8onRxDoneEi():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:189
{
	RLhelper.end();
}

void RadioLinkClass::onRxDone(int packetSize)
{
    25fc:	1f 93       	push	r17
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:190
  if (packetSize == 0) return;
    2602:	ec 01       	movw	r28, r24
    2604:	00 97       	sbiw	r24, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:191
  if ((size_t)packetSize > sizeof(currentPacket)) packetSize = sizeof(currentPacket);
    2606:	59 f1       	breq	.+86     	; 0x265e <RadioLinkClass::onRxDone(int)+0x62>
    2608:	46 97       	sbiw	r24, 0x16	; 22
    260a:	10 f0       	brcs	.+4      	; 0x2610 <RadioLinkClass::onRxDone(int)+0x14>
    260c:	c5 e1       	ldi	r28, 0x15	; 21
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:193
  byte* raw = (byte*)&currentPacket;
  RLhelper.read(raw, packetSize);
    260e:	d0 e0       	ldi	r29, 0x00	; 0
    2610:	1c 2f       	mov	r17, r28
    2612:	4c 2f       	mov	r20, r28
    2614:	62 e6       	ldi	r22, 0x62	; 98
    2616:	78 e3       	ldi	r23, 0x38	; 56
    2618:	8d ef       	ldi	r24, 0xFD	; 253
    261a:	98 e3       	ldi	r25, 0x38	; 56
    261c:	c6 df       	rcall	.-116    	; 0x25aa <RLhelper_SX1278::read(unsigned char*, unsigned char)>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:195
  uint8_t crc = CRC_PRELOAD;
  for (uint8_t i = 0; i < packetSize-1; i++)
    261e:	30 e0       	ldi	r19, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:194
{
  if (packetSize == 0) return;
  if ((size_t)packetSize > sizeof(currentPacket)) packetSize = sizeof(currentPacket);
  byte* raw = (byte*)&currentPacket;
  RLhelper.read(raw, packetSize);
  uint8_t crc = CRC_PRELOAD;
    2620:	2a e5       	ldi	r18, 0x5A	; 90
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:195
  for (uint8_t i = 0; i < packetSize-1; i++)
    2622:	21 97       	sbiw	r28, 0x01	; 1
    2624:	83 2f       	mov	r24, r19
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	8c 17       	cp	r24, r28
    262a:	9d 07       	cpc	r25, r29
    262c:	3c f4       	brge	.+14     	; 0x263c <RadioLinkClass::onRxDone(int)+0x40>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:197
  {
	  crc += raw[i];
    262e:	8e 59       	subi	r24, 0x9E	; 158
    2630:	97 4c       	sbci	r25, 0xC7	; 199
    2632:	fc 01       	movw	r30, r24
    2634:	80 81       	ld	r24, Z
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:195
  if (packetSize == 0) return;
  if ((size_t)packetSize > sizeof(currentPacket)) packetSize = sizeof(currentPacket);
  byte* raw = (byte*)&currentPacket;
  RLhelper.read(raw, packetSize);
  uint8_t crc = CRC_PRELOAD;
  for (uint8_t i = 0; i < packetSize-1; i++)
    2636:	28 0f       	add	r18, r24
    2638:	3f 5f       	subi	r19, 0xFF	; 255
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:199
  {
	  crc += raw[i];
  }
  if (crc != currentPacket.crc)
    263a:	f4 cf       	rjmp	.-24     	; 0x2624 <RadioLinkClass::onRxDone(int)+0x28>
    263c:	80 91 76 38 	lds	r24, 0x3876	; 0x803876 <currentPacket+0x14>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:203
  {
	  return;
  }
  if (_onRxDone)
    2640:	28 13       	cpse	r18, r24
    2642:	0d c0       	rjmp	.+26     	; 0x265e <RadioLinkClass::onRxDone(int)+0x62>
    2644:	e0 91 7b 38 	lds	r30, 0x387B	; 0x80387b <_onRxDone>
    2648:	f0 91 7c 38 	lds	r31, 0x387C	; 0x80387c <_onRxDone+0x1>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:205
  {
	_onRxDone(packetSize, &currentPacket);
    264c:	30 97       	sbiw	r30, 0x00	; 0
    264e:	39 f0       	breq	.+14     	; 0x265e <RadioLinkClass::onRxDone(int)+0x62>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:207
  }
}
    2650:	62 e6       	ldi	r22, 0x62	; 98
    2652:	78 e3       	ldi	r23, 0x38	; 56
    2654:	81 2f       	mov	r24, r17
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:205
  {
	  return;
  }
  if (_onRxDone)
  {
	_onRxDone(packetSize, &currentPacket);
    2656:	df 91       	pop	r29
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:207
  }
}
    2658:	cf 91       	pop	r28
    265a:	1f 91       	pop	r17
    265c:	09 94       	ijmp
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:258
	}
	return map(rssi, -128, -10, 0, 100);
}

void RLhelper_SX1278::handleDintRise()
{
    265e:	df 91       	pop	r29
    2660:	cf 91       	pop	r28
    2662:	1f 91       	pop	r17
    2664:	08 95       	ret

00002666 <RLhelper_SX1278::handleDintRise()>:
_ZN15RLhelper_SX127814handleDintRiseEv():
    2666:	0f 93       	push	r16
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:259
	int irqFlags = readRegister(REG_IRQ_FLAGS);
    2668:	1f 93       	push	r17
    266a:	cf 93       	push	r28
    266c:	df 93       	push	r29
    266e:	ec 01       	movw	r28, r24
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:292
	return singleTransfer(address & 0x7f, 0x00);
}

void RLhelper_SX1278::writeRegister(uint8_t address, uint8_t value)
{
	singleTransfer(address | 0x80, value);
    2670:	62 e1       	ldi	r22, 0x12	; 18
    2672:	73 de       	rcall	.-794    	; 0x235a <RLhelper_SX1278::readRegister(unsigned char)>
    2674:	18 2f       	mov	r17, r24
writeRegister():
    2676:	48 2f       	mov	r20, r24
    2678:	62 e9       	ldi	r22, 0x92	; 146
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:262
void RLhelper_SX1278::handleDintRise()
{
	int irqFlags = readRegister(REG_IRQ_FLAGS);
	// clear IRQ's
	writeRegister(REG_IRQ_FLAGS, irqFlags);
	if ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0)
    267a:	ce 01       	movw	r24, r28
    267c:	28 de       	rcall	.-944    	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
_ZN15RLhelper_SX127814handleDintRiseEv():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:264
	{
		if ((irqFlags & IRQ_RX_DONE_MASK) != 0)
    267e:	15 fd       	sbrc	r17, 5
    2680:	23 c0       	rjmp	.+70     	; 0x26c8 <RLhelper_SX1278::handleDintRise()+0x62>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:267
		{
			// received a packet
			int packetLength = readRegister(REG_RX_NB_BYTES);
    2682:	16 ff       	sbrs	r17, 6
    2684:	16 c0       	rjmp	.+44     	; 0x26b2 <RLhelper_SX1278::handleDintRise()+0x4c>
    2686:	63 e1       	ldi	r22, 0x13	; 19
    2688:	ce 01       	movw	r24, r28
    268a:	67 de       	rcall	.-818    	; 0x235a <RLhelper_SX1278::readRegister(unsigned char)>
    268c:	08 2f       	mov	r16, r24
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:269
			// set FIFO address to current RX address
			writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
    268e:	10 e0       	ldi	r17, 0x00	; 0
    2690:	60 e1       	ldi	r22, 0x10	; 16
    2692:	ce 01       	movw	r24, r28
    2694:	62 de       	rcall	.-828    	; 0x235a <RLhelper_SX1278::readRegister(unsigned char)>
writeRegister():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:292
	return singleTransfer(address & 0x7f, 0x00);
}

void RLhelper_SX1278::writeRegister(uint8_t address, uint8_t value)
{
	singleTransfer(address | 0x80, value);
    2696:	48 2f       	mov	r20, r24
    2698:	6d e8       	ldi	r22, 0x8D	; 141
    269a:	ce 01       	movw	r24, r28
    269c:	18 de       	rcall	.-976    	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
_ZN15RLhelper_SX127814handleDintRiseEv():
    269e:	ea 81       	ldd	r30, Y+2	; 0x02
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:270
		{
			// received a packet
			int packetLength = readRegister(REG_RX_NB_BYTES);
			// set FIFO address to current RX address
			writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
			if (_onInternalRxDone)
    26a0:	fb 81       	ldd	r31, Y+3	; 0x03
    26a2:	30 97       	sbiw	r30, 0x00	; 0
    26a4:	89 f0       	breq	.+34     	; 0x26c8 <RLhelper_SX1278::handleDintRise()+0x62>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:272
			{
				_onInternalRxDone(packetLength);
    26a6:	c8 01       	movw	r24, r16
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:283
			{
				_onInternalTxDone();
			}
		}
	}
}
    26a8:	df 91       	pop	r29
    26aa:	cf 91       	pop	r28
    26ac:	1f 91       	pop	r17
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:272
			int packetLength = readRegister(REG_RX_NB_BYTES);
			// set FIFO address to current RX address
			writeRegister(REG_FIFO_ADDR_PTR, readRegister(REG_FIFO_RX_CURRENT_ADDR));
			if (_onInternalRxDone)
			{
				_onInternalRxDone(packetLength);
    26ae:	0f 91       	pop	r16
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:275
			}
		}
		else if ((irqFlags & IRQ_TX_DONE_MASK) != 0)
    26b0:	09 94       	ijmp
    26b2:	13 ff       	sbrs	r17, 3
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:277
		{
			if (_onInternalTxDone)
    26b4:	09 c0       	rjmp	.+18     	; 0x26c8 <RLhelper_SX1278::handleDintRise()+0x62>
    26b6:	ec 81       	ldd	r30, Y+4	; 0x04
    26b8:	fd 81       	ldd	r31, Y+5	; 0x05
    26ba:	30 97       	sbiw	r30, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:283
			{
				_onInternalTxDone();
			}
		}
	}
}
    26bc:	29 f0       	breq	.+10     	; 0x26c8 <RLhelper_SX1278::handleDintRise()+0x62>
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	1f 91       	pop	r17
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:279
		}
		else if ((irqFlags & IRQ_TX_DONE_MASK) != 0)
		{
			if (_onInternalTxDone)
			{
				_onInternalTxDone();
    26c4:	0f 91       	pop	r16
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:283
			}
		}
	}
}
    26c6:	09 94       	ijmp
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	1f 91       	pop	r17
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:163
void (*_onTxDone)();
uint8_t _TXdone = 0;

ISR_PREFIX void RLhelper_base::onDintRise()
{
  RLhelper.handleDintRise();
    26ce:	0f 91       	pop	r16
    26d0:	08 95       	ret

000026d2 <RLhelper_base::onDintRise()>:
_ZN13RLhelper_base10onDintRiseEv():
    26d2:	8d ef       	ldi	r24, 0xFD	; 253
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:241
	endPacket();
	return len;
}

int RLhelper_SX1278::receiveMode()
{
    26d4:	98 e3       	ldi	r25, 0x38	; 56
    26d6:	c7 cf       	rjmp	.-114    	; 0x2666 <RLhelper_SX1278::handleDintRise()>

000026d8 <RLhelper_SX1278::receiveMode()>:
_ZN15RLhelper_SX127811receiveModeEv():
    26d8:	cf 93       	push	r28
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:292
	return singleTransfer(address & 0x7f, 0x00);
}

void RLhelper_SX1278::writeRegister(uint8_t address, uint8_t value)
{
	singleTransfer(address | 0x80, value);
    26da:	df 93       	push	r29
    26dc:	ec 01       	movw	r28, r24
writeRegister():
    26de:	40 e0       	ldi	r20, 0x00	; 0
    26e0:	60 ec       	ldi	r22, 0xC0	; 192
    26e2:	f5 dd       	rcall	.-1046   	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
    26e4:	45 e8       	ldi	r20, 0x85	; 133
    26e6:	61 e8       	ldi	r22, 0x81	; 129
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:245
int RLhelper_SX1278::receiveMode()
{
	writeRegister(REG_DIO_MAPPING_1, 0x00); // DIO0 => RXDONE
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
	return 1;
}
    26e8:	ce 01       	movw	r24, r28
    26ea:	f1 dd       	rcall	.-1054   	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
_ZN15RLhelper_SX127811receiveModeEv():
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	df 91       	pop	r29
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:211
  }
}

void RadioLinkClass::onTxDone()
{
  _TXdone = true;
    26f2:	cf 91       	pop	r28
    26f4:	08 95       	ret

000026f6 <RadioLinkClass::onTxDone()>:
_ZN14RadioLinkClass8onTxDoneEv():
    26f6:	81 e0       	ldi	r24, 0x01	; 1
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:212
  RLhelper.receiveMode();
    26f8:	80 93 7d 38 	sts	0x387D, r24	; 0x80387d <_TXdone>
    26fc:	8d ef       	ldi	r24, 0xFD	; 253
    26fe:	98 e3       	ldi	r25, 0x38	; 56
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:213
  if (_onTxDone)
    2700:	eb df       	rcall	.-42     	; 0x26d8 <RLhelper_SX1278::receiveMode()>
    2702:	e0 91 79 38 	lds	r30, 0x3879	; 0x803879 <_onTxDone>
    2706:	f0 91 7a 38 	lds	r31, 0x387A	; 0x80387a <_onTxDone+0x1>
    270a:	30 97       	sbiw	r30, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:215
  {
	_onTxDone();
    270c:	09 f0       	breq	.+2      	; 0x2710 <RadioLinkClass::onTxDone()+0x1a>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:217
  }
}
    270e:	09 94       	ijmp
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:221
	}
	return p;
}

int RLhelper_SX1278::write(byte* buf, uint8_t len)
{
    2710:	08 95       	ret

00002712 <RLhelper_SX1278::write(unsigned char*, unsigned char)>:
_ZN15RLhelper_SX12785writeEPhh():
    2712:	af 92       	push	r10
    2714:	bf 92       	push	r11
    2716:	df 92       	push	r13
    2718:	ef 92       	push	r14
    271a:	ff 92       	push	r15
    271c:	0f 93       	push	r16
    271e:	1f 93       	push	r17
    2720:	cf 93       	push	r28
    2722:	df 93       	push	r29
    2724:	ec 01       	movw	r28, r24
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:426
	writeRegister(REG_OCP, 0x20 | (0x1F & ocpTrim));
}

int RLhelper_SX1278::beginPacket()
{
	if (isTransmitting()) {
    2726:	5b 01       	movw	r10, r22
    2728:	d4 2e       	mov	r13, r20
beginPacket():
    272a:	e8 81       	ld	r30, Y
    272c:	f9 81       	ldd	r31, Y+1	; 0x01
    272e:	00 8c       	ldd	r0, Z+24	; 0x18
    2730:	f1 8d       	ldd	r31, Z+25	; 0x19
    2732:	e0 2d       	mov	r30, r0
    2734:	09 95       	icall
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:430
		return 0;
	}
	// put in standby mode
	idle();
    2736:	81 11       	cpse	r24, r1
    2738:	0f c0       	rjmp	.+30     	; 0x2758 <RLhelper_SX1278::write(unsigned char*, unsigned char)+0x46>
    273a:	e8 81       	ld	r30, Y
    273c:	f9 81       	ldd	r31, Y+1	; 0x01
    273e:	00 84       	ldd	r0, Z+8	; 0x08
    2740:	f1 85       	ldd	r31, Z+9	; 0x09
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:292
	return singleTransfer(address & 0x7f, 0x00);
}

void RLhelper_SX1278::writeRegister(uint8_t address, uint8_t value)
{
	singleTransfer(address | 0x80, value);
    2742:	e0 2d       	mov	r30, r0
    2744:	ce 01       	movw	r24, r28
    2746:	09 95       	icall
writeRegister():
    2748:	40 e0       	ldi	r20, 0x00	; 0
    274a:	6d e8       	ldi	r22, 0x8D	; 141
    274c:	ce 01       	movw	r24, r28
    274e:	bf dd       	rcall	.-1154   	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
    2750:	40 e0       	ldi	r20, 0x00	; 0
    2752:	62 ea       	ldi	r22, 0xA2	; 162
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:221
	}
	return p;
}

int RLhelper_SX1278::write(byte* buf, uint8_t len)
{
    2754:	ce 01       	movw	r24, r28
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:229
	if (len > MAX_PKT_LENGTH)
	{
		len = MAX_PKT_LENGTH;
	}
	// write data
	for (size_t i = 0; i < len; i++)
    2756:	bb dd       	rcall	.-1162   	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
_ZN15RLhelper_SX12785writeEPhh():
    2758:	85 01       	movw	r16, r10
    275a:	ed 2c       	mov	r14, r13
    275c:	f1 2c       	mov	r15, r1
    275e:	c8 01       	movw	r24, r16
    2760:	8a 19       	sub	r24, r10
    2762:	9b 09       	sbc	r25, r11
    2764:	8e 15       	cp	r24, r14
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:231
	{
		writeRegister(REG_FIFO, buf[i]);
    2766:	9f 05       	cpc	r25, r15
    2768:	38 f4       	brcc	.+14     	; 0x2778 <RLhelper_SX1278::write(unsigned char*, unsigned char)+0x66>
    276a:	f8 01       	movw	r30, r16
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:292
	return singleTransfer(address & 0x7f, 0x00);
}

void RLhelper_SX1278::writeRegister(uint8_t address, uint8_t value)
{
	singleTransfer(address | 0x80, value);
    276c:	41 91       	ld	r20, Z+
    276e:	8f 01       	movw	r16, r30
writeRegister():
    2770:	60 e8       	ldi	r22, 0x80	; 128
    2772:	ce 01       	movw	r24, r28
    2774:	ac dd       	rcall	.-1192   	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
    2776:	f3 cf       	rjmp	.-26     	; 0x275e <RLhelper_SX1278::write(unsigned char*, unsigned char)+0x4c>
    2778:	4d 2d       	mov	r20, r13
    277a:	62 ea       	ldi	r22, 0xA2	; 162
    277c:	ce 01       	movw	r24, r28
    277e:	a7 dd       	rcall	.-1202   	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
endPacket():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:440
	return 1;
}

int RLhelper_SX1278::endPacket()
{
	if (_onInternalTxDone)
    2780:	8c 81       	ldd	r24, Y+4	; 0x04
    2782:	9d 81       	ldd	r25, Y+5	; 0x05
    2784:	89 2b       	or	r24, r25
    2786:	21 f0       	breq	.+8      	; 0x2790 <RLhelper_SX1278::write(unsigned char*, unsigned char)+0x7e>
writeRegister():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:292
	return singleTransfer(address & 0x7f, 0x00);
}

void RLhelper_SX1278::writeRegister(uint8_t address, uint8_t value)
{
	singleTransfer(address | 0x80, value);
    2788:	40 e4       	ldi	r20, 0x40	; 64
    278a:	60 ec       	ldi	r22, 0xC0	; 192
    278c:	ce 01       	movw	r24, r28
    278e:	9f dd       	rcall	.-1218   	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
    2790:	43 e8       	ldi	r20, 0x83	; 131
    2792:	61 e8       	ldi	r22, 0x81	; 129
    2794:	ce 01       	movw	r24, r28
    2796:	9b dd       	rcall	.-1226   	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
_ZN15RLhelper_SX12785writeEPhh():
    2798:	c7 01       	movw	r24, r14
    279a:	df 91       	pop	r29
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:238
	// update length
	writeRegister(REG_PAYLOAD_LENGTH, len);
	//
	endPacket();
	return len;
}
    279c:	cf 91       	pop	r28
    279e:	1f 91       	pop	r17
    27a0:	0f 91       	pop	r16
    27a2:	ff 90       	pop	r15
    27a4:	ef 90       	pop	r14
    27a6:	df 90       	pop	r13
    27a8:	bf 90       	pop	r11
    27aa:	af 90       	pop	r10
    27ac:	08 95       	ret

000027ae <RLhelper_SX1278::setTxPower(int)>:
_ZN15RLhelper_SX127810setTxPowerEi():
    27ae:	0f 93       	push	r16
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:183
		pinMode(_reset, INPUT);
	}
}

void RLhelper_SX1278::setTxPower(int level)
{
    27b0:	1f 93       	push	r17
    27b2:	cf 93       	push	r28
    27b4:	df 93       	push	r29
    27b6:	8c 01       	movw	r16, r24
    27b8:	eb 01       	movw	r28, r22
    27ba:	62 31       	cpi	r22, 0x12	; 18
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:185
    // PA BOOST
    if (level > 17)
    27bc:	71 05       	cpc	r23, r1
    27be:	c4 f0       	brlt	.+48     	; 0x27f0 <RLhelper_SX1278::setTxPower(int)+0x42>
    27c0:	65 31       	cpi	r22, 0x15	; 21
    27c2:	71 05       	cpc	r23, r1
    27c4:	14 f0       	brlt	.+4      	; 0x27ca <RLhelper_SX1278::setTxPower(int)+0x1c>
    27c6:	c4 e1       	ldi	r28, 0x14	; 20
    27c8:	d0 e0       	ldi	r29, 0x00	; 0
    27ca:	23 97       	sbiw	r28, 0x03	; 3
writeRegister():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:192
		if (level > 20)
		{
			level = 20;
		}
		// subtract 3 from level, so 18 - 20 maps to 15 - 17
		level -= 3;
    27cc:	47 e8       	ldi	r20, 0x87	; 135
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:292
	return singleTransfer(address & 0x7f, 0x00);
}

void RLhelper_SX1278::writeRegister(uint8_t address, uint8_t value)
{
	singleTransfer(address | 0x80, value);
    27ce:	6d ec       	ldi	r22, 0xCD	; 205
    27d0:	c8 01       	movw	r24, r16
    27d2:	7d dd       	rcall	.-1286   	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
    27d4:	41 e3       	ldi	r20, 0x31	; 49
    27d6:	6b e8       	ldi	r22, 0x8B	; 139
    27d8:	c8 01       	movw	r24, r16
    27da:	79 dd       	rcall	.-1294   	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
_ZN15RLhelper_SX127810setTxPowerEi():
    27dc:	4c 2f       	mov	r20, r28
    27de:	42 50       	subi	r20, 0x02	; 2
    27e0:	40 68       	ori	r20, 0x80	; 128
writeRegister():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:206
		}
		//Default value PA_HF/LF or +17dBm
		writeRegister(REG_PA_DAC, 0x84);
		setOCP(100);
	}
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
    27e2:	69 e8       	ldi	r22, 0x89	; 137
    27e4:	c8 01       	movw	r24, r16
_ZN15RLhelper_SX127810setTxPowerEi():
    27e6:	df 91       	pop	r29
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:292
	return singleTransfer(address & 0x7f, 0x00);
}

void RLhelper_SX1278::writeRegister(uint8_t address, uint8_t value)
{
	singleTransfer(address | 0x80, value);
    27e8:	cf 91       	pop	r28
    27ea:	1f 91       	pop	r17
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:207
		//Default value PA_HF/LF or +17dBm
		writeRegister(REG_PA_DAC, 0x84);
		setOCP(100);
	}
    writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
}
    27ec:	0f 91       	pop	r16
writeRegister():
    27ee:	6f cd       	rjmp	.-1314   	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
    27f0:	62 30       	cpi	r22, 0x02	; 2
    27f2:	71 05       	cpc	r23, r1
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:292
	return singleTransfer(address & 0x7f, 0x00);
}

void RLhelper_SX1278::writeRegister(uint8_t address, uint8_t value)
{
	singleTransfer(address | 0x80, value);
    27f4:	14 f4       	brge	.+4      	; 0x27fa <RLhelper_SX1278::setTxPower(int)+0x4c>
    27f6:	c2 e0       	ldi	r28, 0x02	; 2
    27f8:	d0 e0       	ldi	r29, 0x00	; 0
    27fa:	44 e8       	ldi	r20, 0x84	; 132
    27fc:	6d ec       	ldi	r22, 0xCD	; 205
    27fe:	c8 01       	movw	r24, r16
    2800:	66 dd       	rcall	.-1332   	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
    2802:	4b e2       	ldi	r20, 0x2B	; 43
    2804:	e8 cf       	rjmp	.-48     	; 0x27d6 <RLhelper_SX1278::setTxPower(int)+0x28>

00002806 <pinMode>:
pinMode():
    2806:	82 31       	cpi	r24, 0x12	; 18
    2808:	f0 f4       	brcc	.+60     	; 0x2846 <pinMode+0x40>
check_valid_digital_pin():
    280a:	90 e0       	ldi	r25, 0x00	; 0
pinMode():
    280c:	fc 01       	movw	r30, r24
    280e:	eb 5d       	subi	r30, 0xDB	; 219
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:44
}

void pinMode(uint8_t pin, uint8_t mode) {
  check_valid_digital_pin(pin);         /* generate compile error if a constant that is not a valid pin is used as the pin */
  check_valid_pin_mode(mode);           /* generate compile error if a constant that is not a valid pin mode is used as the mode */
  uint8_t bit_mask = digitalPinToBitMask(pin);
    2810:	f6 43       	sbci	r31, 0x36	; 54
    2812:	20 81       	ld	r18, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/Arduino.h:873
    2814:	2f 3f       	cpi	r18, 0xFF	; 255
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:44
    2816:	b9 f0       	breq	.+46     	; 0x2846 <pinMode+0x40>
    2818:	fc 01       	movw	r30, r24
    281a:	ed 5e       	subi	r30, 0xED	; 237
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:45
  if ((bit_mask == NOT_A_PIN) || (mode > INPUT_PULLUP)) {
    281c:	f6 43       	sbci	r31, 0x36	; 54
    281e:	e0 81       	ld	r30, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:48
    return;                             /* ignore invalid pins passed at runtime */
  }
  volatile uint8_t * port_base = (volatile uint8_t *) (uint16_t) ((&PORTA) + digitalPinToPort(pin));
    2820:	30 e2       	ldi	r19, 0x20	; 32
    2822:	e3 9f       	mul	r30, r19
    2824:	f0 01       	movw	r30, r0
    2826:	11 24       	eor	r1, r1
    2828:	fc 5f       	subi	r31, 0xFC	; 252
    282a:	60 ff       	sbrs	r22, 0
    282c:	0d c0       	rjmp	.+26     	; 0x2848 <pinMode+0x42>
    282e:	21 83       	std	Z+1, r18	; 0x01
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:49
  if (mode & 0x01) {
    2830:	8f 5f       	subi	r24, 0xFF	; 255
    2832:	96 43       	sbci	r25, 0x36	; 54
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:51
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
    2834:	dc 01       	movw	r26, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:77
  // then load with displacement 2 clocks. IFF the compiler puts this pointer into Y or Z, it is faster and smaller
  // by 2 bytes and one clock. And let's hope it is, because the code above would suck too if it was in X.
  // Handwritten assembly that exploited the knowledge that there will never be a carry would save 1 word and 1 clock.
  // and could probably save at least several times that in initializing the port_base pointer. But if you're using
  // pinMode you probably don't care.
  port_base += (uint8_t) digitalPinToBitPosition(pin);
    2836:	8c 91       	ld	r24, X
    2838:	e8 0f       	add	r30, r24
    283a:	f1 1d       	adc	r31, r1
    283c:	80 89       	ldd	r24, Z+16	; 0x10
    283e:	61 ff       	sbrs	r22, 1
    2840:	05 c0       	rjmp	.+10     	; 0x284c <pinMode+0x46>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:78
  bit_mask = *(port_base + 0x10);
    2842:	88 60       	ori	r24, 0x08	; 8
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:79
  if (mode & 2) {
    2844:	80 8b       	std	Z+16, r24	; 0x10
    2846:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:80
    bit_mask |= 0x08;
    2848:	22 83       	std	Z+2, r18	; 0x02
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:84
  } else {
    bit_mask &= 0xF7;
  }
  *(port_base + 0x10) = bit_mask;
    284a:	f2 cf       	rjmp	.-28     	; 0x2830 <pinMode+0x2a>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:85
}
    284c:	87 7f       	andi	r24, 0xF7	; 247
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:53
  volatile uint8_t * port_base = (volatile uint8_t *) (uint16_t) ((&PORTA) + digitalPinToPort(pin));
  if (mode & 0x01) {
    // OUTPUT mode, so write DIRSET with the mask.
    *(port_base + 1) = bit_mask;
  } else { // otherwise it's input so we write DIRCLR
    *(port_base + 2) = bit_mask;
    284e:	fa cf       	rjmp	.-12     	; 0x2844 <pinMode+0x3e>

00002850 <RLhelper_SX1278::onInternalRxDone(void (*)(int)) [clone .part.0]>:
_ZN15RLhelper_SX127816onInternalRxDoneEPFviE.part.0():
    2850:	cf 93       	push	r28
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:82
  port_base += (uint8_t) digitalPinToBitPosition(pin);
  bit_mask = *(port_base + 0x10);
  if (mode & 2) {
    bit_mask |= 0x08;
  } else {
    bit_mask &= 0xF7;
    2852:	df 93       	push	r29
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:462
		writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
	}
	return false;
}

void RLhelper_SX1278::onInternalRxDone(void(*callback)(int))
    2854:	ec 01       	movw	r28, r24
    2856:	60 e0       	ldi	r22, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:466
{
	_onInternalRxDone = callback;
	if (callback) {
		pinMode(_dint, INPUT);
    2858:	8e 81       	ldd	r24, Y+6	; 0x06
    285a:	d5 df       	rcall	.-86     	; 0x2806 <pinMode>
    285c:	8e 81       	ldd	r24, Y+6	; 0x06
attachInterrupt():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:467
		attachInterrupt(digitalPinToInterrupt(_dint), onDintRise, RISING);
    285e:	82 31       	cpi	r24, 0x12	; 18
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:79
   * of which there are only 7 ports worth of registers available. So this implementation is guaranteed not to work on a
   * future part with 8 ports anyway. We will cross that bridge once Microchip has announced intent to build it.
   */

  void  attachInterrupt(uint8_t pin, void (*userFunc)(void), uint8_t mode) {
    uint8_t bitpos = digitalPinToBitPosition(pin);
    2860:	88 f5       	brcc	.+98     	; 0x28c4 <RLhelper_SX1278::onInternalRxDone(void (*)(int)) [clone .part.0]+0x74>
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	fc 01       	movw	r30, r24
    2866:	ef 5f       	subi	r30, 0xFF	; 255
    2868:	f6 43       	sbci	r31, 0x36	; 54
    286a:	e0 81       	ld	r30, Z
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:80
    if (bitpos == NOT_A_PIN) {
    286c:	ef 3f       	cpi	r30, 0xFF	; 255
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:83
      return;
    }
    uint8_t port = digitalPinToPort(pin);
    286e:	51 f1       	breq	.+84     	; 0x28c4 <RLhelper_SX1278::onInternalRxDone(void (*)(int)) [clone .part.0]+0x74>
    2870:	8d 5e       	subi	r24, 0xED	; 237
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:100
        mode = PORT_ISC_LEVEL_gc;
        break;
      default:
        return;
    }
    if (intFunc[port] != NULL && userFunc != NULL) {
    2872:	96 43       	sbci	r25, 0x36	; 54
    2874:	dc 01       	movw	r26, r24
    2876:	8c 91       	ld	r24, X
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	dc 01       	movw	r26, r24
    287c:	aa 0f       	add	r26, r26
    287e:	bb 1f       	adc	r27, r27
    2880:	a0 50       	subi	r26, 0x00	; 0
    2882:	b8 4c       	sbci	r27, 0xC8	; 200
    2884:	2d 91       	ld	r18, X+
    2886:	3c 91       	ld	r19, X
    2888:	21 15       	cp	r18, r1
    288a:	31 05       	cpc	r19, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:102
      // if it is null the port is not enabled for attachInterrupt, and obviously a null user function is invalid too.
      intFunc[port][bitpos] = userFunc;
    288c:	d9 f0       	breq	.+54     	; 0x28c4 <RLhelper_SX1278::onInternalRxDone(void (*)(int)) [clone .part.0]+0x74>
    288e:	4e 2f       	mov	r20, r30
    2890:	50 e0       	ldi	r21, 0x00	; 0
    2892:	44 0f       	add	r20, r20
    2894:	55 1f       	adc	r21, r21
    2896:	24 0f       	add	r18, r20
    2898:	35 1f       	adc	r19, r21
    289a:	49 e6       	ldi	r20, 0x69	; 105
    289c:	53 e1       	ldi	r21, 0x13	; 19
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:104
      uint8_t portoffset = ((port << 5) & 0xE0) + 0x10 + bitpos;
      uint8_t oldSREG = SREG;
    289e:	d9 01       	movw	r26, r18
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:103
        return;
    }
    if (intFunc[port] != NULL && userFunc != NULL) {
      // if it is null the port is not enabled for attachInterrupt, and obviously a null user function is invalid too.
      intFunc[port][bitpos] = userFunc;
      uint8_t portoffset = ((port << 5) & 0xE0) + 0x10 + bitpos;
    28a0:	4d 93       	st	X+, r20
    28a2:	5c 93       	st	X, r21
    28a4:	2f b7       	in	r18, 0x3f	; 63
    28a6:	f8 94       	cli
    28a8:	e0 5f       	subi	r30, 0xF0	; 240
    28aa:	75 e0       	ldi	r23, 0x05	; 5
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:107
      uint8_t oldSREG = SREG;
      cli();
      // We now have the port, the mode, the bitpos and the pointer
      uint8_t settings = *(portbase + portoffset) & 0xF8;
    28ac:	88 0f       	add	r24, r24
    28ae:	99 1f       	adc	r25, r25
    28b0:	7a 95       	dec	r23
    28b2:	e1 f7       	brne	.-8      	; 0x28ac <RLhelper_SX1278::onInternalRxDone(void (*)(int)) [clone .part.0]+0x5c>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:108
      *(portbase + portoffset) = settings | mode;
    28b4:	e8 0f       	add	r30, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:109
      SREG = oldSREG;
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:471
		} else {
		detachInterrupt(digitalPinToInterrupt(_dint));
	}
}
    28b8:	fc 5f       	subi	r31, 0xFC	; 252
    28ba:	80 81       	ld	r24, Z
    28bc:	88 7f       	andi	r24, 0xF8	; 248
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:475

void RLhelper_SX1278::onInternalTxDone(void(*callback)())
{
	_onInternalTxDone = callback;
    28be:	82 60       	ori	r24, 0x02	; 2
    28c0:	80 83       	st	Z, r24
    28c2:	2f bf       	out	0x3f, r18	; 63
_ZN15RLhelper_SX127816onInternalRxDoneEPFviE.part.0():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:476
	if (callback) {
    28c4:	df 91       	pop	r29
    28c6:	cf 91       	pop	r28
    28c8:	08 95       	ret

000028ca <RLhelper_SX1278::onInternalTxDone(void (*)())>:
_ZN15RLhelper_SX127816onInternalTxDoneEPFvvE():
    28ca:	fc 01       	movw	r30, r24
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:480
		pinMode(_dint, INPUT);
		attachInterrupt(digitalPinToInterrupt(_dint), onDintRise, RISING);
		} else {
		detachInterrupt(digitalPinToInterrupt(_dint));
    28cc:	64 83       	std	Z+4, r22	; 0x04
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:288
  }
#endif

  void detachInterrupt(uint8_t pin) {
    /* Get bit position and check pin validity */
    uint8_t bitpos = digitalPinToBitPosition(pin);
    28ce:	75 83       	std	Z+5, r23	; 0x05
    28d0:	67 2b       	or	r22, r23
    28d2:	09 f0       	breq	.+2      	; 0x28d6 <RLhelper_SX1278::onInternalTxDone(void (*)())+0xc>
    28d4:	bd cf       	rjmp	.-134    	; 0x2850 <RLhelper_SX1278::onInternalRxDone(void (*)(int)) [clone .part.0]>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:482
	}
}
    28d6:	86 81       	ldd	r24, Z+6	; 0x06
detachInterrupt():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:464
	return false;
}

void RLhelper_SX1278::onInternalRxDone(void(*callback)(int))
{
	_onInternalRxDone = callback;
    28d8:	82 31       	cpi	r24, 0x12	; 18
    28da:	10 f4       	brcc	.+4      	; 0x28e0 <RLhelper_SX1278::onInternalTxDone(void (*)())+0x16>
    28dc:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <detachInterrupt.part.1>
_ZN15RLhelper_SX127816onInternalTxDoneEPFvvE():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:465
	if (callback) {
    28e0:	08 95       	ret

000028e2 <RLhelper_SX1278::onInternalRxDone(void (*)(int))>:
_ZN15RLhelper_SX127816onInternalRxDoneEPFviE():
    28e2:	fc 01       	movw	r30, r24
    28e4:	62 83       	std	Z+2, r22	; 0x02
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:469
		pinMode(_dint, INPUT);
		attachInterrupt(digitalPinToInterrupt(_dint), onDintRise, RISING);
		} else {
		detachInterrupt(digitalPinToInterrupt(_dint));
    28e6:	73 83       	std	Z+3, r23	; 0x03
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:288
    28e8:	67 2b       	or	r22, r23
    28ea:	09 f0       	breq	.+2      	; 0x28ee <RLhelper_SX1278::onInternalRxDone(void (*)(int))+0xc>
    28ec:	b1 cf       	rjmp	.-158    	; 0x2850 <RLhelper_SX1278::onInternalRxDone(void (*)(int)) [clone .part.0]>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:471
	}
}
    28ee:	86 81       	ldd	r24, Z+6	; 0x06
detachInterrupt():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:155
	idle();
	return 1;
}

void RLhelper_SX1278::end()
{
    28f0:	82 31       	cpi	r24, 0x12	; 18
    28f2:	10 f4       	brcc	.+4      	; 0x28f8 <RLhelper_SX1278::onInternalRxDone(void (*)(int))+0x16>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:156
	_spi->end();
    28f4:	0c 94 db 07 	jmp	0xfb6	; 0xfb6 <detachInterrupt.part.1>
_ZN15RLhelper_SX127816onInternalRxDoneEPFviE():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:183
  SPI0.CTRLA = settings.ctrla;
  SPI0.CTRLB = settings.ctrlb;
}

void SPIClass::end() {
  SPI0.CTRLA &= ~(SPI_ENABLE_bm);
    28f8:	08 95       	ret

000028fa <RLhelper_SX1278::end()>:
_ZN15RLhelper_SX12783endEv():
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29
    28fe:	ec 01       	movw	r28, r24
    2900:	eb 85       	ldd	r30, Y+11	; 0x0b
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:184
  initialized = false;
    2902:	fc 85       	ldd	r31, Y+12	; 0x0c
end():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:169
			pinMode(RL_NEW_SCLK, INPUT);
			pinMode(RL_NEW_MISO, INPUT);
			pinMode(RL_NEW_MOSI, INPUT);
		} else
		{
			pinMode(SCK, INPUT);
    2904:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <u8g2_cb_r0+0x7f3e8d>
    2908:	8e 7f       	andi	r24, 0xFE	; 254
    290a:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <u8g2_cb_r0+0x7f3e8d>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:170
			pinMode(MISO, INPUT);
    290e:	17 82       	std	Z+7, r1	; 0x07
_ZN15RLhelper_SX12783endEv():
    2910:	60 e0       	ldi	r22, 0x00	; 0
    2912:	80 e1       	ldi	r24, 0x10	; 16
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:171
			pinMode(MOSI, INPUT);
    2914:	78 df       	rcall	.-272    	; 0x2806 <pinMode>
    2916:	60 e0       	ldi	r22, 0x00	; 0
    2918:	8f e0       	ldi	r24, 0x0F	; 15
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:175
		}
	#endif
	// setup pins
	pinMode(_ss, INPUT);
    291a:	75 df       	rcall	.-278    	; 0x2806 <pinMode>
    291c:	60 e0       	ldi	r22, 0x00	; 0
    291e:	8e e0       	ldi	r24, 0x0E	; 14
    2920:	72 df       	rcall	.-284    	; 0x2806 <pinMode>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:176
	if (_reset != 0xFF)
    2922:	60 e0       	ldi	r22, 0x00	; 0
    2924:	89 85       	ldd	r24, Y+9	; 0x09
    2926:	6f df       	rcall	.-290    	; 0x2806 <pinMode>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:178
	{
		pinMode(_reset, INPUT);
    2928:	8d 85       	ldd	r24, Y+13	; 0x0d
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:180
	}
}
    292a:	8f 3f       	cpi	r24, 0xFF	; 255
    292c:	21 f0       	breq	.+8      	; 0x2936 <RLhelper_SX1278::end()+0x3c>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:178
	#endif
	// setup pins
	pinMode(_ss, INPUT);
	if (_reset != 0xFF)
	{
		pinMode(_reset, INPUT);
    292e:	60 e0       	ldi	r22, 0x00	; 0
    2930:	df 91       	pop	r29
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:180
	}
}
    2932:	cf 91       	pop	r28
    2934:	68 cf       	rjmp	.-304    	; 0x2806 <pinMode>
    2936:	df 91       	pop	r29
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:101
	_spi = RL_DEFAULT_SPI;
	_frequency = 0;
}

int RLhelper_SX1278::begin(long frequency)
{
    2938:	cf 91       	pop	r28
    293a:	08 95       	ret

0000293c <RLhelper_SX1278::begin(long)>:
_ZN15RLhelper_SX12785beginEl():
    293c:	8f 92       	push	r8
    293e:	9f 92       	push	r9
    2940:	af 92       	push	r10
    2942:	bf 92       	push	r11
    2944:	cf 92       	push	r12
    2946:	df 92       	push	r13
    2948:	ef 92       	push	r14
    294a:	ff 92       	push	r15
    294c:	0f 93       	push	r16
    294e:	1f 93       	push	r17
    2950:	cf 93       	push	r28
    2952:	df 93       	push	r29
    2954:	ec 01       	movw	r28, r24
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:102
	pinMode(_ss, OUTPUT);
    2956:	6a 01       	movw	r12, r20
    2958:	7b 01       	movw	r14, r22
    295a:	61 e0       	ldi	r22, 0x01	; 1
    295c:	89 85       	ldd	r24, Y+9	; 0x09
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:104
	// set SS high
	digitalWrite(_ss, HIGH);
    295e:	53 df       	rcall	.-346    	; 0x2806 <pinMode>
    2960:	61 e0       	ldi	r22, 0x01	; 1
    2962:	89 85       	ldd	r24, Y+9	; 0x09
    2964:	1f dc       	rcall	.-1986   	; 0x21a4 <digitalWrite>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:105
	if (_reset != 0xFF)
    2966:	8d 85       	ldd	r24, Y+13	; 0x0d
    2968:	8f 3f       	cpi	r24, 0xFF	; 255
    296a:	a1 f0       	breq	.+40     	; 0x2994 <RLhelper_SX1278::begin(long)+0x58>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:107
	{
		pinMode(_reset, OUTPUT);
    296c:	61 e0       	ldi	r22, 0x01	; 1
    296e:	4b df       	rcall	.-362    	; 0x2806 <pinMode>
    2970:	60 e0       	ldi	r22, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:109
		// perform reset
		digitalWrite(_reset, LOW);
    2972:	8d 85       	ldd	r24, Y+13	; 0x0d
    2974:	17 dc       	rcall	.-2002   	; 0x21a4 <digitalWrite>
    2976:	6a e0       	ldi	r22, 0x0A	; 10
    2978:	70 e0       	ldi	r23, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:110
		delay(10);
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	0e 94 b2 07 	call	0xf64	; 0xf64 <delay>
    2982:	61 e0       	ldi	r22, 0x01	; 1
    2984:	8d 85       	ldd	r24, Y+13	; 0x0d
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:111
		digitalWrite(_reset, HIGH);
    2986:	0e dc       	rcall	.-2020   	; 0x21a4 <digitalWrite>
    2988:	6a e0       	ldi	r22, 0x0A	; 10
    298a:	70 e0       	ldi	r23, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:112
		delay(10);
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	0e 94 b2 07 	call	0xf64	; 0xf64 <delay>
    2994:	eb 85       	ldd	r30, Y+11	; 0x0b
    2996:	fc 85       	ldd	r31, Y+12	; 0x0c
init():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:128
		} else
		{
			_spi->begin();
		}
	#else
		_spi->begin();
    2998:	87 81       	ldd	r24, Z+7	; 0x07
    299a:	81 11       	cpse	r24, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:162

  config(DEFAULT_SPI_SETTINGS);
}

void SPIClass::init() {
  if (initialized) {
    299c:	06 c0       	rjmp	.+12     	; 0x29aa <RLhelper_SX1278::begin(long)+0x6e>
    299e:	10 86       	std	Z+8, r1	; 0x08
    29a0:	12 86       	std	Z+10, r1	; 0x0a
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:165
    return;
  }
  interruptMode = SPI_IMODE_NONE;
    29a2:	80 e8       	ldi	r24, 0x80	; 128
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:171
  #ifdef CORE_ATTACH_OLD
  interruptSave = 0;
  interruptMask_lo = 0;
  interruptMask_hi = 0;
  #else
  in_transaction = 0;
    29a4:	81 87       	std	Z+9, r24	; 0x09
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:172
  old_sreg = 0x80;
    29a6:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:174
  #endif
  initialized = true;
    29a8:	87 83       	std	Z+7, r24	; 0x07
begin():
    29aa:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <u8g2_cb_r0+0x7f386e>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:122
}

void SPIClass::begin() {
  init();
  #if defined(PORTMUX_CTRLB)
  PORTMUX.CTRLB = _uc_mux | (PORTMUX.CTRLB & ~PORTMUX_SPI0_bm);
    29ae:	8b 7f       	andi	r24, 0xFB	; 251
    29b0:	96 81       	ldd	r25, Z+6	; 0x06
    29b2:	89 2b       	or	r24, r25
    29b4:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <u8g2_cb_r0+0x7f386e>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:128
  #elif defined(PORTMUX_SPIROUTEA)
  PORTMUX.SPIROUTEA = _uc_mux | (PORTMUX.SPIROUTEA & ~3);
  #endif

  #if ((defined(PIN_SPI_MOSI_PINSWAP_1) && defined(PIN_SPI_MISO_PINSWAP_1) && defined(PIN_SPI_SCK_PINSWAP_1)) || (defined(PIN_SPI_MOSI_PINSWAP_2) && defined(PIN_SPI_MISO_PINSWAP_2) && defined(PIN_SPI_SCK_PINSWAP_2)))
  if (_uc_mux == 0) {
    29b8:	86 81       	ldd	r24, Z+6	; 0x06
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:129
    pinMode(PIN_SPI_MOSI, OUTPUT);
    29ba:	81 11       	cpse	r24, r1
    29bc:	91 c0       	rjmp	.+290    	; 0x2ae0 <RLhelper_SX1278::begin(long)+0x1a4>
    29be:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:130
    pinMode(PIN_SPI_SCK, OUTPUT);
    29c0:	8e e0       	ldi	r24, 0x0E	; 14
    29c2:	21 df       	rcall	.-446    	; 0x2806 <pinMode>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:140
  #else
  else if (_uc_mux == 1)
  #endif
  {
    pinMode(PIN_SPI_MOSI_PINSWAP_1, OUTPUT);
    pinMode(PIN_SPI_SCK_PINSWAP_1, OUTPUT);
    29c4:	61 e0       	ldi	r22, 0x01	; 1
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:155
  // MISO is set to input by the controller
  pinMode(PIN_SPI_MOSI, OUTPUT);
  pinMode(PIN_SPI_SCK, OUTPUT);
  #endif

  SPI0.CTRLB |= (SPI_SSD_bm);
    29c6:	80 e1       	ldi	r24, 0x10	; 16
    29c8:	1e df       	rcall	.-452    	; 0x2806 <pinMode>
    29ca:	80 91 21 08 	lds	r24, 0x0821	; 0x800821 <u8g2_cb_r0+0x7f3e8e>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:156
  SPI0.CTRLA |= (SPI_ENABLE_bm | SPI_MASTER_bm);
    29ce:	84 60       	ori	r24, 0x04	; 4
    29d0:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <u8g2_cb_r0+0x7f3e8e>
    29d4:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <u8g2_cb_r0+0x7f3e8d>
    29d8:	81 62       	ori	r24, 0x21	; 33
    29da:	80 93 20 08 	sts	0x0820, r24	; 0x800820 <u8g2_cb_r0+0x7f3e8d>
    29de:	90 91 fb 38 	lds	r25, 0x38FB	; 0x8038fb <DEFAULT_SPI_SETTINGS>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:178
  #endif
  initialized = true;
}

void SPIClass::config(SPISettings settings) {
  SPI0.CTRLA = settings.ctrla;
    29e2:	80 91 fc 38 	lds	r24, 0x38FC	; 0x8038fc <DEFAULT_SPI_SETTINGS+0x1>
config():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:179
  SPI0.CTRLB = settings.ctrlb;
    29e6:	90 93 20 08 	sts	0x0820, r25	; 0x800820 <u8g2_cb_r0+0x7f3e8d>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:132
	#endif
	
	// check version
	uint8_t version = readRegister(REG_VERSION);
    29ea:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <u8g2_cb_r0+0x7f3e8e>
_ZN15RLhelper_SX12785beginEl():
    29ee:	62 e4       	ldi	r22, 0x42	; 66
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:133
	if (version != 0x12) {
    29f0:	ce 01       	movw	r24, r28
    29f2:	b3 dc       	rcall	.-1690   	; 0x235a <RLhelper_SX1278::readRegister(unsigned char)>
    29f4:	82 31       	cpi	r24, 0x12	; 18
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:137
		return 0;
	}
	// put in sleep mode
	sleep();
    29f6:	09 f0       	breq	.+2      	; 0x29fa <RLhelper_SX1278::begin(long)+0xbe>
    29f8:	7c c0       	rjmp	.+248    	; 0x2af2 <RLhelper_SX1278::begin(long)+0x1b6>
    29fa:	e8 81       	ld	r30, Y
    29fc:	f9 81       	ldd	r31, Y+1	; 0x01
    29fe:	06 80       	ldd	r0, Z+6	; 0x06
    2a00:	f7 81       	ldd	r31, Z+7	; 0x07
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:323
	writeRegister(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
}

void RLhelper_SX1278::setFrequency(long frequency)
{
	_frequency = frequency;
    2a02:	e0 2d       	mov	r30, r0
    2a04:	ce 01       	movw	r24, r28
    2a06:	09 95       	icall
setFrequency():
    2a08:	ce 86       	std	Y+14, r12	; 0x0e
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:324
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
    2a0a:	df 86       	std	Y+15, r13	; 0x0f
    2a0c:	e8 8a       	std	Y+16, r14	; 0x10
    2a0e:	f9 8a       	std	Y+17, r15	; 0x11
    2a10:	46 01       	movw	r8, r12
    2a12:	57 01       	movw	r10, r14
    2a14:	bb 0c       	add	r11, r11
    2a16:	88 08       	sbc	r8, r8
    2a18:	98 2c       	mov	r9, r8
    2a1a:	54 01       	movw	r10, r8
    2a1c:	96 01       	movw	r18, r12
    2a1e:	a7 01       	movw	r20, r14
    2a20:	68 2d       	mov	r22, r8
    2a22:	78 2d       	mov	r23, r8
    2a24:	88 2d       	mov	r24, r8
    2a26:	98 2d       	mov	r25, r8
    2a28:	03 e1       	ldi	r16, 0x13	; 19
    2a2a:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <__ashldi3>
    2a2e:	a1 2c       	mov	r10, r1
    2a30:	e8 e4       	ldi	r30, 0x48	; 72
    2a32:	be 2e       	mov	r11, r30
    2a34:	f8 ee       	ldi	r31, 0xE8	; 232
    2a36:	cf 2e       	mov	r12, r31
    2a38:	dd 24       	eor	r13, r13
    2a3a:	d3 94       	inc	r13
    2a3c:	e1 2c       	mov	r14, r1
    2a3e:	f1 2c       	mov	r15, r1
    2a40:	00 e0       	ldi	r16, 0x00	; 0
    2a42:	10 e0       	ldi	r17, 0x00	; 0
    2a44:	0e 94 85 20 	call	0x410a	; 0x410a <__udivdi3>
    2a48:	f2 2e       	mov	r15, r18
    2a4a:	83 2e       	mov	r8, r19
    2a4c:	94 2e       	mov	r9, r20
    2a4e:	a5 2e       	mov	r10, r21
    2a50:	b6 2e       	mov	r11, r22
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:325
	writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
    2a52:	c7 2e       	mov	r12, r23
    2a54:	d8 2e       	mov	r13, r24
    2a56:	e9 2e       	mov	r14, r25
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:292
	return singleTransfer(address & 0x7f, 0x00);
}

void RLhelper_SX1278::writeRegister(uint8_t address, uint8_t value)
{
	singleTransfer(address | 0x80, value);
    2a58:	00 e1       	ldi	r16, 0x10	; 16
    2a5a:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__lshrdi3>
writeRegister():
    2a5e:	42 2f       	mov	r20, r18
    2a60:	66 e8       	ldi	r22, 0x86	; 134
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:326
void RLhelper_SX1278::setFrequency(long frequency)
{
	_frequency = frequency;
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
	writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
	writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
    2a62:	ce 01       	movw	r24, r28
    2a64:	34 dc       	rcall	.-1944   	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
setFrequency():
    2a66:	2f 2d       	mov	r18, r15
    2a68:	38 2d       	mov	r19, r8
    2a6a:	49 2d       	mov	r20, r9
    2a6c:	5a 2d       	mov	r21, r10
    2a6e:	6b 2d       	mov	r22, r11
    2a70:	7c 2d       	mov	r23, r12
    2a72:	8d 2d       	mov	r24, r13
    2a74:	9e 2d       	mov	r25, r14
    2a76:	08 e0       	ldi	r16, 0x08	; 8
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:292
	return singleTransfer(address & 0x7f, 0x00);
}

void RLhelper_SX1278::writeRegister(uint8_t address, uint8_t value)
{
	singleTransfer(address | 0x80, value);
    2a78:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__lshrdi3>
writeRegister():
    2a7c:	42 2f       	mov	r20, r18
    2a7e:	67 e8       	ldi	r22, 0x87	; 135
    2a80:	ce 01       	movw	r24, r28
    2a82:	25 dc       	rcall	.-1974   	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
    2a84:	4f 2d       	mov	r20, r15
    2a86:	68 e8       	ldi	r22, 0x88	; 136
    2a88:	ce 01       	movw	r24, r28
    2a8a:	21 dc       	rcall	.-1982   	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
    2a8c:	40 e0       	ldi	r20, 0x00	; 0
    2a8e:	6e e8       	ldi	r22, 0x8E	; 142
    2a90:	ce 01       	movw	r24, r28
    2a92:	1d dc       	rcall	.-1990   	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
    2a94:	40 e0       	ldi	r20, 0x00	; 0
    2a96:	6f e8       	ldi	r22, 0x8F	; 143
    2a98:	ce 01       	movw	r24, r28
    2a9a:	19 dc       	rcall	.-1998   	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
_ZN15RLhelper_SX12785beginEl():
    2a9c:	6c e0       	ldi	r22, 0x0C	; 12
    2a9e:	ce 01       	movw	r24, r28
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:144
	setFrequency(frequency);
	// set base addresses
	writeRegister(REG_FIFO_TX_BASE_ADDR, 0);
	writeRegister(REG_FIFO_RX_BASE_ADDR, 0);
	// set LNA boost
	writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
    2aa0:	5c dc       	rcall	.-1864   	; 0x235a <RLhelper_SX1278::readRegister(unsigned char)>
    2aa2:	48 2f       	mov	r20, r24
    2aa4:	43 60       	ori	r20, 0x03	; 3
writeRegister():
    2aa6:	6c e8       	ldi	r22, 0x8C	; 140
    2aa8:	ce 01       	movw	r24, r28
    2aaa:	11 dc       	rcall	.-2014   	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:292
	return singleTransfer(address & 0x7f, 0x00);
}

void RLhelper_SX1278::writeRegister(uint8_t address, uint8_t value)
{
	singleTransfer(address | 0x80, value);
    2aac:	44 e0       	ldi	r20, 0x04	; 4
    2aae:	66 ea       	ldi	r22, 0xA6	; 166
    2ab0:	ce 01       	movw	r24, r28
    2ab2:	0d dc       	rcall	.-2022   	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
_ZN15RLhelper_SX12785beginEl():
    2ab4:	e8 81       	ld	r30, Y
    2ab6:	f9 81       	ldd	r31, Y+1	; 0x01
    2ab8:	00 84       	ldd	r0, Z+8	; 0x08
    2aba:	f1 85       	ldd	r31, Z+9	; 0x09
    2abc:	e0 2d       	mov	r30, r0
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:150
	// set auto AGC
	writeRegister(REG_MODEM_CONFIG_3, 0x04);
	// set output power to 17 dBm
	//setTxPower(17);
	// put in standby mode
	idle();
    2abe:	ce 01       	movw	r24, r28
    2ac0:	09 95       	icall
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	df 91       	pop	r29
    2ac8:	cf 91       	pop	r28
    2aca:	1f 91       	pop	r17
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:151
	return 1;
    2acc:	0f 91       	pop	r16
    2ace:	ff 90       	pop	r15
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:152
}
    2ad0:	ef 90       	pop	r14
    2ad2:	df 90       	pop	r13
    2ad4:	cf 90       	pop	r12
    2ad6:	bf 90       	pop	r11
    2ad8:	af 90       	pop	r10
    2ada:	9f 90       	pop	r9
    2adc:	8f 90       	pop	r8
    2ade:	08 95       	ret
begin():
    2ae0:	84 30       	cpi	r24, 0x04	; 4
    2ae2:	09 f0       	breq	.+2      	; 0x2ae6 <RLhelper_SX1278::begin(long)+0x1aa>
    2ae4:	72 cf       	rjmp	.-284    	; 0x29ca <RLhelper_SX1278::begin(long)+0x8e>
    2ae6:	61 e0       	ldi	r22, 0x01	; 1
    2ae8:	8c e0       	ldi	r24, 0x0C	; 12
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:134
    pinMode(PIN_SPI_MOSI, OUTPUT);
    pinMode(PIN_SPI_SCK, OUTPUT);
  }
  #if (defined(PIN_SPI_MOSI_PINSWAP_1) && defined(PIN_SPI_MISO_PINSWAP_1) && defined(PIN_SPI_SCK_PINSWAP_1))
  #ifdef PORTMUX_CTRLB
  else if (_uc_mux == PORTMUX_SPI0_bm)
    2aea:	8d de       	rcall	.-742    	; 0x2806 <pinMode>
    2aec:	61 e0       	ldi	r22, 0x01	; 1
    2aee:	8a e0       	ldi	r24, 0x0A	; 10
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:139
  #else
  else if (_uc_mux == 1)
  #endif
  {
    pinMode(PIN_SPI_MOSI_PINSWAP_1, OUTPUT);
    2af0:	6b cf       	rjmp	.-298    	; 0x29c8 <RLhelper_SX1278::begin(long)+0x8c>
_ZN15RLhelper_SX12785beginEl():
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	e7 cf       	rjmp	.-50     	; 0x2ac6 <RLhelper_SX1278::begin(long)+0x18a>

00002af8 <u8x8_byte_arduino_hw_i2c>:
u8x8_byte_arduino_hw_i2c():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\SPI\src/SPI.cpp:140
    pinMode(PIN_SPI_SCK_PINSWAP_1, OUTPUT);
    2af8:	cf 93       	push	r28
    2afa:	df 93       	push	r29
    2afc:	ec 01       	movw	r28, r24
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:134
	#endif
	
	// check version
	uint8_t version = readRegister(REG_VERSION);
	if (version != 0x12) {
		return 0;
    2afe:	68 31       	cpi	r22, 0x18	; 24
    2b00:	09 f4       	brne	.+2      	; 0x2b04 <u8x8_byte_arduino_hw_i2c+0xc>
    2b02:	55 c0       	rjmp	.+170    	; 0x2bae <u8x8_byte_arduino_hw_i2c+0xb6>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1333

/*=============================================*/
/*=== HARDWARE I2C ===*/

extern "C" uint8_t u8x8_byte_arduino_hw_i2c(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
    2b04:	30 f4       	brcc	.+12     	; 0x2b12 <u8x8_byte_arduino_hw_i2c+0x1a>
    2b06:	64 31       	cpi	r22, 0x14	; 20
    2b08:	a1 f0       	breq	.+40     	; 0x2b32 <u8x8_byte_arduino_hw_i2c+0x3a>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1335
#ifdef U8X8_HAVE_HW_I2C
  switch(msg)
    2b0a:	67 31       	cpi	r22, 0x17	; 23
    2b0c:	59 f0       	breq	.+22     	; 0x2b24 <u8x8_byte_arduino_hw_i2c+0x2c>
    2b0e:	80 e0       	ldi	r24, 0x00	; 0
    2b10:	06 c0       	rjmp	.+12     	; 0x2b1e <u8x8_byte_arduino_hw_i2c+0x26>
    2b12:	69 31       	cpi	r22, 0x19	; 25
    2b14:	09 f4       	brne	.+2      	; 0x2b18 <u8x8_byte_arduino_hw_i2c+0x20>
    2b16:	61 c0       	rjmp	.+194    	; 0x2bda <u8x8_byte_arduino_hw_i2c+0xe2>
    2b18:	60 32       	cpi	r22, 0x20	; 32
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1375
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      Wire.endTransmission();
      break;
    default:
      return 0;
    2b1a:	c9 f7       	brne	.-14     	; 0x2b0e <u8x8_byte_arduino_hw_i2c+0x16>
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1335
/*=== HARDWARE I2C ===*/

extern "C" uint8_t u8x8_byte_arduino_hw_i2c(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
#ifdef U8X8_HAVE_HW_I2C
  switch(msg)
    2b1e:	df 91       	pop	r29
    2b20:	cf 91       	pop	r28
    2b22:	08 95       	ret
    2b24:	50 e0       	ldi	r21, 0x00	; 0
    2b26:	b9 01       	movw	r22, r18
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1378
      break;
    default:
      return 0;
  }
#endif
  return 1;
    2b28:	8b e9       	ldi	r24, 0x9B	; 155
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1379
}
    2b2a:	98 e3       	ldi	r25, 0x38	; 56
    2b2c:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <TwoWire::write(unsigned char const*, unsigned int)>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1338
{
#ifdef U8X8_HAVE_HW_I2C
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      Wire.write((uint8_t *)arg_ptr, (int)arg_int);
    2b30:	f5 cf       	rjmp	.-22     	; 0x2b1c <u8x8_byte_arduino_hw_i2c+0x24>
    2b32:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b34:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b36:	ae 85       	ldd	r26, Y+14	; 0x0e
    2b38:	bf 85       	ldd	r27, Y+15	; 0x0f
    2b3a:	89 2b       	or	r24, r25
    2b3c:	8a 2b       	or	r24, r26
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1341
      break;
    case U8X8_MSG_BYTE_INIT:
      if ( u8x8->bus_clock == 0 ) 	/* issue 769 */
    2b3e:	8b 2b       	or	r24, r27
    2b40:	71 f4       	brne	.+28     	; 0x2b5e <u8x8_byte_arduino_hw_i2c+0x66>
    2b42:	e8 81       	ld	r30, Y
    2b44:	f9 81       	ldd	r31, Y+1	; 0x01
    2b46:	a5 85       	ldd	r26, Z+13	; 0x0d
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	20 ea       	ldi	r18, 0xA0	; 160
    2b4c:	36 e8       	ldi	r19, 0x86	; 134
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1342
	u8x8->bus_clock = u8x8->display_info->i2c_bus_clock_100kHz * 100000UL;
    2b4e:	41 e0       	ldi	r20, 0x01	; 1
    2b50:	50 e0       	ldi	r21, 0x00	; 0
    2b52:	0e 94 65 1f 	call	0x3eca	; 0x3eca <__muluhisi3>
    2b56:	6c 87       	std	Y+12, r22	; 0x0c
    2b58:	7d 87       	std	Y+13, r23	; 0x0d
    2b5a:	8e 87       	std	Y+14, r24	; 0x0e
    2b5c:	9f 87       	std	Y+15, r25	; 0x0f
TWI_MasterInit():
    2b5e:	80 91 a5 38 	lds	r24, 0x38A5	; 0x8038a5 <Wire+0xa>
    2b62:	81 fd       	sbrc	r24, 1
    2b64:	db cf       	rjmp	.-74     	; 0x2b1c <u8x8_byte_arduino_hw_i2c+0x24>
    2b66:	82 fd       	sbrc	r24, 2
    2b68:	d9 cf       	rjmp	.-78     	; 0x2b1c <u8x8_byte_arduino_hw_i2c+0x24>
TWI0_ClearPins():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:52
  #if defined(TWI_MANDS)                            // Check if the user wants to use Master AND Slave
    if (_data->_bools._hostEnabled == 1) {          // Slave is allowed to be enabled, don't re-enable the host though
      return;
    }
  #else                                             // Master OR Slave
    if ((_data->_bools._hostEnabled | _data->_bools._clientEnabled) == 1) {  //If either are enabled
    2b6a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <u8g2_cb_r0+0x7f386e>
    2b6e:	84 ff       	sbrs	r24, 4
    2b70:	1a c0       	rjmp	.+52     	; 0x2ba6 <u8x8_byte_arduino_hw_i2c+0xae>
    2b72:	86 e0       	ldi	r24, 0x06	; 6
    2b74:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <u8g2_cb_r0+0x7f3a73>
TWI_MasterInit():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi_pins.c:140
    #endif
  #elif defined(MEGATINYCORE)  /* tinyAVR 0/1-series */
    #if (MEGATINYCORE_SERIES < 2) // Hey, this erratum isn't listed for the 2-series, so we don't have to do this!
      // 6 bytes of flash saved for 2-series parts, aww yeah!
      #if defined(PORTMUX_TWI0_bm)
        if ((PORTMUX.CTRLB & PORTMUX_TWI0_bm)) {
    2b78:	80 91 a5 38 	lds	r24, 0x38A5	; 0x8038a5 <Wire+0xa>
    2b7c:	82 60       	ori	r24, 0x02	; 2
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi_pins.c:143
          // make sure we don't get errata'ed - make sure their bits in the
          // PORTx.OUT registers are 0.
          PORTA.OUTCLR = 0x06;  // if swapped it's on PA1, PA2
    2b7e:	80 93 a5 38 	sts	0x38A5, r24	; 0x8038a5 <Wire+0xa>
    2b82:	e0 91 a3 38 	lds	r30, 0x38A3	; 0x8038a3 <Wire+0x8>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:68
    }
  #else                                             // Only one TWI is used
    TWI0_ClearPins();                               // Only one option is possible
  #endif

  _data->_bools._hostEnabled    = 1;
    2b86:	f0 91 a4 38 	lds	r31, 0x38A4	; 0x8038a4 <Wire+0x9>
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	83 83       	std	Z+3, r24	; 0x03
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:69
  _data->_module->MCTRLA        = TWI_ENABLE_bm;  // Master Interrupt flags stay disabled
    2b8e:	85 83       	std	Z+5, r24	; 0x05
TWI_MasterSetBaud():
    2b90:	80 91 a5 38 	lds	r24, 0x38A5	; 0x8038a5 <Wire+0xa>
    2b94:	81 ff       	sbrs	r24, 1
    2b96:	c2 cf       	rjmp	.-124    	; 0x2b1c <u8x8_byte_arduino_hw_i2c+0x24>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:70
  _data->_module->MSTATUS       = TWI_BUSSTATE_IDLE_gc;
    2b98:	60 ea       	ldi	r22, 0xA0	; 160
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:216
  } else {
    if (frequency < 1000) {
      return 1;
    }
  }
  if (_data->_bools._hostEnabled == 1) {                  // Do something only if the host is enabled.
    2b9a:	76 e8       	ldi	r23, 0x86	; 134
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	0e 94 06 07 	call	0xe0c	; 0xe0c <TWI_MasterSetBaud.part.3.constprop.9>
    2ba4:	bb cf       	rjmp	.-138    	; 0x2b1c <u8x8_byte_arduino_hw_i2c+0x24>
TWI0_ClearPins():
    2ba6:	83 e0       	ldi	r24, 0x03	; 3
    2ba8:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <u8g2_cb_r0+0x7f3a93>
    2bac:	e5 cf       	rjmp	.-54     	; 0x2b78 <u8x8_byte_arduino_hw_i2c+0x80>
u8x8_byte_arduino_hw_i2c():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi_pins.c:145
        } else {
          PORTB.OUTCLR = 0x03;  // else PB0, PB1
    2bae:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bb0:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bb4:	9f 85       	ldd	r25, Y+15	; 0x0f
TWI_MasterSetBaud():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1366
#if ARDUINO >= 10600
      /* not sure when the setClock function was introduced, but it is there since 1.6.0 */
      /* if there is any error with Wire.setClock() just remove this function call by */
      /* defining U8X8_DO_NOT_SET_WIRE_CLOCK */
#ifndef U8X8_DO_NOT_SET_WIRE_CLOCK
      Wire.setClock(u8x8->bus_clock);
    2bb6:	68 3e       	cpi	r22, 0xE8	; 232
    2bb8:	23 e0       	ldi	r18, 0x03	; 3
    2bba:	72 07       	cpc	r23, r18
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:212
    if ((frequency < 1000) || (frequency > 15000000)) {
      badArg("Invalid frequency was passed for SCL clock!");
      return 1;
    }
  } else {
    if (frequency < 1000) {
    2bbc:	81 05       	cpc	r24, r1
    2bbe:	91 05       	cpc	r25, r1
    2bc0:	28 f0       	brcs	.+10     	; 0x2bcc <u8x8_byte_arduino_hw_i2c+0xd4>
    2bc2:	20 91 a5 38 	lds	r18, 0x38A5	; 0x8038a5 <Wire+0xa>
    2bc6:	21 fd       	sbrc	r18, 1
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:216
      return 1;
    }
  }
  if (_data->_bools._hostEnabled == 1) {                  // Do something only if the host is enabled.
    2bc8:	0e 94 06 07 	call	0xe0c	; 0xe0c <TWI_MasterSetBaud.part.3.constprop.9>
u8x8_byte_arduino_hw_i2c():
    2bcc:	8e 89       	ldd	r24, Y+22	; 0x16
beginTransmission():
    2bce:	8e 7f       	andi	r24, 0xFE	; 254
    2bd0:	80 93 a7 38 	sts	0x38A7, r24	; 0x8038a7 <Wire+0xc>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:484
  if (__builtin_constant_p(address) > 0x7F) {     // Compile-time check if address is actually 7 bit long
    badArg("Supplied address seems to be 8 bit. Only 7-bit-addresses are supported");
    return;
  }
  // set address of targeted client
  vars._clientAddress = address << 1;
    2bd4:	10 92 a8 38 	sts	0x38A8, r1	; 0x8038a8 <Wire+0xd>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:485
  (*txHead) = 0;  // fill buffer from 0
    2bd8:	a1 cf       	rjmp	.-190    	; 0x2b1c <u8x8_byte_arduino_hw_i2c+0x24>
u8x8_byte_arduino_hw_i2c():
    2bda:	0e 94 ba 06 	call	0xd74	; 0xd74 <TwoWire::endTransmission() [clone .constprop.18]>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:1372
#endif 
#endif
      Wire.beginTransmission(u8x8_GetI2CAddress(u8x8)>>1);
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      Wire.endTransmission();
    2bde:	9e cf       	rjmp	.-196    	; 0x2b1c <u8x8_byte_arduino_hw_i2c+0x24>

00002be0 <u8x8_gpio_and_delay_arduino>:
u8x8_gpio_and_delay_arduino():
    2be0:	0f 93       	push	r16
    2be2:	1f 93       	push	r17
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:93
/*=== ARDUINO GPIO & DELAY ===*/

#ifdef ARDUINO
#ifdef U8X8_USE_PINS
extern "C" uint8_t u8x8_gpio_and_delay_arduino(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
    2be4:	cf 93       	push	r28
    2be6:	df 93       	push	r29
    2be8:	fc 01       	movw	r30, r24
    2bea:	c6 2f       	mov	r28, r22
    2bec:	64 2f       	mov	r22, r20
    2bee:	cc 32       	cpi	r28, 0x2C	; 44
    2bf0:	c8 f5       	brcc	.+114    	; 0x2c64 <u8x8_gpio_and_delay_arduino+0x84>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:95
  uint8_t i;
  switch(msg)
    2bf2:	ca 32       	cpi	r28, 0x2A	; 42
    2bf4:	08 f0       	brcs	.+2      	; 0x2bf8 <u8x8_gpio_and_delay_arduino+0x18>
    2bf6:	5b c0       	rjmp	.+182    	; 0x2cae <u8x8_gpio_and_delay_arduino+0xce>
    2bf8:	c8 32       	cpi	r28, 0x28	; 40
    2bfa:	09 f4       	brne	.+2      	; 0x2bfe <u8x8_gpio_and_delay_arduino+0x1e>
    2bfc:	47 c0       	rjmp	.+142    	; 0x2c8c <u8x8_gpio_and_delay_arduino+0xac>
    2bfe:	c9 32       	cpi	r28, 0x29	; 41
    2c00:	09 f4       	brne	.+2      	; 0x2c04 <u8x8_gpio_and_delay_arduino+0x24>
    2c02:	5b c0       	rjmp	.+182    	; 0x2cba <u8x8_gpio_and_delay_arduino+0xda>
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	c0 34       	cpi	r28, 0x40	; 64
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:182
	  }
	}
	break;
      }
      
      return 0;
    2c08:	08 f4       	brcc	.+2      	; 0x2c0c <u8x8_gpio_and_delay_arduino+0x2c>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:160
	digitalWrite(u8x8_GetPinValue(u8x8, msg), 1);
#endif 
      }
      break;
    default:
      if ( msg >= U8X8_MSG_GPIO(0) )
    2c0a:	52 c0       	rjmp	.+164    	; 0x2cb0 <u8x8_gpio_and_delay_arduino+0xd0>
    2c0c:	cf 73       	andi	r28, 0x3F	; 63
    2c0e:	df 01       	movw	r26, r30
    2c10:	ac 0f       	add	r26, r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:162
      {
	i = u8x8_GetPinValue(u8x8, msg);
    2c12:	b1 1d       	adc	r27, r1
    2c14:	5e 96       	adiw	r26, 0x1e	; 30
    2c16:	8c 91       	ld	r24, X
    2c18:	8f 3f       	cpi	r24, 0xFF	; 255
    2c1a:	09 f4       	brne	.+2      	; 0x2c1e <u8x8_gpio_and_delay_arduino+0x3e>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:163
	if ( i != U8X8_PIN_NONE )
    2c1c:	48 c0       	rjmp	.+144    	; 0x2cae <u8x8_gpio_and_delay_arduino+0xce>
    2c1e:	c0 31       	cpi	r28, 0x10	; 16
    2c20:	98 f1       	brcs	.+102    	; 0x2c88 <u8x8_gpio_and_delay_arduino+0xa8>
check_valid_digital_pin():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:165
	{
	  if ( u8x8_GetPinIndex(u8x8, msg) < U8X8_PIN_OUTPUT_CNT )
    2c22:	28 2f       	mov	r18, r24
    2c24:	30 e0       	ldi	r19, 0x00	; 0
digitalRead():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/Arduino.h:873
    2c26:	82 31       	cpi	r24, 0x12	; 18
    2c28:	08 f0       	brcs	.+2      	; 0x2c2c <u8x8_gpio_and_delay_arduino+0x4c>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:354
}

int8_t digitalRead(uint8_t pin) {
  check_valid_digital_pin(pin);
  /* Get bit mask and check valid pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
    2c2a:	50 c0       	rjmp	.+160    	; 0x2ccc <u8x8_gpio_and_delay_arduino+0xec>
    2c2c:	d9 01       	movw	r26, r18
    2c2e:	ab 5d       	subi	r26, 0xDB	; 219
    2c30:	b6 43       	sbci	r27, 0x36	; 54
    2c32:	8c 91       	ld	r24, X
    2c34:	8f 3f       	cpi	r24, 0xFF	; 255
    2c36:	09 f4       	brne	.+2      	; 0x2c3a <u8x8_gpio_and_delay_arduino+0x5a>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:355
  if (bit_mask == NOT_A_PIN) {
    2c38:	49 c0       	rjmp	.+146    	; 0x2ccc <u8x8_gpio_and_delay_arduino+0xec>
    2c3a:	2d 5e       	subi	r18, 0xED	; 237
    2c3c:	36 43       	sbci	r19, 0x36	; 54
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:368
  // high bar for stuff that would make it even slower than it already is.
  //
  // turnOffPWM(pin);

  /* Get port and check valid port */
  PORT_t *port = digitalPinToPortStruct(pin);
    2c3e:	e9 01       	movw	r28, r18
    2c40:	a8 81       	ld	r26, Y
    2c42:	d0 e2       	ldi	r29, 0x20	; 32
    2c44:	ad 9f       	mul	r26, r29
    2c46:	d0 01       	movw	r26, r0
    2c48:	11 24       	eor	r1, r1
    2c4a:	bc 5f       	subi	r27, 0xFC	; 252
    2c4c:	18 96       	adiw	r26, 0x08	; 8
    2c4e:	9c 91       	ld	r25, X
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:371

  /* Read pin value from PORTx.IN register */
  if (port->IN & bit_mask) {
    2c50:	98 23       	and	r25, r24
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	09 f4       	brne	.+2      	; 0x2c58 <u8x8_gpio_and_delay_arduino+0x78>
    2c56:	80 e0       	ldi	r24, 0x00	; 0
u8x8_gpio_and_delay_arduino():
    2c58:	91 e0       	ldi	r25, 0x01	; 1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:176
	    if ( u8x8_GetPinIndex(u8x8, msg) == U8X8_PIN_OUTPUT_CNT )
	    {
	      // call yield() for the first pin only, u8x8 will always request all the pins, so this should be ok
	      yield();
	    }
	    u8x8_SetGPIOResult(u8x8, digitalRead(i) == 0 ? 0 : 1);
    2c5a:	81 11       	cpse	r24, r1
    2c5c:	01 c0       	rjmp	.+2      	; 0x2c60 <u8x8_gpio_and_delay_arduino+0x80>
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	91 8f       	std	Z+25, r25	; 0x19
    2c62:	25 c0       	rjmp	.+74     	; 0x2cae <u8x8_gpio_and_delay_arduino+0xce>
    2c64:	cd 32       	cpi	r28, 0x2D	; 45
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:95
#ifdef ARDUINO
#ifdef U8X8_USE_PINS
extern "C" uint8_t u8x8_gpio_and_delay_arduino(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  uint8_t i;
  switch(msg)
    2c66:	19 f1       	breq	.+70     	; 0x2cae <u8x8_gpio_and_delay_arduino+0xce>
    2c68:	68 f2       	brcs	.-102    	; 0x2c04 <u8x8_gpio_and_delay_arduino+0x24>
    2c6a:	84 eb       	ldi	r24, 0xB4	; 180
    2c6c:	8c 0f       	add	r24, r28
    2c6e:	82 30       	cpi	r24, 0x02	; 2
    2c70:	48 f6       	brcc	.-110    	; 0x2c04 <u8x8_gpio_and_delay_arduino+0x24>
    2c72:	cf 73       	andi	r28, 0x3F	; 63
    2c74:	ce 0f       	add	r28, r30
    2c76:	df 2f       	mov	r29, r31
    2c78:	d1 1d       	adc	r29, r1
    2c7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c7c:	41 11       	cpse	r20, r1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:144
      /* arg_int is 1 or 4: 100KHz (5us) or 400KHz (1.25us) */
      delayMicroseconds(arg_int<=2?5:2);
      break;
    case U8X8_MSG_GPIO_I2C_CLOCK:
    case U8X8_MSG_GPIO_I2C_DATA:
      if ( arg_int == 0 )
    2c7e:	23 c0       	rjmp	.+70     	; 0x2cc6 <u8x8_gpio_and_delay_arduino+0xe6>
    2c80:	61 e0       	ldi	r22, 0x01	; 1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:146
      {
	pinMode(u8x8_GetPinValue(u8x8, msg), OUTPUT);
    2c82:	c1 dd       	rcall	.-1150   	; 0x2806 <pinMode>
    2c84:	60 e0       	ldi	r22, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:147
	digitalWrite(u8x8_GetPinValue(u8x8, msg), 0);
    2c86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c88:	8d da       	rcall	.-2790   	; 0x21a4 <digitalWrite>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:167
	i = u8x8_GetPinValue(u8x8, msg);
	if ( i != U8X8_PIN_NONE )
	{
	  if ( u8x8_GetPinIndex(u8x8, msg) < U8X8_PIN_OUTPUT_CNT )
	  {
	    digitalWrite(i, arg_int);
    2c8a:	11 c0       	rjmp	.+34     	; 0x2cae <u8x8_gpio_and_delay_arduino+0xce>
    2c8c:	8c 01       	movw	r16, r24
    2c8e:	02 5e       	subi	r16, 0xE2	; 226
    2c90:	1f 4f       	sbci	r17, 0xFF	; 255
    2c92:	d0 e0       	ldi	r29, 0x00	; 0
    2c94:	f8 01       	movw	r30, r16
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:99
  uint8_t i;
  switch(msg)
  {
    case U8X8_MSG_GPIO_AND_DELAY_INIT:
    
      for( i = 0; i < U8X8_PIN_CNT; i++ )
    2c96:	81 91       	ld	r24, Z+
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:100
	if ( u8x8->pins[i] != U8X8_PIN_NONE )
    2c98:	8f 01       	movw	r16, r30
    2c9a:	8f 3f       	cpi	r24, 0xFF	; 255
    2c9c:	29 f0       	breq	.+10     	; 0x2ca8 <u8x8_gpio_and_delay_arduino+0xc8>
    2c9e:	61 e0       	ldi	r22, 0x01	; 1
    2ca0:	d0 31       	cpi	r29, 0x10	; 16
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:104
	{
	  if ( i < U8X8_PIN_OUTPUT_CNT )
	  {
	    pinMode(u8x8->pins[i], OUTPUT);
    2ca2:	08 f0       	brcs	.+2      	; 0x2ca6 <u8x8_gpio_and_delay_arduino+0xc6>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:102
    case U8X8_MSG_GPIO_AND_DELAY_INIT:
    
      for( i = 0; i < U8X8_PIN_CNT; i++ )
	if ( u8x8->pins[i] != U8X8_PIN_NONE )
	{
	  if ( i < U8X8_PIN_OUTPUT_CNT )
    2ca4:	62 e0       	ldi	r22, 0x02	; 2
    2ca6:	af dd       	rcall	.-1186   	; 0x2806 <pinMode>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:109
	    pinMode(u8x8->pins[i], OUTPUT);
	  }
	  else
	  {
#ifdef INPUT_PULLUP
	    pinMode(u8x8->pins[i], INPUT_PULLUP);
    2ca8:	df 5f       	subi	r29, 0xFF	; 255
    2caa:	d6 31       	cpi	r29, 0x16	; 22
    2cac:	99 f7       	brne	.-26     	; 0x2c94 <u8x8_gpio_and_delay_arduino+0xb4>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:99
  uint8_t i;
  switch(msg)
  {
    case U8X8_MSG_GPIO_AND_DELAY_INIT:
    
      for( i = 0; i < U8X8_PIN_CNT; i++ )
    2cae:	81 e0       	ldi	r24, 0x01	; 1
    2cb0:	df 91       	pop	r29
    2cb2:	cf 91       	pop	r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:184
	break;
      }
      
      return 0;
  }
  return 1;
    2cb4:	1f 91       	pop	r17
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:185
}
    2cb6:	0f 91       	pop	r16
    2cb8:	08 95       	ret
    2cba:	70 e0       	ldi	r23, 0x00	; 0
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:136
    case U8X8_MSG_DELAY_100NANO:
      /* not used at the moment */
      break;
   
    case U8X8_MSG_DELAY_MILLI:
      delay(arg_int);
    2cc0:	0e 94 b2 07 	call	0xf64	; 0xf64 <delay>
    2cc4:	f4 cf       	rjmp	.-24     	; 0x2cae <u8x8_gpio_and_delay_arduino+0xce>
    2cc6:	62 e0       	ldi	r22, 0x02	; 2
    2cc8:	9e dd       	rcall	.-1220   	; 0x2806 <pinMode>
    2cca:	f1 cf       	rjmp	.-30     	; 0x2cae <u8x8_gpio_and_delay_arduino+0xce>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8x8lib.cpp:152
	digitalWrite(u8x8_GetPinValue(u8x8, msg), 0);
      }
      else
      {
#ifdef INPUT_PULLUP
	pinMode(u8x8_GetPinValue(u8x8, msg), INPUT_PULLUP);
    2ccc:	8f ef       	ldi	r24, 0xFF	; 255
    2cce:	c4 cf       	rjmp	.-120    	; 0x2c58 <u8x8_gpio_and_delay_arduino+0x78>

00002cd0 <SSD1306Device::setCursor(unsigned char, unsigned char)>:
_ZN13SSD1306Device9setCursorEhh():
    2cd0:	cf 93       	push	r28
    2cd2:	df 93       	push	r29
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring_digital.c:356
int8_t digitalRead(uint8_t pin) {
  check_valid_digital_pin(pin);
  /* Get bit mask and check valid pin */
  uint8_t bit_mask = digitalPinToBitMask(pin);
  if (bit_mask == NOT_A_PIN) {
    return -1;
    2cd4:	c6 2f       	mov	r28, r22
    2cd6:	d4 2f       	mov	r29, r20
beginTransmission():
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:153
	Wire.endTransmission();
#endif // TINYWIRE
}

void SSD1306Device::setCursor(uint8_t x, uint8_t y)
{
    2cd8:	eb e9       	ldi	r30, 0x9B	; 155
    2cda:	f8 e3       	ldi	r31, 0x38	; 56
    2cdc:	88 e7       	ldi	r24, 0x78	; 120
    2cde:	84 87       	std	Z+12, r24	; 0x0c
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:484
  if (__builtin_constant_p(address) > 0x7F) {     // Compile-time check if address is actually 7 bit long
    badArg("Supplied address seems to be 8 bit. Only 7-bit-addresses are supported");
    return;
  }
  // set address of targeted client
  vars._clientAddress = address << 1;
    2ce0:	15 86       	std	Z+13, r1	; 0x0d
ssd1306_send_command_start():
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	0e 94 56 08 	call	0x10ac	; 0x10ac <TwoWire::write(int) [clone .constprop.17]>
_ZN13SSD1306Device9setCursorEhh():
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:96
#ifdef TINYWIRE
	TinyWireM.beginTransmission(SSD1306);
	TinyWireM.write(0x00); // write command
#else 
	Wire.beginTransmission(SSD1306);
	Wire.write(0x00);	// write command
    2cea:	8d 2f       	mov	r24, r29
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	80 55       	subi	r24, 0x50	; 80
    2cf0:	9f 4f       	sbci	r25, 0xFF	; 255
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:160
#ifdef TINYWIRE
	TinyWireM.write(0xb0 + y);
	TinyWireM.write(((x & 0xf0) >> 4) | 0x10); // | 0x10
	TinyWireM.write((x & 0x0f) | 0x01); // | 0x01
#else 	
	Wire.write(0xb0 + y);
    2cf2:	0e 94 56 08 	call	0x10ac	; 0x10ac <TwoWire::write(int) [clone .constprop.17]>
    2cf6:	8c 2f       	mov	r24, r28
    2cf8:	82 95       	swap	r24
    2cfa:	8f 70       	andi	r24, 0x0F	; 15
    2cfc:	80 61       	ori	r24, 0x10	; 16
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:161
	Wire.write(((x & 0xf0) >> 4) | 0x10); // | 0x10
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	0e 94 56 08 	call	0x10ac	; 0x10ac <TwoWire::write(int) [clone .constprop.17]>
    2d04:	8c 2f       	mov	r24, r28
    2d06:	8e 70       	andi	r24, 0x0E	; 14
    2d08:	81 60       	ori	r24, 0x01	; 1
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:162
	Wire.write((x & 0x0f) | 0x01); // | 0x01
    2d0c:	0e 94 56 08 	call	0x10ac	; 0x10ac <TwoWire::write(int) [clone .constprop.17]>
ssd1306_send_command_stop():
    2d10:	0e 94 ba 06 	call	0xd74	; 0xd74 <TwoWire::endTransmission() [clone .constprop.18]>
_ZN13SSD1306Device9setCursorEhh():
    2d14:	c0 93 60 38 	sts	0x3860, r28	; 0x803860 <oledX>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:104

void SSD1306Device::ssd1306_send_command_stop(void) {
#ifdef TINYWIRE
	TinyWireM.endTransmission();
#else 
	Wire.endTransmission();
    2d18:	d0 93 61 38 	sts	0x3861, r29	; 0x803861 <oledY>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:165
	Wire.write(0xb0 + y);
	Wire.write(((x & 0xf0) >> 4) | 0x10); // | 0x10
	Wire.write((x & 0x0f) | 0x01); // | 0x01
#endif // TINYWIRE	
	ssd1306_send_command_stop();
	oledX = x;
    2d1c:	df 91       	pop	r29
    2d1e:	cf 91       	pop	r28
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:166
	oledY = y;
    2d20:	08 95       	ret

00002d22 <SSD1306Device::write(unsigned char)>:
_ZN13SSD1306Device5writeEh():
    2d22:	ff 92       	push	r15
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:167
}
    2d24:	0f 93       	push	r16
    2d26:	1f 93       	push	r17
    2d28:	cf 93       	push	r28
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:192
		ssd1306_send_data_stop();
	}
	setCursor(0, 0);
}

size_t SSD1306Device::write(byte c) {
    2d2a:	df 93       	push	r29
    2d2c:	6d 30       	cpi	r22, 0x0D	; 13
    2d2e:	61 f0       	breq	.+24     	; 0x2d48 <SSD1306Device::write(unsigned char)+0x26>
    2d30:	c6 2f       	mov	r28, r22
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:195
	uint8_t i = 0;
	uint8_t ci = c - 32;
	if(c == '\r')
    2d32:	8c 01       	movw	r16, r24
    2d34:	6a 30       	cpi	r22, 0x0A	; 10
    2d36:	81 f4       	brne	.+32     	; 0x2d58 <SSD1306Device::write(unsigned char)+0x36>
    2d38:	40 91 61 38 	lds	r20, 0x3861	; 0x803861 <oledY>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:197
		return 1;
	if(c == '\n'){
    2d3c:	4f 5f       	subi	r20, 0xFF	; 255
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:199
		if(oledFont == FONT6X8) {	//	tBUG
			oledY++;	
    2d3e:	40 93 61 38 	sts	0x3861, r20	; 0x803861 <oledY>
    2d42:	60 e0       	ldi	r22, 0x00	; 0
    2d44:	c8 01       	movw	r24, r16
    2d46:	c4 df       	rcall	.-120    	; 0x2cd0 <SSD1306Device::setCursor(unsigned char, unsigned char)>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:208
		else {
			oledY+=2;	//tBUG  Large Font up by two
			if ( oledY > 6) // tBUG
				oledY = 6;
			}
		setCursor(0, oledY);
    2d48:	81 e0       	ldi	r24, 0x01	; 1
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:228
		for (i= 0; i < 6; i++)
		{
			ssd1306_send_data_byte(ssd1306xled_font6x8[ci * 6 + i]);
		}
		ssd1306_send_data_stop();
		setCursor(oledX+6, oledY);
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	df 91       	pop	r29
    2d4e:	cf 91       	pop	r28
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:267
		ssd1306_send_data_stop();
		setCursor(oledX + 8, oledY - 1);
	}
#endif // _nofont_8x16
	return 1;
}
    2d50:	1f 91       	pop	r17
    2d52:	0f 91       	pop	r16
    2d54:	ff 90       	pop	r15
    2d56:	08 95       	ret
    2d58:	80 91 60 38 	lds	r24, 0x3860	; 0x803860 <oledX>
    2d5c:	8b 37       	cpi	r24, 0x7B	; 123
    2d5e:	70 f0       	brcs	.+28     	; 0x2d7c <SSD1306Device::write(unsigned char)+0x5a>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:213
		setCursor(0, oledY);
		return 1;
	}

	if(oledFont == FONT6X8){
		if (oledX > 122)
    2d60:	10 92 60 38 	sts	0x3860, r1	; 0x803860 <oledX>
    2d64:	80 91 61 38 	lds	r24, 0x3861	; 0x803861 <oledY>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:215
		{
			oledX = 0;
    2d68:	8f 5f       	subi	r24, 0xFF	; 255
    2d6a:	88 30       	cpi	r24, 0x08	; 8
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:216
			oledY++;
    2d6c:	08 f5       	brcc	.+66     	; 0x2db0 <SSD1306Device::write(unsigned char)+0x8e>
    2d6e:	80 93 61 38 	sts	0x3861, r24	; 0x803861 <oledY>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:217
			if ( oledY > 7) // tBUG
    2d72:	40 91 61 38 	lds	r20, 0x3861	; 0x803861 <oledY>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:218
				oledY = 7;
    2d76:	60 e0       	ldi	r22, 0x00	; 0
    2d78:	c8 01       	movw	r24, r16
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:219
			setCursor(oledX, oledY);
    2d7a:	aa df       	rcall	.-172    	; 0x2cd0 <SSD1306Device::setCursor(unsigned char, unsigned char)>
    2d7c:	0a da       	rcall	.-3052   	; 0x2192 <SSD1306Device::ssd1306_send_data_start() [clone .constprop.14]>
    2d7e:	c0 52       	subi	r28, 0x20	; 32
    2d80:	86 e0       	ldi	r24, 0x06	; 6
    2d82:	c8 9f       	mul	r28, r24
    2d84:	e0 01       	movw	r28, r0
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:222
		}
		
		ssd1306_send_data_start();
    2d86:	11 24       	eor	r1, r1
    2d88:	ce 59       	subi	r28, 0x9E	; 158
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:194
	setCursor(0, 0);
}

size_t SSD1306Device::write(byte c) {
	uint8_t i = 0;
	uint8_t ci = c - 32;
    2d8a:	d9 43       	sbci	r29, 0x39	; 57
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:225
		}
		
		ssd1306_send_data_start();
		for (i= 0; i < 6; i++)
		{
			ssd1306_send_data_byte(ssd1306xled_font6x8[ci * 6 + i]);
    2d8c:	f1 2c       	mov	r15, r1
    2d8e:	69 91       	ld	r22, Y+
ssd1306_send_data_byte():
    2d90:	8b e9       	ldi	r24, 0x9B	; 155
    2d92:	98 e3       	ldi	r25, 0x38	; 56
    2d94:	0e 94 44 08 	call	0x1088	; 0x1088 <TwoWire::write(unsigned char)>
_ZN13SSD1306Device5writeEh():
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:223
				oledY = 7;
			setCursor(oledX, oledY);
		}
		
		ssd1306_send_data_start();
		for (i= 0; i < 6; i++)
    2d98:	f3 94       	inc	r15
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:225
		{
			ssd1306_send_data_byte(ssd1306xled_font6x8[ci * 6 + i]);
    2d9a:	86 e0       	ldi	r24, 0x06	; 6
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:117
	//	ssd1306_send_data_start();
	//} //**
#ifdef TINYWIRE
	TinyWireM.write(byte);
#else 	
	Wire.write(byte);
    2d9c:	f8 12       	cpse	r15, r24
    2d9e:	f7 cf       	rjmp	.-18     	; 0x2d8e <SSD1306Device::write(unsigned char)+0x6c>
ssd1306_send_data_stop():
    2da0:	0e 94 ba 06 	call	0xd74	; 0xd74 <TwoWire::endTransmission() [clone .constprop.18]>
_ZN13SSD1306Device5writeEh():
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:223
				oledY = 7;
			setCursor(oledX, oledY);
		}
		
		ssd1306_send_data_start();
		for (i= 0; i < 6; i++)
    2da4:	60 91 60 38 	lds	r22, 0x3860	; 0x803860 <oledX>
    2da8:	6a 5f       	subi	r22, 0xFA	; 250
    2daa:	40 91 61 38 	lds	r20, 0x3861	; 0x803861 <oledY>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:148
void SSD1306Device::ssd1306_send_data_stop(void)
{
#ifdef TINYWIRE
	TinyWireM.endTransmission();
#else 	
	Wire.endTransmission();
    2dae:	ca cf       	rjmp	.-108    	; 0x2d44 <SSD1306Device::write(unsigned char)+0x22>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:228
		for (i= 0; i < 6; i++)
		{
			ssd1306_send_data_byte(ssd1306xled_font6x8[ci * 6 + i]);
		}
		ssd1306_send_data_stop();
		setCursor(oledX+6, oledY);
    2db0:	87 e0       	ldi	r24, 0x07	; 7
    2db2:	dd cf       	rjmp	.-70     	; 0x2d6e <SSD1306Device::write(unsigned char)+0x4c>

00002db4 <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
    2db4:	0f 93       	push	r16
    2db6:	1f 93       	push	r17
    2db8:	cf 93       	push	r28
    2dba:	df 93       	push	r29
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/tinyOLED.cpp:218
		if (oledX > 122)
		{
			oledX = 0;
			oledY++;
			if ( oledY > 7) // tBUG
				oledY = 7;
    2dbc:	ec 01       	movw	r28, r24
    2dbe:	88 81       	ld	r24, Y
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:135
  }
  buffer = NULL;
  capacity = len = 0;
}

unsigned char String::reserve(unsigned int size) {
    2dc0:	99 81       	ldd	r25, Y+1	; 0x01
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	59 f0       	breq	.+22     	; 0x2ddc <String::reserve(unsigned int)+0x28>
    2dc6:	2a 81       	ldd	r18, Y+2	; 0x02
    2dc8:	3b 81       	ldd	r19, Y+3	; 0x03
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:136
  if (buffer && capacity >= size) {
    2dca:	26 17       	cp	r18, r22
    2dcc:	37 07       	cpc	r19, r23
    2dce:	30 f0       	brcs	.+12     	; 0x2ddc <String::reserve(unsigned int)+0x28>
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	df 91       	pop	r29
    2dd4:	cf 91       	pop	r28
    2dd6:	1f 91       	pop	r17
    2dd8:	0f 91       	pop	r16
    2dda:	08 95       	ret
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:141
    return 1;
  }
  if (changeBuffer(size)) {
    if (len == 0) {
      buffer[0] = 0;
    2ddc:	8b 01       	movw	r16, r22
changeBuffer():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:146
    }
    return 1;
  }
  return 0;
}
    2dde:	6f 5f       	subi	r22, 0xFF	; 255
    2de0:	7f 4f       	sbci	r23, 0xFF	; 255
    2de2:	0e 94 42 22 	call	0x4484	; 0x4484 <realloc>
    2de6:	00 97       	sbiw	r24, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:149

unsigned char String::changeBuffer(unsigned int maxStrLen) {
  char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2de8:	59 f0       	breq	.+22     	; 0x2e00 <String::reserve(unsigned int)+0x4c>
    2dea:	88 83       	st	Y, r24
    2dec:	99 83       	std	Y+1, r25	; 0x01
    2dee:	0a 83       	std	Y+2, r16	; 0x02
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:150
  if (newbuffer) {
    2df0:	1b 83       	std	Y+3, r17	; 0x03
_ZN6String7reserveEj():
    2df2:	2c 81       	ldd	r18, Y+4	; 0x04
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:151
    buffer = newbuffer;
    2df4:	3d 81       	ldd	r19, Y+5	; 0x05
    2df6:	23 2b       	or	r18, r19
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:152
    capacity = maxStrLen;
    2df8:	59 f7       	brne	.-42     	; 0x2dd0 <String::reserve(unsigned int)+0x1c>
    2dfa:	fc 01       	movw	r30, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:140
unsigned char String::reserve(unsigned int size) {
  if (buffer && capacity >= size) {
    return 1;
  }
  if (changeBuffer(size)) {
    if (len == 0) {
    2dfc:	10 82       	st	Z, r1
    2dfe:	e8 cf       	rjmp	.-48     	; 0x2dd0 <String::reserve(unsigned int)+0x1c>
    2e00:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:141
      buffer[0] = 0;
    2e02:	e7 cf       	rjmp	.-50     	; 0x2dd2 <String::reserve(unsigned int)+0x1e>

00002e04 <String::operator=(char const*) [clone .part.3]>:
_ZN6StringaSEPKc.part.3():
    2e04:	ef 92       	push	r14
    2e06:	ff 92       	push	r15
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:145
    }
    return 1;
  }
  return 0;
    2e08:	0f 93       	push	r16
    2e0a:	1f 93       	push	r17
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:233
  }
  return *this;
}
#endif

String &String::operator = (const char *cstr) {
    2e0c:	cf 93       	push	r28
    2e0e:	df 93       	push	r29
    2e10:	ec 01       	movw	r28, r24
    2e12:	7b 01       	movw	r14, r22
    2e14:	fb 01       	movw	r30, r22
    2e16:	01 90       	ld	r0, Z+
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:235
  if (cstr) {
    copy(cstr, strlen(cstr));
    2e18:	00 20       	and	r0, r0
    2e1a:	e9 f7       	brne	.-6      	; 0x2e16 <String::operator=(char const*) [clone .part.3]+0x12>
    2e1c:	31 97       	sbiw	r30, 0x01	; 1
    2e1e:	8f 01       	movw	r16, r30
    2e20:	06 1b       	sub	r16, r22
    2e22:	17 0b       	sbc	r17, r23
copy():
    2e24:	b8 01       	movw	r22, r16
    2e26:	c6 df       	rcall	.-116    	; 0x2db4 <String::reserve(unsigned int)>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:163
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String &String::copy(const char *cstr, unsigned int length) {
  if (!reserve(length)) {
    2e28:	28 81       	ld	r18, Y
    2e2a:	39 81       	ldd	r19, Y+1	; 0x01
    2e2c:	81 11       	cpse	r24, r1
    2e2e:	13 c0       	rjmp	.+38     	; 0x2e56 <String::operator=(char const*) [clone .part.3]+0x52>
invalidate():
    2e30:	21 15       	cp	r18, r1
    2e32:	31 05       	cpc	r19, r1
    2e34:	19 f0       	breq	.+6      	; 0x2e3c <String::operator=(char const*) [clone .part.3]+0x38>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:128
  capacity = 0;
  len = 0;
}

void String::invalidate(void) {
  if (buffer) {
    2e36:	c9 01       	movw	r24, r18
    2e38:	0e 94 b9 21 	call	0x4372	; 0x4372 <free>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:129
    free(buffer);
    2e3c:	18 82       	st	Y, r1
    2e3e:	19 82       	std	Y+1, r1	; 0x01
    2e40:	1c 82       	std	Y+4, r1	; 0x04
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:131
  }
  buffer = NULL;
    2e42:	1d 82       	std	Y+5, r1	; 0x05
    2e44:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:132
  capacity = len = 0;
    2e46:	1b 82       	std	Y+3, r1	; 0x03
_ZN6StringaSEPKc.part.3():
    2e48:	df 91       	pop	r29
    2e4a:	cf 91       	pop	r28
    2e4c:	1f 91       	pop	r17
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:241
  } else {
    invalidate();
  }

  return *this;
}
    2e4e:	0f 91       	pop	r16
    2e50:	ff 90       	pop	r15
    2e52:	ef 90       	pop	r14
    2e54:	08 95       	ret
copy():
    2e56:	0c 83       	std	Y+4, r16	; 0x04
    2e58:	1d 83       	std	Y+5, r17	; 0x05
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:167
String &String::copy(const char *cstr, unsigned int length) {
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    2e5a:	b7 01       	movw	r22, r14
    2e5c:	c9 01       	movw	r24, r18
_ZN6StringaSEPKc.part.3():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:168
  strcpy(buffer, cstr);
    2e5e:	df 91       	pop	r29
    2e60:	cf 91       	pop	r28
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:241
  } else {
    invalidate();
  }

  return *this;
}
    2e62:	1f 91       	pop	r17
    2e64:	0f 91       	pop	r16
    2e66:	ff 90       	pop	r15
    2e68:	ef 90       	pop	r14
copy():
    2e6a:	0c 94 08 23 	jmp	0x4610	; 0x4610 <strcpy>

00002e6e <u8g2_ClearBuffer>:
u8g2_ClearBuffer():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:168
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
  strcpy(buffer, cstr);
    2e6e:	fc 01       	movw	r30, r24
    2e70:	a0 81       	ld	r26, Z
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:41
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
    2e72:	b1 81       	ldd	r27, Z+1	; 0x01
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:43
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    2e74:	50 96       	adiw	r26, 0x10	; 16
    2e76:	2c 91       	ld	r18, X
    2e78:	82 ad       	ldd	r24, Z+58	; 0x3a
    2e7a:	38 e0       	ldi	r19, 0x08	; 8
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:45
  cnt *= u8g2->tile_buf_height;
  cnt *= 8;
    2e7c:	83 9f       	mul	r24, r19
    2e7e:	c0 01       	movw	r24, r0
    2e80:	11 24       	eor	r1, r1
    2e82:	28 9f       	mul	r18, r24
    2e84:	a0 01       	movw	r20, r0
    2e86:	29 9f       	mul	r18, r25
    2e88:	50 0d       	add	r21, r0
    2e8a:	11 24       	eor	r1, r1
    2e8c:	70 e0       	ldi	r23, 0x00	; 0
    2e8e:	60 e0       	ldi	r22, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:46
  memset(u8g2->tile_buf_ptr, 0, cnt);
    2e90:	80 ad       	ldd	r24, Z+56	; 0x38
    2e92:	91 ad       	ldd	r25, Z+57	; 0x39
    2e94:	0c 94 01 23 	jmp	0x4602	; 0x4602 <memset>

00002e98 <u8g2_NextPage>:
u8g2_NextPage():
    2e98:	1f 93       	push	r17
    2e9a:	cf 93       	push	r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:117
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
}

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
    2e9c:	df 93       	push	r29
    2e9e:	ec 01       	movw	r28, r24
    2ea0:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <u8g2_send_buffer>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:119
  uint8_t row;
  u8g2_send_buffer(u8g2);
    2ea4:	1b ad       	ldd	r17, Y+59	; 0x3b
    2ea6:	8a ad       	ldd	r24, Y+58	; 0x3a
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:120
  row = u8g2->tile_curr_row;
    2ea8:	18 0f       	add	r17, r24
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:121
  row += u8g2->tile_buf_height;
    2eaa:	e8 81       	ld	r30, Y
    2eac:	f9 81       	ldd	r31, Y+1	; 0x01
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:122
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
    2eae:	81 89       	ldd	r24, Z+17	; 0x11
    2eb0:	18 17       	cp	r17, r24
    2eb2:	68 f0       	brcs	.+26     	; 0x2ece <u8g2_NextPage+0x36>
u8x8_RefreshDisplay():
    2eb4:	ec 81       	ldd	r30, Y+4	; 0x04
    2eb6:	fd 81       	ldd	r31, Y+5	; 0x05
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:158
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    2eb8:	30 e0       	ldi	r19, 0x00	; 0
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	40 e0       	ldi	r20, 0x00	; 0
    2ebe:	60 e1       	ldi	r22, 0x10	; 16
    2ec0:	ce 01       	movw	r24, r28
    2ec2:	09 95       	icall
u8g2_NextPage():
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	df 91       	pop	r29
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:125
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    return 0;
    2ec8:	cf 91       	pop	r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:133
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
  return 1;
}
    2eca:	1f 91       	pop	r17
    2ecc:	08 95       	ret
    2ece:	fe 01       	movw	r30, r28
    2ed0:	e5 57       	subi	r30, 0x75	; 117
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:127
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    return 0;
  }
  if ( u8g2->is_auto_page_clear )
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	80 81       	ld	r24, Z
    2ed6:	88 23       	and	r24, r24
    2ed8:	11 f0       	breq	.+4      	; 0x2ede <u8g2_NextPage+0x46>
    2eda:	ce 01       	movw	r24, r28
    2edc:	c8 df       	rcall	.-112    	; 0x2e6e <u8g2_ClearBuffer>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:129
  {
    u8g2_ClearBuffer(u8g2);
    2ede:	61 2f       	mov	r22, r17
    2ee0:	ce 01       	movw	r24, r28
    2ee2:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <u8g2_SetBufferCurrTileRow>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:131
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	ee cf       	rjmp	.-36     	; 0x2ec6 <u8g2_NextPage+0x2e>

00002eea <u8g2_FirstPage>:
u8g2_FirstPage():
    2eea:	cf 93       	push	r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:132
  return 1;
    2eec:	df 93       	push	r29
    2eee:	ec 01       	movw	r28, r24
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:108
  u8g2->cb->update_dimension(u8g2);
  u8g2->cb->update_page_win(u8g2);
}

void u8g2_FirstPage(u8g2_t *u8g2)
{
    2ef0:	fc 01       	movw	r30, r24
    2ef2:	e5 57       	subi	r30, 0x75	; 117
    2ef4:	ff 4f       	sbci	r31, 0xFF	; 255
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:109
  if ( u8g2->is_auto_page_clear )
    2ef6:	80 81       	ld	r24, Z
    2ef8:	88 23       	and	r24, r24
    2efa:	11 f0       	breq	.+4      	; 0x2f00 <u8g2_FirstPage+0x16>
    2efc:	ce 01       	movw	r24, r28
    2efe:	b7 df       	rcall	.-146    	; 0x2e6e <u8g2_ClearBuffer>
    2f00:	60 e0       	ldi	r22, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:111
  {
    u8g2_ClearBuffer(u8g2);
    2f02:	ce 01       	movw	r24, r28
    2f04:	df 91       	pop	r29
    2f06:	cf 91       	pop	r28
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:113
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
    2f08:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <u8g2_SetBufferCurrTileRow>

00002f0c <u8g2_ClearDisplay.constprop.64>:
u8g2_ClearDisplay.constprop.64():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:114
}
    2f0c:	83 e1       	ldi	r24, 0x13	; 19
    2f0e:	9d e3       	ldi	r25, 0x3D	; 61
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_buffer.c:113
{
  if ( u8g2->is_auto_page_clear )
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
    2f10:	ec df       	rcall	.-40     	; 0x2eea <u8g2_FirstPage>
    2f12:	83 e1       	ldi	r24, 0x13	; 19
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:41

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
  u8g2_FirstPage(u8g2);
    2f14:	9d e3       	ldi	r25, 0x3D	; 61
    2f16:	c0 df       	rcall	.-128    	; 0x2e98 <u8g2_NextPage>
    2f18:	81 11       	cpse	r24, r1
    2f1a:	fb cf       	rjmp	.-10     	; 0x2f12 <u8g2_ClearDisplay.constprop.64+0x6>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:43
  do {
  } while ( u8g2_NextPage(u8g2) );
    2f1c:	60 e0       	ldi	r22, 0x00	; 0
    2f1e:	83 e1       	ldi	r24, 0x13	; 19
    2f20:	9d e3       	ldi	r25, 0x3D	; 61
    2f22:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <u8g2_SetBufferCurrTileRow>

00002f26 <drawMenu()>:
_Z8drawMenuv():
    2f26:	6f 92       	push	r6
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_cleardisplay.c:52
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
    2f28:	7f 92       	push	r7
    2f2a:	8f 92       	push	r8
    2f2c:	9f 92       	push	r9
    2f2e:	af 92       	push	r10
    2f30:	bf 92       	push	r11
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:143
  u8g2.setFontPosTop();
  u8g2.setFontDirection(0);
}

void drawMenu()
{
    2f32:	cf 92       	push	r12
    2f34:	df 92       	push	r13
    2f36:	ef 92       	push	r14
    2f38:	ff 92       	push	r15
    2f3a:	0f 93       	push	r16
    2f3c:	1f 93       	push	r17
    2f3e:	cf 93       	push	r28
    2f40:	df 93       	push	r29
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
    2f46:	e2 97       	sbiw	r28, 0x32	; 50
    2f48:	cd bf       	out	0x3d, r28	; 61
    2f4a:	de bf       	out	0x3e, r29	; 62
_ZN4U8G29firstPageEv():
    2f4c:	83 e1       	ldi	r24, 0x13	; 19
    2f4e:	9d e3       	ldi	r25, 0x3D	; 61
    2f50:	cc df       	rcall	.-104    	; 0x2eea <u8g2_FirstPage>
_Z8drawMenuv():
    2f52:	89 e9       	ldi	r24, 0x99	; 153
    2f54:	88 2e       	mov	r8, r24
    2f56:	89 ec       	ldi	r24, 0xC9	; 201
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    2f58:	98 2e       	mov	r9, r24
    2f5a:	8e 01       	movw	r16, r28
    2f5c:	0f 5f       	subi	r16, 0xFF	; 255
    2f5e:	1f 4f       	sbci	r17, 0xFF	; 255
u8g2_DrawStr():
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:148
  char msg[50];
  u8g2.firstPage();
  do {
    u8g2_prepare();
    sprintf(msg, "Mod:%4d Hub:%4d", lastRSSI, hubRSSI);
    2f60:	9a e3       	ldi	r25, 0x3A	; 58
    2f62:	e9 2e       	mov	r14, r25
    2f64:	96 e0       	ldi	r25, 0x06	; 6
    2f66:	f9 2e       	mov	r15, r25
_Z8drawMenuv():
    2f68:	29 ea       	ldi	r18, 0xA9	; 169
    2f6a:	a2 2e       	mov	r10, r18
    2f6c:	29 ec       	ldi	r18, 0xC9	; 201
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1041
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_ascii_next;
    2f6e:	b2 2e       	mov	r11, r18
    2f70:	39 eb       	ldi	r19, 0xB9	; 185
    2f72:	c3 2e       	mov	r12, r19
    2f74:	39 ec       	ldi	r19, 0xC9	; 201
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:151
    u8g2.drawStr(0, 2, msg);

    sprintf(msg, "Out:%4d In :%4d", countOUT, countIN);
    2f76:	d3 2e       	mov	r13, r19
    2f78:	48 ec       	ldi	r20, 0xC8	; 200
    2f7a:	64 2e       	mov	r6, r20
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:154
    u8g2.drawStr(0, 18, msg);

    sprintf(msg, "   Tx   %4d ms", msTX - msOUT);
    2f7c:	49 ec       	ldi	r20, 0xC9	; 201
    2f7e:	74 2e       	mov	r7, r20
    2f80:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <u8g2_prepare()>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:157
    u8g2.drawStr(0, 34, msg);

    sprintf(msg, "   Ping %4d ms", msPING);
    2f84:	80 91 59 38 	lds	r24, 0x3859	; 0x803859 <hubRSSI+0x1>
    2f88:	8f 93       	push	r24
    2f8a:	80 91 58 38 	lds	r24, 0x3858	; 0x803858 <hubRSSI>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:147
void drawMenu()
{
  char msg[50];
  u8g2.firstPage();
  do {
    u8g2_prepare();
    2f8e:	8f 93       	push	r24
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:148
    sprintf(msg, "Mod:%4d Hub:%4d", lastRSSI, hubRSSI);
    2f90:	80 91 90 38 	lds	r24, 0x3890	; 0x803890 <lastRSSI+0x1>
    2f94:	8f 93       	push	r24
    2f96:	80 91 8f 38 	lds	r24, 0x388F	; 0x80388f <lastRSSI>
    2f9a:	8f 93       	push	r24
    2f9c:	9f 92       	push	r9
    2f9e:	8f 92       	push	r8
    2fa0:	1f 93       	push	r17
    2fa2:	0f 93       	push	r16
    2fa4:	0e 94 0f 23 	call	0x461e	; 0x461e <sprintf>
u8g2_DrawStr():
    2fa8:	e0 92 15 3d 	sts	0x3D15, r14	; 0x803d15 <u8g2+0x6>
    2fac:	f0 92 16 3d 	sts	0x3D16, r15	; 0x803d16 <u8g2+0x7>
    2fb0:	b8 01       	movw	r22, r16
    2fb2:	82 e0       	ldi	r24, 0x02	; 2
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1041
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <u8g2_draw_string.constprop.60>
_Z8drawMenuv():
    2fba:	80 91 5b 38 	lds	r24, 0x385B	; 0x80385b <countIN+0x1>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1042
  return u8g2_draw_string(u8g2, x, y, str);
    2fbe:	8f 93       	push	r24
    2fc0:	80 91 5a 38 	lds	r24, 0x385A	; 0x80385a <countIN>
    2fc4:	8f 93       	push	r24
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:151
    u8g2.drawStr(0, 2, msg);

    sprintf(msg, "Out:%4d In :%4d", countOUT, countIN);
    2fc6:	80 91 8a 38 	lds	r24, 0x388A	; 0x80388a <countOUT+0x1>
    2fca:	8f 93       	push	r24
    2fcc:	80 91 89 38 	lds	r24, 0x3889	; 0x803889 <countOUT>
    2fd0:	8f 93       	push	r24
    2fd2:	bf 92       	push	r11
    2fd4:	af 92       	push	r10
    2fd6:	1f 93       	push	r17
    2fd8:	0f 93       	push	r16
    2fda:	0e 94 0f 23 	call	0x461e	; 0x461e <sprintf>
u8g2_DrawStr():
    2fde:	e0 92 15 3d 	sts	0x3D15, r14	; 0x803d15 <u8g2+0x6>
    2fe2:	f0 92 16 3d 	sts	0x3D16, r15	; 0x803d16 <u8g2+0x7>
    2fe6:	b8 01       	movw	r22, r16
    2fe8:	82 e1       	ldi	r24, 0x12	; 18
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1041
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_ascii_next;
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <u8g2_draw_string.constprop.60>
_Z8drawMenuv():
    2ff0:	80 91 8b 38 	lds	r24, 0x388B	; 0x80388b <msTX>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1042
  return u8g2_draw_string(u8g2, x, y, str);
    2ff4:	90 91 8c 38 	lds	r25, 0x388C	; 0x80388c <msTX+0x1>
    2ff8:	a0 91 8d 38 	lds	r26, 0x388D	; 0x80388d <msTX+0x2>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:154
    u8g2.drawStr(0, 18, msg);

    sprintf(msg, "   Tx   %4d ms", msTX - msOUT);
    2ffc:	b0 91 8e 38 	lds	r27, 0x388E	; 0x80388e <msTX+0x3>
    3000:	40 91 91 38 	lds	r20, 0x3891	; 0x803891 <msOUT>
    3004:	50 91 92 38 	lds	r21, 0x3892	; 0x803892 <msOUT+0x1>
    3008:	60 91 93 38 	lds	r22, 0x3893	; 0x803893 <msOUT+0x2>
    300c:	70 91 94 38 	lds	r23, 0x3894	; 0x803894 <msOUT+0x3>
    3010:	84 1b       	sub	r24, r20
    3012:	95 0b       	sbc	r25, r21
    3014:	a6 0b       	sbc	r26, r22
    3016:	b7 0b       	sbc	r27, r23
    3018:	bf 93       	push	r27
    301a:	af 93       	push	r26
    301c:	9f 93       	push	r25
    301e:	8f 93       	push	r24
    3020:	df 92       	push	r13
    3022:	cf 92       	push	r12
    3024:	1f 93       	push	r17
    3026:	0f 93       	push	r16
    3028:	0e 94 0f 23 	call	0x461e	; 0x461e <sprintf>
u8g2_DrawStr():
    302c:	e0 92 15 3d 	sts	0x3D15, r14	; 0x803d15 <u8g2+0x6>
    3030:	f0 92 16 3d 	sts	0x3D16, r15	; 0x803d16 <u8g2+0x7>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1041
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_ascii_next;
    3034:	b8 01       	movw	r22, r16
    3036:	82 e2       	ldi	r24, 0x22	; 34
    3038:	90 e0       	ldi	r25, 0x00	; 0
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1042
  return u8g2_draw_string(u8g2, x, y, str);
    303a:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <u8g2_draw_string.constprop.60>
_Z8drawMenuv():
    303e:	80 91 57 38 	lds	r24, 0x3857	; 0x803857 <msPING+0x3>
    3042:	8f 93       	push	r24
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:157
    u8g2.drawStr(0, 34, msg);

    sprintf(msg, "   Ping %4d ms", msPING);
    3044:	80 91 56 38 	lds	r24, 0x3856	; 0x803856 <msPING+0x2>
    3048:	8f 93       	push	r24
    304a:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <msPING+0x1>
    304e:	8f 93       	push	r24
    3050:	80 91 54 38 	lds	r24, 0x3854	; 0x803854 <msPING>
    3054:	8f 93       	push	r24
    3056:	7f 92       	push	r7
    3058:	6f 92       	push	r6
    305a:	1f 93       	push	r17
    305c:	0f 93       	push	r16
    305e:	0e 94 0f 23 	call	0x461e	; 0x461e <sprintf>
u8g2_DrawStr():
    3062:	e0 92 15 3d 	sts	0x3D15, r14	; 0x803d15 <u8g2+0x6>
    3066:	f0 92 16 3d 	sts	0x3D16, r15	; 0x803d16 <u8g2+0x7>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1041
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_ascii_next;
    306a:	cd bf       	out	0x3d, r28	; 61
    306c:	de bf       	out	0x3e, r29	; 62
    306e:	b8 01       	movw	r22, r16
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1042
  return u8g2_draw_string(u8g2, x, y, str);
    3070:	82 e3       	ldi	r24, 0x32	; 50
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <u8g2_draw_string.constprop.60>
_ZN4U8G28nextPageEv():
    3078:	83 e1       	ldi	r24, 0x13	; 19
    307a:	9d e3       	ldi	r25, 0x3D	; 61
    307c:	0d df       	rcall	.-486    	; 0x2e98 <u8g2_NextPage>
_Z8drawMenuv():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    307e:	81 11       	cpse	r24, r1
    3080:	7f cf       	rjmp	.-258    	; 0x2f80 <drawMenu()+0x5a>
    3082:	e2 96       	adiw	r28, 0x32	; 50
    3084:	cd bf       	out	0x3d, r28	; 61
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:159
    u8g2.drawStr(0, 50, msg);
  } while ( u8g2.nextPage() );
    3086:	de bf       	out	0x3e, r29	; 62
    3088:	df 91       	pop	r29
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:160
}
    308a:	cf 91       	pop	r28
    308c:	1f 91       	pop	r17
    308e:	0f 91       	pop	r16
    3090:	ff 90       	pop	r15
    3092:	ef 90       	pop	r14
    3094:	df 90       	pop	r13
    3096:	cf 90       	pop	r12
    3098:	bf 90       	pop	r11
    309a:	af 90       	pop	r10
    309c:	9f 90       	pop	r9
    309e:	8f 90       	pop	r8
    30a0:	7f 90       	pop	r7
    30a2:	6f 90       	pop	r6
    30a4:	08 95       	ret

000030a6 <__vector_15>:
__vector_15():
    30a6:	8f 93       	push	r24
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	80 93 8d 0a 	sts	0x0A8D, r24	; 0x800a8d <u8g2_cb_r0+0x7f40fa>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:206
  #else
    ISR(MILLIS_TIMER_VECTOR, ISR_NAKED) {
      // Common Interrupt header for TCB, TCA and TCD;
      // Clears the Timer Interrupt flag and pushes the CPU Registers
      // 7 words / 7 clocks
      __asm__ __volatile__(
    30ae:	8f b7       	in	r24, 0x3f	; 63
    30b0:	8f 93       	push	r24
    30b2:	ef 93       	push	r30
    30b4:	ff 93       	push	r31
    30b6:	ee e7       	ldi	r30, 0x7E	; 126
    30b8:	f8 e3       	ldi	r31, 0x38	; 56
    30ba:	9f 93       	push	r25
    30bc:	68 94       	set
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:317
        [MIINC]  "M" ((0x0000 - MILLIS_INC) & 0xFF),
        [MINCD]  "M" ((0xFFFF - MILLIS_INC) & 0xFF)
      );
  */

      __asm__ __volatile__(
    30be:	8f ef       	ldi	r24, 0xFF	; 255
    30c0:	0f c0       	rjmp	.+30     	; 0x30e0 <sub4>

000030c2 <ovf_end>:
    30c2:	e8 94       	clt
    30c4:	84 81       	ldd	r24, Z+4	; 0x04
    30c6:	95 81       	ldd	r25, Z+5	; 0x05
    30c8:	88 5d       	subi	r24, 0xD8	; 216
    30ca:	9f 4f       	sbci	r25, 0xFF	; 255
    30cc:	84 83       	std	Z+4, r24	; 0x04
    30ce:	95 83       	std	Z+5, r25	; 0x05
    30d0:	88 5e       	subi	r24, 0xE8	; 232
    30d2:	93 40       	sbci	r25, 0x03	; 3
    30d4:	10 f0       	brcs	.+4      	; 0x30da <higher>
    30d6:	8e ef       	ldi	r24, 0xFE	; 254
    30d8:	03 c0       	rjmp	.+6      	; 0x30e0 <sub4>

000030da <higher>:
    30da:	84 83       	std	Z+4, r24	; 0x04
    30dc:	95 83       	std	Z+5, r25	; 0x05
    30de:	8d ef       	ldi	r24, 0xFD	; 253

000030e0 <sub4>:
    30e0:	90 81       	ld	r25, Z
    30e2:	98 1b       	sub	r25, r24
    30e4:	91 93       	st	Z+, r25
    30e6:	90 81       	ld	r25, Z
    30e8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ea:	91 93       	st	Z+, r25
    30ec:	90 81       	ld	r25, Z
    30ee:	9f 4f       	sbci	r25, 0xFF	; 255
    30f0:	91 93       	st	Z+, r25
    30f2:	90 81       	ld	r25, Z
    30f4:	9f 4f       	sbci	r25, 0xFF	; 255
    30f6:	91 93       	st	Z+, r25
    30f8:	26 f3       	brts	.-56     	; 0x30c2 <ovf_end>

000030fa <sub_end>:
    30fa:	9f 91       	pop	r25
    30fc:	ff 91       	pop	r31
    30fe:	ef 91       	pop	r30
    3100:	8f 91       	pop	r24
    3102:	8f bf       	out	0x3f, r24	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:379
        [MINCD]  "M" ((0xFFFF - MILLIS_INC) & 0xFF)
      );
    #endif /* (defined(MILLIS_USE_TIMERB0) || defined(MILLIS_USE_TIMERB1) || defined(MILLIS_USE_TIMERB2) || defined(MILLIS_USE_TIMERB3) || defined(MILLIS_USE_TIMERB4)) */
    // Common ISR Epilogue for TCA, TCB and TCD, popping register in reverse Order
    // 6 words, 14 clocks
    __asm__ __volatile__(
    3104:	8f 91       	pop	r24
    3106:	18 95       	reti

00003108 <__vector_5>:
__vector_5():
    3108:	0f 93       	push	r16
    310a:	04 e0       	ldi	r16, 0x04	; 4
    310c:	06 c0       	rjmp	.+12     	; 0x311a <isrBody>

0000310e <__vector_4>:
__vector_4():
    310e:	0f 93       	push	r16
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:356
      __builtin_unreachable();
    }
    #endif
    #ifdef PORTC_PINS
      ISR(PORTC_PORT_vect, ISR_NAKED) {
      asm volatile(
    3110:	02 e0       	ldi	r16, 0x02	; 2
    3112:	03 c0       	rjmp	.+6      	; 0x311a <isrBody>

00003114 <__vector_3>:
__vector_3():
    3114:	0f 93       	push	r16
    3116:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:342
      ::);
    __builtin_unreachable();
    }
    #ifdef PORTB_PINS
      ISR(PORTB_PORT_vect, ISR_NAKED) {
      asm volatile(
    3118:	00 c0       	rjmp	.+0      	; 0x311a <isrBody>

0000311a <isrBody>:
isrBody():
    311a:	0f 92       	push	r0
    311c:	0f b6       	in	r0, 0x3f	; 63
    311e:	0f 92       	push	r0
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:329
 * then it's just a matter of making sure we pop everything we pushed onto the stack in the reverse order, including r16 followed by the reti to exit the interrupt..
*/

  #if defined(CORE_ATTACH_ALL)
    ISR(PORTA_PORT_vect, ISR_NAKED) {
    asm volatile(
    3120:	1f 92       	push	r1
    3122:	11 24       	eor	r1, r1
    3124:	ff 92       	push	r15
    3126:	1f 93       	push	r17
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:114
      SREG = oldSREG;
    }
  }
#if !defined(CORE_ATTACH_EARLYCLEAR)
  void __attribute__((naked)) __attribute__((used)) __attribute__((noreturn)) isrBody() {
    asm volatile (
    3128:	2f 93       	push	r18
    312a:	3f 93       	push	r19
    312c:	4f 93       	push	r20
    312e:	5f 93       	push	r21
    3130:	6f 93       	push	r22
    3132:	7f 93       	push	r23
    3134:	8f 93       	push	r24
    3136:	9f 93       	push	r25
    3138:	af 93       	push	r26
    313a:	bf 93       	push	r27
    313c:	cf 93       	push	r28
    313e:	df 93       	push	r29
    3140:	ef 93       	push	r30
    3142:	ff 93       	push	r31
    3144:	a0 e0       	ldi	r26, 0x00	; 0
    3146:	b8 e3       	ldi	r27, 0x38	; 56
    3148:	a0 0f       	add	r26, r16
    314a:	b1 1d       	adc	r27, r1
    314c:	cd 91       	ld	r28, X+
    314e:	dc 91       	ld	r29, X
    3150:	00 0f       	add	r16, r16
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/WInterrupts.c:142
      "push  r28"        "\n\t" // Not call used, but we use it.
      "push  r29"        "\n\t" // same thing.
      "push  r30"        "\n\t"
      "push  r31"        "\n\t"
      ::);
    asm volatile (  // This gets us the address of intFunc in Y pointer reg.
    3152:	0d 5f       	subi	r16, 0xFD	; 253
    3154:	a0 2f       	mov	r26, r16
    3156:	b0 e0       	ldi	r27, 0x00	; 0
    3158:	fc 90       	ld	r15, X
    315a:	10 97       	sbiw	r26, 0x00	; 0
    315c:	61 f0       	breq	.+24     	; 0x3176 <AIntEnd>
    315e:	1f 2d       	mov	r17, r15

00003160 <AIntLoop>:
    3160:	16 95       	lsr	r17
    3162:	18 f0       	brcs	.+6      	; 0x316a <AIntLoop+0xa>
    3164:	41 f0       	breq	.+16     	; 0x3176 <AIntEnd>
    3166:	22 96       	adiw	r28, 0x02	; 2
    3168:	fb cf       	rjmp	.-10     	; 0x3160 <AIntLoop>
    316a:	e9 91       	ld	r30, Y+
    316c:	f9 91       	ld	r31, Y+
    316e:	30 97       	sbiw	r30, 0x00	; 0
    3170:	b9 f3       	breq	.-18     	; 0x3160 <AIntLoop>
    3172:	09 95       	icall
    3174:	f5 cf       	rjmp	.-22     	; 0x3160 <AIntLoop>

00003176 <AIntEnd>:
    3176:	a0 2f       	mov	r26, r16
    3178:	b0 e0       	ldi	r27, 0x00	; 0
    317a:	fc 92       	st	X, r15
    317c:	ff 91       	pop	r31
    317e:	ef 91       	pop	r30
    3180:	df 91       	pop	r29
    3182:	cf 91       	pop	r28
    3184:	bf 91       	pop	r27
    3186:	af 91       	pop	r26
    3188:	9f 91       	pop	r25
    318a:	8f 91       	pop	r24
    318c:	7f 91       	pop	r23
    318e:	6f 91       	pop	r22
    3190:	5f 91       	pop	r21
    3192:	4f 91       	pop	r20
    3194:	3f 91       	pop	r19
    3196:	2f 91       	pop	r18
    3198:	1f 91       	pop	r17
    319a:	ff 90       	pop	r15
    319c:	1f 90       	pop	r1
    319e:	0f 90       	pop	r0
    31a0:	0f be       	out	0x3f, r0	; 63
    31a2:	0f 90       	pop	r0
    31a4:	0f 91       	pop	r16
    31a6:	18 95       	reti

000031a8 <__vector_24>:
__vector_24():
    31a8:	1f 92       	push	r1
    31aa:	0f 92       	push	r0
    31ac:	0f b6       	in	r0, 0x3f	; 63
    31ae:	0f 92       	push	r0
    31b0:	11 24       	eor	r1, r1
    31b2:	1f 93       	push	r17
    31b4:	2f 93       	push	r18
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:977


/**
 *@brief      TWI0 Slave Interrupt vector
 */
ISR(TWI0_TWIS_vect) {
    31b6:	3f 93       	push	r19
    31b8:	4f 93       	push	r20
    31ba:	5f 93       	push	r21
    31bc:	6f 93       	push	r22
    31be:	7f 93       	push	r23
    31c0:	8f 93       	push	r24
    31c2:	9f 93       	push	r25
    31c4:	af 93       	push	r26
    31c6:	bf 93       	push	r27
    31c8:	cf 93       	push	r28
    31ca:	df 93       	push	r29
    31cc:	ef 93       	push	r30
    31ce:	ff 93       	push	r31
TWI_HandleSlaveIRQ():
    31d0:	c3 ea       	ldi	r28, 0xA3	; 163
    31d2:	d8 e3       	ldi	r29, 0x38	; 56
    31d4:	e8 81       	ld	r30, Y
    31d6:	f9 81       	ldd	r31, Y+1	; 0x01
    31d8:	83 85       	ldd	r24, Z+11	; 0x0b
    31da:	86 ff       	sbrs	r24, 6
    31dc:	56 c0       	rjmp	.+172    	; 0x328a <__vector_24+0xe2>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:522
  // used as a frame pointer and the compiler avoids using it. So, using it comes with a price of pushing/popping
  // r28/r29, as well as ldi the address of the struct into those, so it only makes sense in a few cases like this.
  // Since the Y register is not call-clobbered, it can be considered persistent in this function and has not to
  // be restored after the icall to the user callbacks, unlike Z (which is used for _module and icall).

  _fastPtr_y(_data,_data);  // force _data into Y and instruct to not change Y
    31de:	80 ff       	sbrs	r24, 0
    31e0:	41 c0       	rjmp	.+130    	; 0x3264 <__vector_24+0xbc>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:564
  #if defined(TWI_MANDS)
    _data->_bools._toggleStreamFn = 0x01;
  #endif

  uint8_t action = 0;
  uint8_t clientStatus = _data->_module->SSTATUS;
    31e2:	15 85       	ldd	r17, Z+13	; 0x0d
    31e4:	81 ff       	sbrs	r24, 1
    31e6:	38 c0       	rjmp	.+112    	; 0x3258 <__vector_24+0xb0>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:566

  if (clientStatus & TWI_APIF_bm) {  // Address/Stop Bit set
    31e8:	8e 81       	ldd	r24, Y+6	; 0x06
    31ea:	88 23       	and	r24, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:567
    if (clientStatus & TWI_AP_bm) {    // Address bit set
    31ec:	59 f0       	breq	.+22     	; 0x3204 <__vector_24+0x5c>
popSleep():
    31ee:	80 91 78 38 	lds	r24, 0x3878	; 0x803878 <sleepStack>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:569
      uint8_t payload = _data->_module->SDATA;  // read address from data register
      if (clientStatus & TWI_DIR_bm) {  // Master is reading
    31f2:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <u8g2_cb_r0+0x7f36bd>
TWI_HandleSlaveIRQ():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:570
        if ((*rxHead) > 0) {                    // There is no way to identify a REPSTART,
    31f6:	eb 85       	ldd	r30, Y+11	; 0x0b
    31f8:	fc 85       	ldd	r31, Y+12	; 0x0c
    31fa:	30 97       	sbiw	r30, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:690
        sleepStackLoc = 0;              // reset everything
      }
      sleepStack = sleepStackLoc;
    }
  #else
    SLPCTRL.CTRLA = sleepStack;
    31fc:	19 f0       	breq	.+6      	; 0x3204 <__vector_24+0x5c>
    31fe:	8e 81       	ldd	r24, Y+6	; 0x06
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	09 95       	icall
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:572
    if (clientStatus & TWI_AP_bm) {    // Address bit set
      uint8_t payload = _data->_module->SDATA;  // read address from data register
      if (clientStatus & TWI_DIR_bm) {  // Master is reading
        if ((*rxHead) > 0) {                    // There is no way to identify a REPSTART,
          popSleep();                           // (have to treat REPSTART as another pop for sleep)
          if (_data->user_onReceive != NULL) {  // so when a Master Read occurs after a Master write
    3204:	1c 83       	std	Y+4, r17	; 0x04
    3206:	1d 82       	std	Y+5, r1	; 0x05
    3208:	18 86       	std	Y+8, r1	; 0x08
    320a:	e9 85       	ldd	r30, Y+9	; 0x09
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:573
            _data->user_onReceive((*rxHead));   // issue a call to the user callback first
    320c:	fa 85       	ldd	r31, Y+10	; 0x0a
    320e:	30 97       	sbiw	r30, 0x00	; 0
    3210:	09 f0       	breq	.+2      	; 0x3214 <__vector_24+0x6c>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:576
          }
        }
        (*address) = payload;                   // saving address to expose to the user sketch
    3212:	09 95       	icall
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:577
        (*txHead) = 0;                          // reset buffer positions so the Master can start writing at zero.
    3214:	8d 81       	ldd	r24, Y+5	; 0x05
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:578
        (*txTail) = 0;
    3216:	88 23       	and	r24, r24
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:580

        if (_data->user_onRequest != NULL) {
    3218:	19 f1       	breq	.+70     	; 0x3260 <__vector_24+0xb8>
__vector_24():
    321a:	83 e0       	ldi	r24, 0x03	; 3
pushSleep():
    321c:	90 91 50 00 	lds	r25, 0x0050	; 0x800050 <u8g2_cb_r0+0x7f36bd>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:581
          _data->user_onRequest();
    3220:	90 93 78 38 	sts	0x3878, r25	; 0x803878 <sleepStack>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:583
        }
        if ((*txHead) == 0) {                   // If no data to transmit, send NACK
    3224:	91 70       	andi	r25, 0x01	; 1
    3226:	90 93 50 00 	sts	0x0050, r25	; 0x800050 <u8g2_cb_r0+0x7f36bd>
TWI_HandleSlaveIRQ():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:672
      sleepStackLoc = SLPCTRL.CTRLA;        // save sleep settings to sleepStack
      SLPCTRL.CTRLA = sleepStackLoc & 0x01; // Set to IDLE if sleep was enabled
    }
    sleepStack = sleepStackLoc;
  #else
    sleepStack = SLPCTRL.CTRLA;           // save old sleep State
    322a:	e8 81       	ld	r30, Y
    322c:	f9 81       	ldd	r31, Y+1	; 0x01
    322e:	82 87       	std	Z+10, r24	; 0x0a
__vector_24():
    3230:	ff 91       	pop	r31
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:673
    SLPCTRL.CTRLA = sleepStack & 0x01;    // only leave the SEN bit, if it was set
    3232:	ef 91       	pop	r30
    3234:	df 91       	pop	r29
    3236:	cf 91       	pop	r28
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:639
          action = TWI_ACKACT_bm | TWI_SCMD_COMPTRANS_gc;  // "Execute ACK Action succeeded by waiting for any Start (S/Sr) condition"
        }
      }
    }
  }
  _data->_module->SCTRLB = action;  // using local variable (register) reduces the amount of loading _module
    3238:	bf 91       	pop	r27
    323a:	af 91       	pop	r26
    323c:	9f 91       	pop	r25
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/Wire.cpp:979
  TwoWire::onSlaveIRQ(&TWI0);
}
    323e:	8f 91       	pop	r24
    3240:	7f 91       	pop	r23
    3242:	6f 91       	pop	r22
    3244:	5f 91       	pop	r21
    3246:	4f 91       	pop	r20
    3248:	3f 91       	pop	r19
    324a:	2f 91       	pop	r18
    324c:	1f 91       	pop	r17
    324e:	0f 90       	pop	r0
    3250:	0f be       	out	0x3f, r0	; 63
    3252:	0f 90       	pop	r0
    3254:	1f 90       	pop	r1
    3256:	18 95       	reti
TWI_HandleSlaveIRQ():
    3258:	1c 83       	std	Y+4, r17	; 0x04
    325a:	1e 82       	std	Y+6, r1	; 0x06
    325c:	1f 82       	std	Y+7, r1	; 0x07
    325e:	dd cf       	rjmp	.-70     	; 0x321a <__vector_24+0x72>
__vector_24():
    3260:	86 e0       	ldi	r24, 0x06	; 6
    3262:	dc cf       	rjmp	.-72     	; 0x321c <__vector_24+0x74>
popSleep():
    3264:	80 91 78 38 	lds	r24, 0x3878	; 0x803878 <sleepStack>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:591
          action = TWI_SCMD_RESPONSE_gc;        // "Execute Acknowledge Action succeeded by reception of next byte"
        }
      } else {                          // Master is writing
        action = TWI_SCMD_RESPONSE_gc;  // "Execute Acknowledge Action succeeded by reception of next byte"
        (*address) = payload;           // saving address to expose to the user sketch
        (*rxHead) = 0;                  // reset buffer positions so the Master can start writing at zero.
    3268:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <u8g2_cb_r0+0x7f36bd>
TWI_HandleSlaveIRQ():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:592
        (*rxTail) = 0;
    326c:	eb 85       	ldd	r30, Y+11	; 0x0b
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:584

        if (_data->user_onRequest != NULL) {
          _data->user_onRequest();
        }
        if ((*txHead) == 0) {                   // If no data to transmit, send NACK
          action = TWI_ACKACT_bm | TWI_SCMD_COMPTRANS_gc;  // NACK + "Wait for any Start (S/Sr) condition"
    326e:	fc 85       	ldd	r31, Y+12	; 0x0c
    3270:	30 97       	sbiw	r30, 0x00	; 0
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:690
        sleepStackLoc = 0;              // reset everything
      }
      sleepStack = sleepStackLoc;
    }
  #else
    SLPCTRL.CTRLA = sleepStack;
    3272:	29 f0       	breq	.+10     	; 0x327e <__vector_24+0xd6>
    3274:	8e 81       	ldd	r24, Y+6	; 0x06
    3276:	88 23       	and	r24, r24
    3278:	11 f0       	breq	.+4      	; 0x327e <__vector_24+0xd6>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:597
        (*rxTail) = 0;
      }
      pushSleep();
    } else {                            // Stop bit set
      popSleep();
      if (_data->user_onReceive != NULL) {
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	09 95       	icall
    327e:	1e 82       	std	Y+6, r1	; 0x06
    3280:	1d 82       	std	Y+5, r1	; 0x05
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:598
        if ((*rxHead) > 0) {
    3282:	1f 82       	std	Y+7, r1	; 0x07
    3284:	18 86       	std	Y+8, r1	; 0x08
__vector_24():
    3286:	82 e0       	ldi	r24, 0x02	; 2
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:599
          _data->user_onReceive((*rxHead));
    3288:	d0 cf       	rjmp	.-96     	; 0x322a <__vector_24+0x82>
TWI_HandleSlaveIRQ():
    328a:	87 ff       	sbrs	r24, 7
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:603
        }
      }
      action = TWI_SCMD_COMPTRANS_gc;  // "Wait for any Start (S/Sr) condition"
      (*rxHead) = 0;
    328c:	2f c0       	rjmp	.+94     	; 0x32ec <__vector_24+0x144>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:604
      (*txHead) = 0;
    328e:	81 ff       	sbrs	r24, 1
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:605
      (*rxTail) = 0;
    3290:	1e c0       	rjmp	.+60     	; 0x32ce <__vector_24+0x126>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:606
      (*txTail) = 0;
    3292:	88 71       	andi	r24, 0x18	; 24
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:623
        if ((*txTail) < (*txHead)) {            // Data is available
          _data->_module->SDATA = txBuffer[(*txTail)];  // Writing to the register to send data
          (*txTail)++;                            // Increment counter for sent bytes
          action = TWI_SCMD_RESPONSE_gc;          // "Execute a byte read operation followed by Acknowledge Action"
        } else {                                // No more data available
          action = TWI_SCMD_COMPTRANS_gc;         // "Wait for any Start (S/Sr) condition"
    3294:	39 f0       	breq	.+14     	; 0x32a4 <__vector_24+0xfc>
    3296:	8a 81       	ldd	r24, Y+2	; 0x02
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:608
      (*rxHead) = 0;
      (*txHead) = 0;
      (*rxTail) = 0;
      (*txTail) = 0;
    }
  } else if (clientStatus & TWI_DIF_bm) { // Data bit set
    3298:	83 ff       	sbrs	r24, 3
    329a:	04 c0       	rjmp	.+8      	; 0x32a4 <__vector_24+0xfc>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:609
    if (clientStatus & TWI_DIR_bm) {        // Master is reading
    329c:	1d 82       	std	Y+5, r1	; 0x05
    329e:	87 7f       	andi	r24, 0xF7	; 247
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:610
      if ((clientStatus & (TWI_COLL_bm | TWI_RXACK_bm)) &&  // If a collision was detected, or RXACK bit is set AND
    32a0:	8a 83       	std	Y+2, r24	; 0x02
    32a2:	f1 cf       	rjmp	.-30     	; 0x3286 <__vector_24+0xde>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:611
          (true == _data->_bools._ackMatters)) {            // And we have to check for it
    32a4:	8b 81       	ldd	r24, Y+3	; 0x03
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:610
      (*rxTail) = 0;
      (*txTail) = 0;
    }
  } else if (clientStatus & TWI_DIF_bm) { // Data bit set
    if (clientStatus & TWI_DIR_bm) {        // Master is reading
      if ((clientStatus & (TWI_COLL_bm | TWI_RXACK_bm)) &&  // If a collision was detected, or RXACK bit is set AND
    32a6:	8f 5f       	subi	r24, 0xFF	; 255
    32a8:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:612
          (true == _data->_bools._ackMatters)) {            // And we have to check for it
        (*txHead) = 0;                          // Abort further data writes
    32aa:	8a 81       	ldd	r24, Y+2	; 0x02
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:613
        _data->_bools._ackMatters = false;      // stop checking for NACK
    32ac:	88 60       	ori	r24, 0x08	; 8
    32ae:	8a 83       	std	Y+2, r24	; 0x02
    32b0:	a8 85       	ldd	r26, Y+8	; 0x08
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:616
        action = TWI_SCMD_COMPTRANS_gc;         // "Wait for any Start (S/Sr) condition"
      } else {                                // RXACK bit not set, no COLL
        _data->_bytesTransmittedS++;            // increment bytes transmitted counter (for register model)
    32b2:	8d 81       	ldd	r24, Y+5	; 0x05
    32b4:	a8 17       	cp	r26, r24
    32b6:	38 f7       	brcc	.-50     	; 0x3286 <__vector_24+0xde>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:617
        _data->_bools._ackMatters = true;       // start checking for NACK
    32b8:	ac 0f       	add	r26, r28
    32ba:	bd 2f       	mov	r27, r29
    32bc:	b1 1d       	adc	r27, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:618
        if ((*txTail) < (*txHead)) {            // Data is available
    32be:	1d 96       	adiw	r26, 0x0d	; 13
    32c0:	8c 91       	ld	r24, X
    32c2:	85 87       	std	Z+13, r24	; 0x0d
    32c4:	88 85       	ldd	r24, Y+8	; 0x08
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:619
          _data->_module->SDATA = txBuffer[(*txTail)];  // Writing to the register to send data
    32c6:	8f 5f       	subi	r24, 0xFF	; 255
    32c8:	88 87       	std	Y+8, r24	; 0x08
__vector_24():
    32ca:	83 e0       	ldi	r24, 0x03	; 3
    32cc:	ae cf       	rjmp	.-164    	; 0x322a <__vector_24+0x82>
TWI_HandleSlaveIRQ():
    32ce:	85 85       	ldd	r24, Z+13	; 0x0d
    32d0:	ee 81       	ldd	r30, Y+6	; 0x06
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:620
          (*txTail)++;                            // Increment counter for sent bytes
    32d2:	e0 32       	cpi	r30, 0x20	; 32
    32d4:	58 f4       	brcc	.+22     	; 0x32ec <__vector_24+0x144>
    32d6:	ec 0f       	add	r30, r28
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:632
      uint8_t payload = _data->_module->SDATA;      // reading SDATA will clear the DATA IRQ flag
      if ((*rxHead) < BUFFER_LENGTH) {              // make sure that we don't have a buffer overflow in case Master ignores NACK
        rxBuffer[(*rxHead)] = payload;              // save data
        (*rxHead)++;                                  // Advance Head
        if ((*rxHead) < BUFFER_LENGTH) {              // if buffer is not yet full
          action = TWI_SCMD_RESPONSE_gc;                // "Execute Acknowledge Action succeeded by reception of next byte"
    32d8:	fd 2f       	mov	r31, r29
    32da:	f1 1d       	adc	r31, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:627
        } else {                                // No more data available
          action = TWI_SCMD_COMPTRANS_gc;         // "Wait for any Start (S/Sr) condition"
        }
      }
    } else {                                  // Master is writing
      uint8_t payload = _data->_module->SDATA;      // reading SDATA will clear the DATA IRQ flag
    32dc:	85 a7       	std	Z+45, r24	; 0x2d
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:628
      if ((*rxHead) < BUFFER_LENGTH) {              // make sure that we don't have a buffer overflow in case Master ignores NACK
    32de:	8e 81       	ldd	r24, Y+6	; 0x06
    32e0:	8f 5f       	subi	r24, 0xFF	; 255
    32e2:	8e 83       	std	Y+6, r24	; 0x06
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:629
        rxBuffer[(*rxHead)] = payload;              // save data
    32e4:	80 32       	cpi	r24, 0x20	; 32
    32e6:	88 f3       	brcs	.-30     	; 0x32ca <__vector_24+0x122>
__vector_24():
    32e8:	86 e0       	ldi	r24, 0x06	; 6
    32ea:	9f cf       	rjmp	.-194    	; 0x322a <__vector_24+0x82>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:630
        (*rxHead)++;                                  // Advance Head
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	9d cf       	rjmp	.-198    	; 0x322a <__vector_24+0x82>

000032f0 <global constructors keyed to 65535_0_MLA30_ping.ino.cpp.o.20536>:
_GLOBAL__I_65535_0_MLA30_ping.ino.cpp.o.20536():
    32f0:	cf 93       	push	r28
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:631
        if ((*rxHead) < BUFFER_LENGTH) {              // if buffer is not yet full
    32f2:	10 92 9d 38 	sts	0x389D, r1	; 0x80389d <Wire+0x2>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:634
          action = TWI_SCMD_RESPONSE_gc;                // "Execute Acknowledge Action succeeded by reception of next byte"
        } else {                                      // else buffer would overflow with next byte
          action = TWI_ACKACT_bm | TWI_SCMD_COMPTRANS_gc;  // "Execute ACK Action succeeded by waiting for any Start (S/Sr) condition"
    32f6:	10 92 9e 38 	sts	0x389E, r1	; 0x80389e <Wire+0x3>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\libraries\Wire\src/twi.c:563

  #if defined(TWI_MANDS)
    _data->_bools._toggleStreamFn = 0x01;
  #endif

  uint8_t action = 0;
    32fa:	88 ee       	ldi	r24, 0xE8	; 232
    32fc:	93 e0       	ldi	r25, 0x03	; 3
    32fe:	a0 e0       	ldi	r26, 0x00	; 0
    3300:	b0 e0       	ldi	r27, 0x00	; 0
    3302:	80 93 9f 38 	sts	0x389F, r24	; 0x80389f <Wire+0x4>
    3306:	90 93 a0 38 	sts	0x38A0, r25	; 0x8038a0 <Wire+0x5>
    330a:	a0 93 a1 38 	sts	0x38A1, r26	; 0x8038a1 <Wire+0x6>
    330e:	b0 93 a2 38 	sts	0x38A2, r27	; 0x8038a2 <Wire+0x7>
    3312:	89 e5       	ldi	r24, 0x59	; 89
    3314:	99 ec       	ldi	r25, 0xC9	; 201
    3316:	80 93 9b 38 	sts	0x389B, r24	; 0x80389b <Wire>
    331a:	90 93 9c 38 	sts	0x389C, r25	; 0x80389c <Wire+0x1>
    331e:	80 e1       	ldi	r24, 0x10	; 16
    3320:	98 e0       	ldi	r25, 0x08	; 8
    3322:	80 93 a3 38 	sts	0x38A3, r24	; 0x8038a3 <Wire+0x8>
    3326:	90 93 a4 38 	sts	0x38A4, r25	; 0x8038a4 <Wire+0x9>
    332a:	84 e0       	ldi	r24, 0x04	; 4
    332c:	80 93 fc 38 	sts	0x38FC, r24	; 0x8038fc <DEFAULT_SPI_SETTINGS+0x1>
    3330:	91 e3       	ldi	r25, 0x31	; 49
    3332:	90 93 fb 38 	sts	0x38FB, r25	; 0x8038fb <DEFAULT_SPI_SETTINGS>
    3336:	20 e2       	ldi	r18, 0x20	; 32
    3338:	38 e0       	ldi	r19, 0x08	; 8
    333a:	20 93 f0 38 	sts	0x38F0, r18	; 0x8038f0 <SPI>
    333e:	30 93 f1 38 	sts	0x38F1, r19	; 0x8038f1 <SPI+0x1>
    3342:	10 92 f7 38 	sts	0x38F7, r1	; 0x8038f7 <SPI+0x7>
    3346:	2b e6       	ldi	r18, 0x6B	; 107
    3348:	39 ec       	ldi	r19, 0xC9	; 201
    334a:	20 93 fd 38 	sts	0x38FD, r18	; 0x8038fd <RLhelper>
    334e:	30 93 fe 38 	sts	0x38FE, r19	; 0x8038fe <RLhelper+0x1>
    3352:	90 93 04 39 	sts	0x3904, r25	; 0x803904 <RLhelper+0x7>
    3356:	80 93 05 39 	sts	0x3905, r24	; 0x803905 <RLhelper+0x8>
    335a:	10 92 06 39 	sts	0x3906, r1	; 0x803906 <RLhelper+0x9>
    335e:	10 92 07 39 	sts	0x3907, r1	; 0x803907 <RLhelper+0xa>
    3362:	83 e0       	ldi	r24, 0x03	; 3
    3364:	80 93 0a 39 	sts	0x390A, r24	; 0x80390a <RLhelper+0xd>
    3368:	82 e0       	ldi	r24, 0x02	; 2
    336a:	80 93 03 39 	sts	0x3903, r24	; 0x803903 <RLhelper+0x6>
    336e:	80 ef       	ldi	r24, 0xF0	; 240
    3370:	98 e3       	ldi	r25, 0x38	; 56
    3372:	80 93 08 39 	sts	0x3908, r24	; 0x803908 <RLhelper+0xb>
    3376:	90 93 09 39 	sts	0x3909, r25	; 0x803909 <RLhelper+0xc>
    337a:	10 92 0b 39 	sts	0x390B, r1	; 0x80390b <RLhelper+0xe>
    337e:	10 92 0c 39 	sts	0x390C, r1	; 0x80390c <RLhelper+0xf>
    3382:	10 92 0d 39 	sts	0x390D, r1	; 0x80390d <RLhelper+0x10>
    3386:	10 92 0e 39 	sts	0x390E, r1	; 0x80390e <RLhelper+0x11>
    338a:	10 92 a5 3d 	sts	0x3DA5, r1	; 0x803da5 <RLcomm>
    338e:	10 92 11 3d 	sts	0x3D11, r1	; 0x803d11 <u8g2+0x2>
    3392:	10 92 12 3d 	sts	0x3D12, r1	; 0x803d12 <u8g2+0x3>
    3396:	8a e3       	ldi	r24, 0x3A	; 58
    3398:	96 e0       	ldi	r25, 0x06	; 6
    339a:	80 93 9f 3d 	sts	0x3D9F, r24	; 0x803d9f <u8g2+0x90>
    339e:	90 93 a0 3d 	sts	0x3DA0, r25	; 0x803da0 <u8g2+0x91>
    33a2:	10 92 a1 3d 	sts	0x3DA1, r1	; 0x803da1 <u8g2+0x92>
    33a6:	10 92 a2 3d 	sts	0x3DA2, r1	; 0x803da2 <u8g2+0x93>
    33aa:	10 92 a3 3d 	sts	0x3DA3, r1	; 0x803da3 <u8g2+0x94>
    33ae:	10 92 a4 3d 	sts	0x3DA4, r1	; 0x803da4 <u8g2+0x95>
    33b2:	10 92 2b 3d 	sts	0x3D2B, r1	; 0x803d2b <u8g2+0x1c>
    33b6:	8b e8       	ldi	r24, 0x8B	; 139
    33b8:	99 ec       	ldi	r25, 0xC9	; 201
    33ba:	80 93 0f 3d 	sts	0x3D0F, r24	; 0x803d0f <u8g2>
    33be:	90 93 10 3d 	sts	0x3D10, r25	; 0x803d10 <u8g2+0x1>
    33c2:	10 92 13 3d 	sts	0x3D13, r1	; 0x803d13 <u8g2+0x4>
    33c6:	10 92 14 3d 	sts	0x3D14, r1	; 0x803d14 <u8g2+0x5>
    33ca:	10 92 28 3d 	sts	0x3D28, r1	; 0x803d28 <u8g2+0x19>
    33ce:	10 92 1f 3d 	sts	0x3D1F, r1	; 0x803d1f <u8g2+0x10>
    33d2:	10 92 20 3d 	sts	0x3D20, r1	; 0x803d20 <u8g2+0x11>
    33d6:	10 92 21 3d 	sts	0x3D21, r1	; 0x803d21 <u8g2+0x12>
    33da:	10 92 22 3d 	sts	0x3D22, r1	; 0x803d22 <u8g2+0x13>
    33de:	8f ef       	ldi	r24, 0xFF	; 255
    33e0:	80 93 29 3d 	sts	0x3D29, r24	; 0x803d29 <u8g2+0x1a>
    33e4:	80 93 2d 3d 	sts	0x3D2D, r24	; 0x803d2d <u8g2+0x1e>
    33e8:	e1 e3       	ldi	r30, 0x31	; 49
    33ea:	fd e3       	ldi	r31, 0x3D	; 61
    33ec:	cf ef       	ldi	r28, 0xFF	; 255
    33ee:	c1 93       	st	Z+, r28
    33f0:	8d e3       	ldi	r24, 0x3D	; 61
    33f2:	e7 34       	cpi	r30, 0x47	; 71
    33f4:	f8 07       	cpc	r31, r24
    33f6:	d9 f7       	brne	.-10     	; 0x33ee <global constructors keyed to 65535_0_MLA30_ping.ino.cpp.o.20536+0xfe>
    33f8:	89 ef       	ldi	r24, 0xF9	; 249
    33fa:	98 e0       	ldi	r25, 0x08	; 8
    33fc:	80 93 17 3d 	sts	0x3D17, r24	; 0x803d17 <u8g2+0x8>
    3400:	90 93 18 3d 	sts	0x3D18, r25	; 0x803d18 <u8g2+0x9>
    3404:	87 ed       	ldi	r24, 0xD7	; 215
    3406:	99 e0       	ldi	r25, 0x09	; 9
    3408:	80 93 19 3d 	sts	0x3D19, r24	; 0x803d19 <u8g2+0xa>
    340c:	90 93 1a 3d 	sts	0x3D1A, r25	; 0x803d1a <u8g2+0xb>
    3410:	8c e7       	ldi	r24, 0x7C	; 124
    3412:	95 e1       	ldi	r25, 0x15	; 21
    3414:	80 93 1b 3d 	sts	0x3D1B, r24	; 0x803d1b <u8g2+0xc>
    3418:	90 93 1c 3d 	sts	0x3D1C, r25	; 0x803d1c <u8g2+0xd>
    341c:	80 ef       	ldi	r24, 0xF0	; 240
    341e:	95 e1       	ldi	r25, 0x15	; 21
    3420:	80 93 1d 3d 	sts	0x3D1D, r24	; 0x803d1d <u8g2+0xe>
    3424:	90 93 1e 3d 	sts	0x3D1E, r25	; 0x803d1e <u8g2+0xf>
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	20 e0       	ldi	r18, 0x00	; 0
    342c:	40 e0       	ldi	r20, 0x00	; 0
    342e:	69 e0       	ldi	r22, 0x09	; 9
    3430:	83 e1       	ldi	r24, 0x13	; 19
    3432:	9d e3       	ldi	r25, 0x3D	; 61
    3434:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <u8x8_d_ssd1306_128x64_noname>
    3438:	10 92 6d 3d 	sts	0x3D6D, r1	; 0x803d6d <u8g2+0x5e>
    343c:	10 92 6e 3d 	sts	0x3D6E, r1	; 0x803d6e <u8g2+0x5f>
    3440:	84 e4       	ldi	r24, 0x44	; 68
    3442:	96 e0       	ldi	r25, 0x06	; 6
    3444:	80 93 47 3d 	sts	0x3D47, r24	; 0x803d47 <u8g2+0x38>
    3448:	90 93 48 3d 	sts	0x3D48, r25	; 0x803d48 <u8g2+0x39>
    344c:	8f e0       	ldi	r24, 0x0F	; 15
    344e:	99 e3       	ldi	r25, 0x39	; 57
    3450:	80 93 4b 3d 	sts	0x3D4B, r24	; 0x803d4b <u8g2+0x3c>
    3454:	90 93 4c 3d 	sts	0x3D4C, r25	; 0x803d4c <u8g2+0x3d>
    3458:	88 e0       	ldi	r24, 0x08	; 8
    345a:	80 93 4d 3d 	sts	0x3D4D, r24	; 0x803d4d <u8g2+0x3e>
    345e:	10 92 4e 3d 	sts	0x3D4E, r1	; 0x803d4e <u8g2+0x3f>
    3462:	10 92 7c 3d 	sts	0x3D7C, r1	; 0x803d7c <u8g2+0x6d>
    3466:	10 92 9c 3d 	sts	0x3D9C, r1	; 0x803d9c <u8g2+0x8d>
    346a:	10 92 98 3d 	sts	0x3D98, r1	; 0x803d98 <u8g2+0x89>
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	80 93 9d 3d 	sts	0x3D9D, r24	; 0x803d9d <u8g2+0x8e>
    3474:	80 93 9e 3d 	sts	0x3D9E, r24	; 0x803d9e <u8g2+0x8f>
    3478:	83 e9       	ldi	r24, 0x93	; 147
    347a:	99 ec       	ldi	r25, 0xC9	; 201
    347c:	80 93 49 3d 	sts	0x3D49, r24	; 0x803d49 <u8g2+0x3a>
    3480:	90 93 4a 3d 	sts	0x3D4A, r25	; 0x803d4a <u8g2+0x3b>
    3484:	83 e1       	ldi	r24, 0x13	; 19
    3486:	9d e3       	ldi	r25, 0x3D	; 61
    3488:	0e 94 48 0a 	call	0x1490	; 0x1490 <u8g2_update_dimension_r0>
    348c:	10 92 65 3d 	sts	0x3D65, r1	; 0x803d65 <u8g2+0x56>
    3490:	10 92 66 3d 	sts	0x3D66, r1	; 0x803d66 <u8g2+0x57>
    3494:	10 92 69 3d 	sts	0x3D69, r1	; 0x803d69 <u8g2+0x5a>
    3498:	10 92 6a 3d 	sts	0x3D6A, r1	; 0x803d6a <u8g2+0x5b>
    349c:	8f ef       	ldi	r24, 0xFF	; 255
    349e:	9f ef       	ldi	r25, 0xFF	; 255
    34a0:	80 93 67 3d 	sts	0x3D67, r24	; 0x803d67 <u8g2+0x58>
    34a4:	90 93 68 3d 	sts	0x3D68, r25	; 0x803d68 <u8g2+0x59>
    34a8:	80 93 6b 3d 	sts	0x3D6B, r24	; 0x803d6b <u8g2+0x5c>
    34ac:	90 93 6c 3d 	sts	0x3D6C, r25	; 0x803d6c <u8g2+0x5d>
    34b0:	e0 91 49 3d 	lds	r30, 0x3D49	; 0x803d49 <u8g2+0x3a>
    34b4:	f0 91 4a 3d 	lds	r31, 0x3D4A	; 0x803d4a <u8g2+0x3b>
    34b8:	02 80       	ldd	r0, Z+2	; 0x02
    34ba:	f3 81       	ldd	r31, Z+3	; 0x03
    34bc:	e0 2d       	mov	r30, r0
    34be:	83 e1       	ldi	r24, 0x13	; 19
    34c0:	9d e3       	ldi	r25, 0x3D	; 61
    34c2:	09 95       	icall
    34c4:	83 eb       	ldi	r24, 0xB3	; 179
    34c6:	96 e0       	ldi	r25, 0x06	; 6
    34c8:	80 93 6f 3d 	sts	0x3D6F, r24	; 0x803d6f <u8g2+0x60>
    34cc:	90 93 70 3d 	sts	0x3D70, r25	; 0x803d70 <u8g2+0x61>
    34d0:	10 92 7f 3d 	sts	0x3D7F, r1	; 0x803d7f <u8g2+0x70>
    34d4:	c0 93 3c 3d 	sts	0x3D3C, r28	; 0x803d3c <u8g2+0x2d>
    34d8:	c0 93 3d 3d 	sts	0x3D3D, r28	; 0x803d3d <u8g2+0x2e>
    34dc:	c0 93 3e 3d 	sts	0x3D3E, r28	; 0x803d3e <u8g2+0x2f>
    34e0:	cf 91       	pop	r28
    34e2:	08 95       	ret

000034e4 <main>:
main():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/main.cpp:49
 * called first in non-optiboot configurations (neither is needed on Optibooot configurations() *
 * an extra bit of initialization code in .init3 to fix the vectors and still happen if user    *
 * overrides main. In the past there was a USB-related function here, that is removed, as work  *
 * will be needed in any event at the core level if VUSB-based "stuff" arrives, but really I'm  *
 * just waiting for the DU-series now                                                           */
int main() {
    34e4:	cf 93       	push	r28
    34e6:	df 93       	push	r29
    34e8:	cd b7       	in	r28, 0x3d	; 61
    34ea:	de b7       	in	r29, 0x3e	; 62
    34ec:	65 97       	sbiw	r28, 0x15	; 21
    34ee:	cd bf       	out	0x3d, r28	; 61
    34f0:	de bf       	out	0x3e, r29	; 62
init_clock():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:1557
      #elif (F_CPU == 2000000) // 16MHz prescaled by 8
        /* Clock DIV8 */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_8X_gc));
      #elif (F_CPU == 1000000) // 16MHz prescaled by 16
        /* Clock DIV16 */
        _PROTECTED_WRITE(CLKCTRL_MCLKCTRLB, (CLKCTRL_PEN_bm | CLKCTRL_PDIV_16X_gc));
    34f2:	97 e0       	ldi	r25, 0x07	; 7
    34f4:	88 ed       	ldi	r24, 0xD8	; 216
    34f6:	84 bf       	out	0x34, r24	; 52
    34f8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <u8g2_cb_r0+0x7f36ce>
init_ADC0():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:1651


/********************************* ADC ****************************************/
void __attribute__((weak)) init_ADC0() {
  ADC_t* pADC;
  _fastPtr_d(pADC, &ADC0);
    34fc:	e0 e0       	ldi	r30, 0x00	; 0
    34fe:	f6 e0       	ldi	r31, 0x06	; 6
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:1678
    #elif F_CPU  >=  6000000    //  8 MHz /  8 = 1.0 MHz,  10 MHz /  8 = 1.25 MHz
      pADC->CTRLC  =  ADC_PRESC_DIV8_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #elif F_CPU  >=  3000000    //  4 MHz /  4 = 1.0 MHz,   5 MHz /  4 = 1.25 MHz
      pADC->CTRLC  =  ADC_PRESC_DIV4_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    #else                       //  1 MHz /  2 = 500 kHz - the lowest setting
      pADC->CTRLC  =  ADC_PRESC_DIV2_gc | ADC_REFSEL_VDDREF_gc | ADC_SAMPCAP_bm;
    3500:	80 e5       	ldi	r24, 0x50	; 80
    3502:	82 83       	std	Z+2, r24	; 0x02
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:1685
    #if   (F_CPU == 6000000 || F_CPU == 12000000 || F_CPU == 24000000 || F_CPU ==25000000)
      pADC->SAMPCTRL = (7); // 9 ADC clocks, 12 us
    #elif (F_CPU == 5000000 || F_CPU == 10000000 || F_CPU == 20000000)
      pADC->SAMPCTRL = (13);   // 15 ADC clock,s 12 us
    #else
      pADC->SAMPCTRL = (10); // 12 ADC clocks, 12 us
    3504:	8a e0       	ldi	r24, 0x0A	; 10
    3506:	85 83       	std	Z+5, r24	; 0x05
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:1687
    #endif
    pADC->CTRLD    = ADC_INITDLY_DLY16_gc;
    3508:	80 e2       	ldi	r24, 0x20	; 32
    350a:	83 83       	std	Z+3, r24	; 0x03
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:1688
    pADC->CTRLA    = ADC_ENABLE_bm;
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	80 83       	st	Z, r24
init_TCA0():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:1778

void __attribute__((weak)) init_TCA0() {
  /*  TYPE A TIMER   */
  #if !defined(TCA_BUFFERED_3PIN)
    #if defined(PORTMUX_CTRLC)
      PORTMUX.CTRLC = TCA_PORTMUX;
    3510:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <u8g2_cb_r0+0x7f386f>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:1782
    #else
      PORTMUX.TCAROUTEA = TCA_PORTMUX;
    #endif
    TCA0.SPLIT.CTRLD   = TCA_SPLIT_SPLITM_bm;
    3514:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <u8g2_cb_r0+0x7f4070>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:1783
    TCA0.SPLIT.LPER    = PWM_TIMER_PERIOD;
    3518:	2e ef       	ldi	r18, 0xFE	; 254
    351a:	20 93 26 0a 	sts	0x0A26, r18	; 0x800a26 <u8g2_cb_r0+0x7f4093>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:1784
    TCA0.SPLIT.HPER    = PWM_TIMER_PERIOD;
    351e:	20 93 27 0a 	sts	0x0A27, r18	; 0x800a27 <u8g2_cb_r0+0x7f4094>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:1785
    TCA0.SPLIT.CTRLA   = (TIMERA_PRESCALER_bm | TCA_SPLIT_ENABLE_bm);
    3522:	90 93 00 0a 	sts	0x0A00, r25	; 0x800a00 <u8g2_cb_r0+0x7f406d>
init_millis():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:1427
      #endif
    #elif defined(MILLIS_USE_TIMERA1)
      TCA1.SPLIT.INTCTRL |= TCA_SPLIT_HUNF_bm;
    #elif defined(MILLIS_USE_TIMERD0)
      TCD_t* pTCD;
      _fastPtr_d(pTCD, &TCD0);
    3526:	e0 e8       	ldi	r30, 0x80	; 128
    3528:	fa e0       	ldi	r31, 0x0A	; 10
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:1428
      pTCD->CMPBCLR        = TIME_TRACKING_TIMER_PERIOD; // essentially, this is TOP
    352a:	2d ef       	ldi	r18, 0xFD	; 253
    352c:	31 e0       	ldi	r19, 0x01	; 1
    352e:	26 a7       	std	Z+46, r18	; 0x2e
    3530:	37 a7       	std	Z+47, r19	; 0x2f
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:1429
      pTCD->CTRLB          = 0x00; // oneramp mode
    3532:	11 82       	std	Z+1, r1	; 0x01
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:1430
      pTCD->CTRLC          = 0x80;
    3534:	90 e8       	ldi	r25, 0x80	; 128
    3536:	92 83       	std	Z+2, r25	; 0x02
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:1431
      pTCD->INTCTRL        = 0x01; // enable interrupt
    3538:	84 87       	std	Z+12, r24	; 0x0c
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:1432
      pTCD->CTRLA          = TIMERD0_PRESCALER | 0x01; // set clock source and enable!
    353a:	83 e1       	ldi	r24, 0x13	; 19
    353c:	80 83       	st	Z, r24
init():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:1517
    init_millis();
  #endif
  /*************************** ENABLE GLOBAL INTERRUPTS *************************/
  // Finally, after everything is initialized, we go ahead and enable interrupts.
  if (onAfterInit()) {
    sei();
    353e:	78 94       	sei
setup():
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:82

// initial setup
void setup()
{
  // secondary V33 active
  pinMode(PIN_VCMD, OUTPUT);
    3540:	61 e0       	ldi	r22, 0x01	; 1
    3542:	8a e0       	ldi	r24, 0x0A	; 10
    3544:	60 d9       	rcall	.-3392   	; 0x2806 <pinMode>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:83
  digitalWrite(PIN_VCMD, DRVON);
    3546:	61 e0       	ldi	r22, 0x01	; 1
    3548:	8a e0       	ldi	r24, 0x0A	; 10
    354a:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <digitalWrite>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:84
  delay(50);
    354e:	62 e3       	ldi	r22, 0x32	; 50
    3550:	70 e0       	ldi	r23, 0x00	; 0
    3552:	80 e0       	ldi	r24, 0x00	; 0
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	0e 94 b2 07 	call	0xf64	; 0xf64 <delay>
u8x8_InitDisplay():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:137
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
    355a:	e0 91 17 3d 	lds	r30, 0x3D17	; 0x803d17 <u8g2+0x8>
    355e:	f0 91 18 3d 	lds	r31, 0x3D18	; 0x803d18 <u8g2+0x9>
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	40 e0       	ldi	r20, 0x00	; 0
    3568:	6a e0       	ldi	r22, 0x0A	; 10
    356a:	83 e1       	ldi	r24, 0x13	; 19
    356c:	9d e3       	ldi	r25, 0x3D	; 61
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:127
    /* initInterface is part if initDisplay, do not call both use either initDisplay OR initInterface */       
    void initInterface(void) {          
      u8g2_InitInterface(&u8g2); }
      
    void clearDisplay(void) {
      u8g2_ClearDisplay(&u8g2); }
    356e:	09 95       	icall
_ZN4U8G212clearDisplayEv():
    3570:	cd dc       	rcall	.-1638   	; 0x2f0c <u8g2_ClearDisplay.constprop.64>
u8x8_SetPowerSave():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_display.c:143
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
    3572:	e0 91 17 3d 	lds	r30, 0x3D17	; 0x803d17 <u8g2+0x8>
    3576:	f0 91 18 3d 	lds	r31, 0x3D18	; 0x803d18 <u8g2+0x9>
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	20 e0       	ldi	r18, 0x00	; 0
    357e:	40 e0       	ldi	r20, 0x00	; 0
    3580:	6b e0       	ldi	r22, 0x0B	; 11
    3582:	83 e1       	ldi	r24, 0x13	; 19
    3584:	9d e3       	ldi	r25, 0x3D	; 61
    3586:	09 95       	icall
_ZN4U8G211clearBufferEv():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:188
    u8g2_uint_t getDisplayWidth(void) { return u8g2_GetDisplayWidth(&u8g2); }

    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    3588:	83 e1       	ldi	r24, 0x13	; 19
    358a:	9d e3       	ldi	r25, 0x3D	; 61
    358c:	70 dc       	rcall	.-1824   	; 0x2e6e <u8g2_ClearBuffer>
_ZN6String4initEv():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:122
/*********************************************/
/*  Memory Management                        */
/*********************************************/

inline void String::init(void) {
  buffer = NULL;
    358e:	19 82       	std	Y+1, r1	; 0x01
    3590:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:123
  capacity = 0;
    3592:	1b 82       	std	Y+3, r1	; 0x03
    3594:	1c 82       	std	Y+4, r1	; 0x04
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:124
  len = 0;
    3596:	1d 82       	std	Y+5, r1	; 0x05
    3598:	1e 82       	std	Y+6, r1	; 0x06
copy():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:163
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String &String::copy(const char *cstr, unsigned int length) {
  if (!reserve(length)) {
    359a:	70 e0       	ldi	r23, 0x00	; 0
    359c:	60 e0       	ldi	r22, 0x00	; 0
    359e:	ce 01       	movw	r24, r28
    35a0:	01 96       	adiw	r24, 0x01	; 1
    35a2:	08 dc       	rcall	.-2032   	; 0x2db4 <String::reserve(unsigned int)>
    35a4:	29 81       	ldd	r18, Y+1	; 0x01
    35a6:	3a 81       	ldd	r19, Y+2	; 0x02
    35a8:	81 11       	cpse	r24, r1
    35aa:	3d c1       	rjmp	.+634    	; 0x3826 <main+0x342>
invalidate():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:128
  capacity = 0;
  len = 0;
}

void String::invalidate(void) {
  if (buffer) {
    35ac:	21 15       	cp	r18, r1
    35ae:	31 05       	cpc	r19, r1
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:129
    free(buffer);
    35b0:	11 f0       	breq	.+4      	; 0x35b6 <main+0xd2>
    35b2:	c9 01       	movw	r24, r18
    35b4:	de d6       	rcall	.+3516   	; 0x4372 <free>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:131
  }
  buffer = NULL;
    35b6:	19 82       	std	Y+1, r1	; 0x01
    35b8:	1a 82       	std	Y+2, r1	; 0x02
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:132
  capacity = len = 0;
    35ba:	1d 82       	std	Y+5, r1	; 0x05
    35bc:	1e 82       	std	Y+6, r1	; 0x06
    35be:	1b 82       	std	Y+3, r1	; 0x03
    35c0:	1c 82       	std	Y+4, r1	; 0x04
begin():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:168
  RLhelper.handleDintRise();
}

bool RadioLinkClass::begin(long frequency, void(*callbackR)(uint8_t,rl_packet_t*), void(*callbackT)(), int TxLevel, uint8_t radioDistance)
{
  _onRxDone = callbackR;
    35c2:	84 e8       	ldi	r24, 0x84	; 132
    35c4:	92 e1       	ldi	r25, 0x12	; 18
    35c6:	80 93 7b 38 	sts	0x387B, r24	; 0x80387b <_onRxDone>
    35ca:	90 93 7c 38 	sts	0x387C, r25	; 0x80387c <_onRxDone+0x1>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:169
  _onTxDone = callbackT;
    35ce:	10 92 79 38 	sts	0x3879, r1	; 0x803879 <_onTxDone>
    35d2:	10 92 7a 38 	sts	0x387A, r1	; 0x80387a <_onTxDone+0x1>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:170
  if (RLhelper.begin(frequency))
    35d6:	40 e4       	ldi	r20, 0x40	; 64
    35d8:	5e e0       	ldi	r21, 0x0E	; 14
    35da:	6f ec       	ldi	r22, 0xCF	; 207
    35dc:	79 e1       	ldi	r23, 0x19	; 25
    35de:	8d ef       	ldi	r24, 0xFD	; 253
    35e0:	98 e3       	ldi	r25, 0x38	; 56
    35e2:	ac d9       	rcall	.-3240   	; 0x293c <RLhelper_SX1278::begin(long)>
operator=():
    35e4:	67 ed       	ldi	r22, 0xD7	; 215
    35e6:	79 ec       	ldi	r23, 0xC9	; 201
begin():
    35e8:	89 2b       	or	r24, r25
    35ea:	09 f4       	brne	.+2      	; 0x35ee <main+0x10a>
    35ec:	56 c0       	rjmp	.+172    	; 0x369a <main+0x1b6>
onInternalRxDone():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:464
	return false;
}

void RLhelper_SX1278::onInternalRxDone(void(*callback)(int))
{
	_onInternalRxDone = callback;
    35ee:	8e ef       	ldi	r24, 0xFE	; 254
    35f0:	92 e1       	ldi	r25, 0x12	; 18
    35f2:	80 93 ff 38 	sts	0x38FF, r24	; 0x8038ff <RLhelper+0x2>
    35f6:	90 93 00 39 	sts	0x3900, r25	; 0x803900 <RLhelper+0x3>
    35fa:	8d ef       	ldi	r24, 0xFD	; 253
    35fc:	98 e3       	ldi	r25, 0x38	; 56
    35fe:	28 d9       	rcall	.-3504   	; 0x2850 <RLhelper_SX1278::onInternalRxDone(void (*)(int)) [clone .part.0]>
onInternalTxDone():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:475
	}
}

void RLhelper_SX1278::onInternalTxDone(void(*callback)())
{
	_onInternalTxDone = callback;
    3600:	8b e7       	ldi	r24, 0x7B	; 123
    3602:	93 e1       	ldi	r25, 0x13	; 19
    3604:	80 93 01 39 	sts	0x3901, r24	; 0x803901 <RLhelper+0x4>
    3608:	90 93 02 39 	sts	0x3902, r25	; 0x803902 <RLhelper+0x5>
    360c:	8d ef       	ldi	r24, 0xFD	; 253
    360e:	98 e3       	ldi	r25, 0x38	; 56
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:174
  {
	RLhelper.onInternalRxDone(onRxDone);
	RLhelper.onInternalTxDone(onTxDone);
	RLhelper.setTxPower(TxLevel);
    3610:	1f d9       	rcall	.-3522   	; 0x2850 <RLhelper_SX1278::onInternalRxDone(void (*)(int)) [clone .part.0]>
begin():
    3612:	6e e0       	ldi	r22, 0x0E	; 14
    3614:	70 e0       	ldi	r23, 0x00	; 0
    3616:	8d ef       	ldi	r24, 0xFD	; 253
    3618:	98 e3       	ldi	r25, 0x38	; 56
    361a:	c9 d8       	rcall	.-3694   	; 0x27ae <RLhelper_SX1278::setTxPower(int)>
writeRegister():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:292
	return singleTransfer(address & 0x7f, 0x00);
}

void RLhelper_SX1278::writeRegister(uint8_t address, uint8_t value)
{
	singleTransfer(address | 0x80, value);
    361c:	43 ec       	ldi	r20, 0xC3	; 195
    361e:	61 eb       	ldi	r22, 0xB1	; 177
    3620:	8d ef       	ldi	r24, 0xFD	; 253
    3622:	98 e3       	ldi	r25, 0x38	; 56
    3624:	0e 94 67 11 	call	0x22ce	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
    3628:	4a e0       	ldi	r20, 0x0A	; 10
    362a:	67 eb       	ldi	r22, 0xB7	; 183
    362c:	8d ef       	ldi	r24, 0xFD	; 253
    362e:	98 e3       	ldi	r25, 0x38	; 56
    3630:	0e 94 67 11 	call	0x22ce	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
setSpreadingFactor():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:346
		} else {
		writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
		writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
	}
	
	writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
    3634:	6e e1       	ldi	r22, 0x1E	; 30
    3636:	8d ef       	ldi	r24, 0xFD	; 253
    3638:	98 e3       	ldi	r25, 0x38	; 56
    363a:	0e 94 ad 11 	call	0x235a	; 0x235a <RLhelper_SX1278::readRegister(unsigned char)>
    363e:	8f 70       	andi	r24, 0x0F	; 15
    3640:	48 2f       	mov	r20, r24
    3642:	40 69       	ori	r20, 0x90	; 144
writeRegister():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:292
	return singleTransfer(address & 0x7f, 0x00);
}

void RLhelper_SX1278::writeRegister(uint8_t address, uint8_t value)
{
	singleTransfer(address | 0x80, value);
    3644:	6e e9       	ldi	r22, 0x9E	; 158
    3646:	8d ef       	ldi	r24, 0xFD	; 253
    3648:	98 e3       	ldi	r25, 0x38	; 56
    364a:	0e 94 67 11 	call	0x22ce	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
setSpreadingFactor():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:347
		writeRegister(REG_DETECTION_OPTIMIZE, 0xc3);
		writeRegister(REG_DETECTION_THRESHOLD, 0x0a);
	}
	
	writeRegister(REG_MODEM_CONFIG_2, (readRegister(REG_MODEM_CONFIG_2) & 0x0f) | ((sf << 4) & 0xf0));
	setLdoFlag();
    364e:	0e 94 af 11 	call	0x235e	; 0x235e <RLhelper_SX1278::setLdoFlag() [clone .constprop.31]>
setSignalBandwidth():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:358
		bw = 0;
	}
	if (bw > 9) {
		bw = 9;
	}
	writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
    3652:	6d e1       	ldi	r22, 0x1D	; 29
    3654:	8d ef       	ldi	r24, 0xFD	; 253
    3656:	98 e3       	ldi	r25, 0x38	; 56
    3658:	0e 94 ad 11 	call	0x235a	; 0x235a <RLhelper_SX1278::readRegister(unsigned char)>
    365c:	8f 70       	andi	r24, 0x0F	; 15
    365e:	48 2f       	mov	r20, r24
    3660:	40 67       	ori	r20, 0x70	; 112
writeRegister():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:292
	return singleTransfer(address & 0x7f, 0x00);
}

void RLhelper_SX1278::writeRegister(uint8_t address, uint8_t value)
{
	singleTransfer(address | 0x80, value);
    3662:	6d e9       	ldi	r22, 0x9D	; 157
    3664:	8d ef       	ldi	r24, 0xFD	; 253
    3666:	98 e3       	ldi	r25, 0x38	; 56
    3668:	0e 94 67 11 	call	0x22ce	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
setSignalBandwidth():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:359
	}
	if (bw > 9) {
		bw = 9;
	}
	writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0x0f) | (bw << 4));
	setLdoFlag();
    366c:	0e 94 af 11 	call	0x235e	; 0x235e <RLhelper_SX1278::setLdoFlag() [clone .constprop.31]>
setCodingRate4():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:410
		denominator = 8;
	}
	
	int cr = denominator - 4;
	
	writeRegister(REG_MODEM_CONFIG_1, (readRegister(REG_MODEM_CONFIG_1) & 0xf1) | (cr << 1));
    3670:	6d e1       	ldi	r22, 0x1D	; 29
    3672:	8d ef       	ldi	r24, 0xFD	; 253
    3674:	98 e3       	ldi	r25, 0x38	; 56
    3676:	0e 94 ad 11 	call	0x235a	; 0x235a <RLhelper_SX1278::readRegister(unsigned char)>
    367a:	81 7f       	andi	r24, 0xF1	; 241
    367c:	48 2f       	mov	r20, r24
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src\helpers\SX1278/RL_SX1278.cpp:292
	return singleTransfer(address & 0x7f, 0x00);
}

void RLhelper_SX1278::writeRegister(uint8_t address, uint8_t value)
{
	singleTransfer(address | 0x80, value);
    367e:	42 60       	ori	r20, 0x02	; 2
writeRegister():
    3680:	6d e9       	ldi	r22, 0x9D	; 157
    3682:	8d ef       	ldi	r24, 0xFD	; 253
    3684:	98 e3       	ldi	r25, 0x38	; 56
    3686:	0e 94 67 11 	call	0x22ce	; 0x22ce <RLhelper_SX1278::singleTransfer(unsigned char, unsigned char)>
begin():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:177
	setRadioDistance(radioDistance);
	
	RLhelper.receiveMode();
    368a:	8d ef       	ldi	r24, 0xFD	; 253
    368c:	98 e3       	ldi	r25, 0x38	; 56
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:237
	RLhelper.setDint(pin);
}

void RadioLinkClass::setWaitOnTx(bool state)
{
	_waitOnTx = state;
    368e:	24 d8       	rcall	.-4024   	; 0x26d8 <RLhelper_SX1278::receiveMode()>
setWaitOnTx():
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	80 93 a5 3d 	sts	0x3DA5, r24	; 0x803da5 <RLcomm>
operator=():
    3696:	64 ee       	ldi	r22, 0xE4	; 228
    3698:	79 ec       	ldi	r23, 0xC9	; 201
    369a:	ce 01       	movw	r24, r28
    369c:	01 96       	adiw	r24, 0x01	; 1
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:190
    
    void firstPage(void) { u8g2_FirstPage(&u8g2); }
    369e:	b2 db       	rcall	.-2204   	; 0x2e04 <String::operator=(char const*) [clone .part.3]>
_ZN4U8G29firstPageEv():
    36a0:	83 e1       	ldi	r24, 0x13	; 19
    36a2:	9d e3       	ldi	r25, 0x3D	; 61
    36a4:	22 dc       	rcall	.-1980   	; 0x2eea <u8g2_FirstPage>
u8g2_DrawStr():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1041
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_ascii_next;
    36a6:	0a e3       	ldi	r16, 0x3A	; 58
    36a8:	16 e0       	ldi	r17, 0x06	; 6
setup():
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:102
  {
    msg = "LoRa ERROR !";
  }
  u8g2.firstPage();
  do {
    u8g2_prepare();
    36aa:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <u8g2_prepare()>
    36ae:	69 81       	ldd	r22, Y+1	; 0x01
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1041
    36b0:	7a 81       	ldd	r23, Y+2	; 0x02
u8g2_DrawStr():
    36b2:	00 93 15 3d 	sts	0x3D15, r16	; 0x803d15 <u8g2+0x6>
    36b6:	10 93 16 3d 	sts	0x3D16, r17	; 0x803d16 <u8g2+0x7>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8g2_font.c:1042
  return u8g2_draw_string(u8g2, x, y, str);
    36ba:	82 e0       	ldi	r24, 0x02	; 2
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <u8g2_draw_string.constprop.60>
_ZN4U8G28nextPageEv():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:191
    uint8_t nextPage(void) { return u8g2_NextPage(&u8g2); }
    36c2:	83 e1       	ldi	r24, 0x13	; 19
    36c4:	9d e3       	ldi	r25, 0x3D	; 61
    36c6:	e8 db       	rcall	.-2096   	; 0x2e98 <u8g2_NextPage>
setup():
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:104
    u8g2.drawStr(0, 2, msg.c_str());
  } while ( u8g2.nextPage() );
    36c8:	81 11       	cpse	r24, r1
    36ca:	ef cf       	rjmp	.-34     	; 0x36aa <main+0x1c6>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:105
  delay(2000);
    36cc:	60 ed       	ldi	r22, 0xD0	; 208
    36ce:	77 e0       	ldi	r23, 0x07	; 7
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	0e 94 b2 07 	call	0xf64	; 0xf64 <delay>
home():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:390
    uint8_t userInterfaceInputValue(const char *title, const char *pre, uint8_t *value, uint8_t lo, uint8_t hi, uint8_t digits, const char *post) {
      return u8g2_UserInterfaceInputValue(&u8g2, title, pre, value, lo, hi, digits, post); }
    

     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    36d8:	10 92 a1 3d 	sts	0x3DA1, r1	; 0x803da1 <u8g2+0x92>
    36dc:	10 92 a2 3d 	sts	0x3DA2, r1	; 0x803da2 <u8g2+0x93>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src\clib/u8x8_8x8.c:287
    36e0:	10 92 a3 3d 	sts	0x3DA3, r1	; 0x803da3 <u8g2+0x94>
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:127
    /* initInterface is part if initDisplay, do not call both use either initDisplay OR initInterface */       
    void initInterface(void) {          
      u8g2_InitInterface(&u8g2); }
      
    void clearDisplay(void) {
      u8g2_ClearDisplay(&u8g2); }
    36e4:	10 92 a4 3d 	sts	0x3DA4, r1	; 0x803da4 <u8g2+0x95>
u8x8_utf8_init():
D:\Users\Admin\Documents\Arduino\libraries\U8g2\src/U8g2lib.h:188
    u8g2_uint_t getDisplayWidth(void) { return u8g2_GetDisplayWidth(&u8g2); }

    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    36e8:	10 92 2b 3d 	sts	0x3D2B, r1	; 0x803d2b <u8g2+0x1c>
_ZN4U8G212clearDisplayEv():
    36ec:	0f dc       	rcall	.-2018   	; 0x2f0c <u8g2_ClearDisplay.constprop.64>
_ZN4U8G211clearBufferEv():
    36ee:	83 e1       	ldi	r24, 0x13	; 19
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:107
  u8g2.clear();
  drawMenu();
    36f0:	9d e3       	ldi	r25, 0x3D	; 61
    36f2:	bd db       	rcall	.-2182   	; 0x2e6e <u8g2_ClearBuffer>
setup():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:114
  char buf[33];
  *this = dtostrf(value, (decimalPlaces + 2), decimalPlaces, buf);
}

String::~String() {
  free(buffer);
    36f4:	18 dc       	rcall	.-2000   	; 0x2f26 <drawMenu()>
__base_dtor ():
    36f6:	89 81       	ldd	r24, Y+1	; 0x01
    36f8:	9a 81       	ldd	r25, Y+2	; 0x02
    36fa:	3b d6       	rcall	.+3190   	; 0x4372 <free>
    36fc:	8e 01       	movw	r16, r28
    36fe:	0b 5e       	subi	r16, 0xEB	; 235
    3700:	1f 4f       	sbci	r17, 0xFF	; 255
publishNum():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:310
  rl_packets packet;
  switch (version) {
	  case 1:
	  default:
		  packet.current.destinationID = destinationid;
		  packet.current.senderID = senderid;
    3702:	8d ef       	ldi	r24, 0xFD	; 253
    3704:	d8 2e       	mov	r13, r24
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:312
		  packet.current.childID = childid;
		  packet.current.sensordataType = (E_NUMERICSENSOR << 3) + D_NUM;
    3706:	99 e0       	ldi	r25, 0x09	; 9
    3708:	c9 2e       	mov	r12, r25
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:314
		  packet.current.data.num.value = value;
		  packet.current.data.num.divider = 1;
    370a:	ee 24       	eor	r14, r14
    370c:	e3 94       	inc	r14
    370e:	f1 2c       	mov	r15, r1
publishPaquet():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:275

void RadioLinkClass::publishPaquet(rl_packets* packet, byte version)
{
  if (version == 0 || version == RL_CURRENT_VERSION)
  {
    packet->current.crc = CRC_PRELOAD;
    3710:	3a e5       	ldi	r19, 0x5A	; 90
    3712:	b3 2e       	mov	r11, r19
millis():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:441
  unsigned long millis() {
    // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
    unsigned long m;
    // disable interrupts while we read timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to timer_millis)
    uint8_t oldSREG = SREG;
    3714:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:442
    cli();
    3716:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:493
        "adc %D0, %D1"    "\n\t"
        : "+r" (m), "+r" (temp), "+d" (cnt)
        );
      */
    #else
      m = timingStruct.timer_millis;
    3718:	80 91 82 38 	lds	r24, 0x3882	; 0x803882 <timingStruct+0x4>
    371c:	90 91 83 38 	lds	r25, 0x3883	; 0x803883 <timingStruct+0x5>
    3720:	a0 91 84 38 	lds	r26, 0x3884	; 0x803884 <timingStruct+0x6>
    3724:	b0 91 85 38 	lds	r27, 0x3885	; 0x803885 <timingStruct+0x7>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:494
      SREG = oldSREG;
    3728:	2f bf       	out	0x3f, r18	; 63
loop():
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:114

void loop()
{
  // receive activation switch
  curTime = millis();
  if ((curTime > oldTime + 1000) || (curTime < oldTime))
    372a:	40 91 97 38 	lds	r20, 0x3897	; 0x803897 <oldTime>
    372e:	50 91 98 38 	lds	r21, 0x3898	; 0x803898 <oldTime+0x1>
    3732:	60 91 99 38 	lds	r22, 0x3899	; 0x803899 <oldTime+0x2>
    3736:	70 91 9a 38 	lds	r23, 0x389A	; 0x80389a <oldTime+0x3>
    373a:	2a 01       	movw	r4, r20
    373c:	3b 01       	movw	r6, r22
    373e:	28 ee       	ldi	r18, 0xE8	; 232
    3740:	42 0e       	add	r4, r18
    3742:	23 e0       	ldi	r18, 0x03	; 3
    3744:	52 1e       	adc	r5, r18
    3746:	61 1c       	adc	r6, r1
    3748:	71 1c       	adc	r7, r1
    374a:	48 16       	cp	r4, r24
    374c:	59 06       	cpc	r5, r25
    374e:	6a 06       	cpc	r6, r26
    3750:	7b 06       	cpc	r7, r27
    3752:	28 f0       	brcs	.+10     	; 0x375e <main+0x27a>
    3754:	84 17       	cp	r24, r20
    3756:	95 07       	cpc	r25, r21
    3758:	a6 07       	cpc	r26, r22
    375a:	b7 07       	cpc	r27, r23
    375c:	88 f4       	brcc	.+34     	; 0x3780 <main+0x29c>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:116
  {
    oldTime = curTime;
    375e:	80 93 97 38 	sts	0x3897, r24	; 0x803897 <oldTime>
    3762:	90 93 98 38 	sts	0x3898, r25	; 0x803898 <oldTime+0x1>
    3766:	a0 93 99 38 	sts	0x3899, r26	; 0x803899 <oldTime+0x2>
    376a:	b0 93 9a 38 	sts	0x389A, r27	; 0x80389a <oldTime+0x3>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:117
    nbSec++;
    376e:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <nbSec>
    3772:	90 91 96 38 	lds	r25, 0x3896	; 0x803896 <nbSec+0x1>
    3776:	01 96       	adiw	r24, 0x01	; 1
    3778:	80 93 95 38 	sts	0x3895, r24	; 0x803895 <nbSec>
    377c:	90 93 96 38 	sts	0x3896, r25	; 0x803896 <nbSec+0x1>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:119
  }
  if (nbSec >= 5)
    3780:	80 91 95 38 	lds	r24, 0x3895	; 0x803895 <nbSec>
    3784:	90 91 96 38 	lds	r25, 0x3896	; 0x803896 <nbSec+0x1>
    3788:	05 97       	sbiw	r24, 0x05	; 5
    378a:	0c f4       	brge	.+2      	; 0x378e <main+0x2aa>
    378c:	70 c0       	rjmp	.+224    	; 0x386e <main+0x38a>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:121
  {
    nbSec = 0;
    378e:	10 92 95 38 	sts	0x3895, r1	; 0x803895 <nbSec>
    3792:	10 92 96 38 	sts	0x3896, r1	; 0x803896 <nbSec+0x1>
millis():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:441
  unsigned long millis() {
    // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
    unsigned long m;
    // disable interrupts while we read timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to timer_millis)
    uint8_t oldSREG = SREG;
    3796:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:442
    cli();
    3798:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:493
        "adc %D0, %D1"    "\n\t"
        : "+r" (m), "+r" (temp), "+d" (cnt)
        );
      */
    #else
      m = timingStruct.timer_millis;
    379a:	80 91 82 38 	lds	r24, 0x3882	; 0x803882 <timingStruct+0x4>
    379e:	90 91 83 38 	lds	r25, 0x3883	; 0x803883 <timingStruct+0x5>
    37a2:	a0 91 84 38 	lds	r26, 0x3884	; 0x803884 <timingStruct+0x6>
    37a6:	b0 91 85 38 	lds	r27, 0x3885	; 0x803885 <timingStruct+0x7>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:494
      SREG = oldSREG;
    37aa:	2f bf       	out	0x3f, r18	; 63
loop():
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:122
    msOUT = millis();
    37ac:	80 93 91 38 	sts	0x3891, r24	; 0x803891 <msOUT>
    37b0:	90 93 92 38 	sts	0x3892, r25	; 0x803892 <msOUT+0x1>
    37b4:	a0 93 93 38 	sts	0x3893, r26	; 0x803893 <msOUT+0x2>
    37b8:	b0 93 94 38 	sts	0x3894, r27	; 0x803894 <msOUT+0x3>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:123
    RLcomm.publishNum(HUB_ID, RL_ID_PING, RL_ID_PING, lastRSSI);
    37bc:	80 91 8f 38 	lds	r24, 0x388F	; 0x80388f <lastRSSI>
    37c0:	90 91 90 38 	lds	r25, 0x3890	; 0x803890 <lastRSSI+0x1>
    37c4:	09 2e       	mov	r0, r25
    37c6:	00 0c       	add	r0, r0
    37c8:	aa 0b       	sbc	r26, r26
    37ca:	bb 0b       	sbc	r27, r27
publishNum():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:309
{
  rl_packets packet;
  switch (version) {
	  case 1:
	  default:
		  packet.current.destinationID = destinationid;
    37cc:	19 82       	std	Y+1, r1	; 0x01
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:310
		  packet.current.senderID = senderid;
    37ce:	da 82       	std	Y+2, r13	; 0x02
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:311
		  packet.current.childID = childid;
    37d0:	db 82       	std	Y+3, r13	; 0x03
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:312
		  packet.current.sensordataType = (E_NUMERICSENSOR << 3) + D_NUM;
    37d2:	cc 82       	std	Y+4, r12	; 0x04
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:313
		  packet.current.data.num.value = value;
    37d4:	8d 83       	std	Y+5, r24	; 0x05
    37d6:	9e 83       	std	Y+6, r25	; 0x06
    37d8:	af 83       	std	Y+7, r26	; 0x07
    37da:	b8 87       	std	Y+8, r27	; 0x08
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:314
		  packet.current.data.num.divider = 1;
    37dc:	e9 86       	std	Y+9, r14	; 0x09
    37de:	fa 86       	std	Y+10, r15	; 0x0a
publishPaquet():
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:275

void RadioLinkClass::publishPaquet(rl_packets* packet, byte version)
{
  if (version == 0 || version == RL_CURRENT_VERSION)
  {
    packet->current.crc = CRC_PRELOAD;
    37e0:	bd 8a       	std	Y+21, r11	; 0x15
    37e2:	fe 01       	movw	r30, r28
    37e4:	31 96       	adiw	r30, 0x01	; 1
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:278
    for (uint8_t i = 0; i < sizeof(rl_packets)-1; i++)
    {
      packet->current.crc += ((uint8_t *)&packet->current)[i];
    37e6:	91 91       	ld	r25, Z+
    37e8:	8d 89       	ldd	r24, Y+21	; 0x15
    37ea:	89 0f       	add	r24, r25
    37ec:	8d 8b       	std	Y+21, r24	; 0x15
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:276
void RadioLinkClass::publishPaquet(rl_packets* packet, byte version)
{
  if (version == 0 || version == RL_CURRENT_VERSION)
  {
    packet->current.crc = CRC_PRELOAD;
    for (uint8_t i = 0; i < sizeof(rl_packets)-1; i++)
    37ee:	0e 17       	cp	r16, r30
    37f0:	1f 07       	cpc	r17, r31
    37f2:	c9 f7       	brne	.-14     	; 0x37e6 <main+0x302>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:280
    {
      packet->current.crc += ((uint8_t *)&packet->current)[i];
    }
	_TXdone = false;
    37f4:	10 92 7d 38 	sts	0x387D, r1	; 0x80387d <_TXdone>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:281
    RLhelper.write((uint8_t *)packet, sizeof(packet->current));
    37f8:	45 e1       	ldi	r20, 0x15	; 21
    37fa:	be 01       	movw	r22, r28
    37fc:	6f 5f       	subi	r22, 0xFF	; 255
    37fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3800:	8d ef       	ldi	r24, 0xFD	; 253
    3802:	98 e3       	ldi	r25, 0x38	; 56
    3804:	0e 94 89 13 	call	0x2712	; 0x2712 <RLhelper_SX1278::write(unsigned char*, unsigned char)>
D:\Users\Admin\Documents\Arduino\libraries\RadioLink\src/RadioLink.cpp:282
    while (_waitOnTx && !_TXdone) { delay(2); };
    3808:	80 91 a5 3d 	lds	r24, 0x3DA5	; 0x803da5 <RLcomm>
    380c:	88 23       	and	r24, r24
    380e:	91 f0       	breq	.+36     	; 0x3834 <main+0x350>
    3810:	80 91 7d 38 	lds	r24, 0x387D	; 0x80387d <_TXdone>
    3814:	81 11       	cpse	r24, r1
    3816:	0e c0       	rjmp	.+28     	; 0x3834 <main+0x350>
    3818:	62 e0       	ldi	r22, 0x02	; 2
    381a:	70 e0       	ldi	r23, 0x00	; 0
    381c:	80 e0       	ldi	r24, 0x00	; 0
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	0e 94 b2 07 	call	0xf64	; 0xf64 <delay>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:167
String &String::copy(const char *cstr, unsigned int length) {
  if (!reserve(length)) {
    invalidate();
    return *this;
  }
  len = length;
    3824:	f1 cf       	rjmp	.-30     	; 0x3808 <main+0x324>
copy():
    3826:	1d 82       	std	Y+5, r1	; 0x05
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore\api/String.cpp:168
  strcpy(buffer, cstr);
    3828:	1e 82       	std	Y+6, r1	; 0x06
    382a:	63 ee       	ldi	r22, 0xE3	; 227
    382c:	79 ec       	ldi	r23, 0xC9	; 201
    382e:	c9 01       	movw	r24, r18
    3830:	ef d6       	rcall	.+3550   	; 0x4610 <strcpy>
    3832:	c7 ce       	rjmp	.-626    	; 0x35c2 <main+0xde>
millis():
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:441
  unsigned long millis() {
    // return timer_overflow_count; // for debugging timekeeping issues where these variables are out of scope from the sketch
    unsigned long m;
    // disable interrupts while we read timer_millis or we might get an
    // inconsistent value (e.g. in the middle of a write to timer_millis)
    uint8_t oldSREG = SREG;
    3834:	2f b7       	in	r18, 0x3f	; 63
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:442
    cli();
    3836:	f8 94       	cli
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:493
        "adc %D0, %D1"    "\n\t"
        : "+r" (m), "+r" (temp), "+d" (cnt)
        );
      */
    #else
      m = timingStruct.timer_millis;
    3838:	80 91 82 38 	lds	r24, 0x3882	; 0x803882 <timingStruct+0x4>
    383c:	90 91 83 38 	lds	r25, 0x3883	; 0x803883 <timingStruct+0x5>
    3840:	a0 91 84 38 	lds	r26, 0x3884	; 0x803884 <timingStruct+0x6>
    3844:	b0 91 85 38 	lds	r27, 0x3885	; 0x803885 <timingStruct+0x7>
C:\Users\Admin\AppData\Local\Arduino15\packages\megaTinyCore\hardware\megaavr\2.6.10\cores\megatinycore/wiring.c:494
      SREG = oldSREG;
    3848:	2f bf       	out	0x3f, r18	; 63
loop():
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:124
    msTX = millis();
    384a:	80 93 8b 38 	sts	0x388B, r24	; 0x80388b <msTX>
    384e:	90 93 8c 38 	sts	0x388C, r25	; 0x80388c <msTX+0x1>
    3852:	a0 93 8d 38 	sts	0x388D, r26	; 0x80388d <msTX+0x2>
    3856:	b0 93 8e 38 	sts	0x388E, r27	; 0x80388e <msTX+0x3>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:125
    countOUT++;
    385a:	80 91 89 38 	lds	r24, 0x3889	; 0x803889 <countOUT>
    385e:	90 91 8a 38 	lds	r25, 0x388A	; 0x80388a <countOUT+0x1>
    3862:	01 96       	adiw	r24, 0x01	; 1
    3864:	80 93 89 38 	sts	0x3889, r24	; 0x803889 <countOUT>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:126
    drawMenu();
    3868:	90 93 8a 38 	sts	0x388A, r25	; 0x80388a <countOUT+0x1>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:128
  }
  if (needPing) {
    386c:	5c db       	rcall	.-2376   	; 0x2f26 <drawMenu()>
    386e:	80 91 88 38 	lds	r24, 0x3888	; 0x803888 <needPing>
    3872:	88 23       	and	r24, r24
    3874:	09 f4       	brne	.+2      	; 0x3878 <main+0x394>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:129
    needPing = false;
    3876:	4e cf       	rjmp	.-356    	; 0x3714 <main+0x230>
    3878:	10 92 88 38 	sts	0x3888, r1	; 0x803888 <needPing>
D:\HomeAssistant\DIY\MesProjets\LoRa2HA\MLA30\MLA30-ping/MLA30-ping.ino:130
    drawMenu();
    387c:	54 db       	rcall	.-2392   	; 0x2f26 <drawMenu()>
    387e:	4a cf       	rjmp	.-364    	; 0x3714 <main+0x230>

00003880 <vfprintf>:
vfprintf():
    3880:	ab e0       	ldi	r26, 0x0B	; 11
    3882:	b0 e0       	ldi	r27, 0x00	; 0
    3884:	e5 e4       	ldi	r30, 0x45	; 69
    3886:	fc e1       	ldi	r31, 0x1C	; 28
    3888:	2a c3       	rjmp	.+1620   	; 0x3ede <__prologue_saves__>
    388a:	7c 01       	movw	r14, r24
    388c:	3b 01       	movw	r6, r22
    388e:	8a 01       	movw	r16, r20
    3890:	fc 01       	movw	r30, r24
    3892:	16 82       	std	Z+6, r1	; 0x06
    3894:	17 82       	std	Z+7, r1	; 0x07
    3896:	83 81       	ldd	r24, Z+3	; 0x03
    3898:	81 ff       	sbrs	r24, 1
    389a:	ba c1       	rjmp	.+884    	; 0x3c10 <vfprintf+0x390>
    389c:	ce 01       	movw	r24, r28
    389e:	01 96       	adiw	r24, 0x01	; 1
    38a0:	5c 01       	movw	r10, r24
    38a2:	f7 01       	movw	r30, r14
    38a4:	93 81       	ldd	r25, Z+3	; 0x03
    38a6:	f3 01       	movw	r30, r6
    38a8:	93 fd       	sbrc	r25, 3
    38aa:	85 91       	lpm	r24, Z+
    38ac:	93 ff       	sbrs	r25, 3
    38ae:	81 91       	ld	r24, Z+
    38b0:	3f 01       	movw	r6, r30
    38b2:	88 23       	and	r24, r24
    38b4:	09 f4       	brne	.+2      	; 0x38b8 <vfprintf+0x38>
    38b6:	49 c1       	rjmp	.+658    	; 0x3b4a <vfprintf+0x2ca>
    38b8:	85 32       	cpi	r24, 0x25	; 37
    38ba:	39 f4       	brne	.+14     	; 0x38ca <vfprintf+0x4a>
    38bc:	93 fd       	sbrc	r25, 3
    38be:	85 91       	lpm	r24, Z+
    38c0:	93 ff       	sbrs	r25, 3
    38c2:	81 91       	ld	r24, Z+
    38c4:	3f 01       	movw	r6, r30
    38c6:	85 32       	cpi	r24, 0x25	; 37
    38c8:	21 f4       	brne	.+8      	; 0x38d2 <vfprintf+0x52>
    38ca:	b7 01       	movw	r22, r14
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	b9 d1       	rcall	.+882    	; 0x3c42 <fputc>
    38d0:	e8 cf       	rjmp	.-48     	; 0x38a2 <vfprintf+0x22>
    38d2:	91 2c       	mov	r9, r1
    38d4:	21 2c       	mov	r2, r1
    38d6:	31 2c       	mov	r3, r1
    38d8:	ff e1       	ldi	r31, 0x1F	; 31
    38da:	f3 15       	cp	r31, r3
    38dc:	38 f0       	brcs	.+14     	; 0x38ec <vfprintf+0x6c>
    38de:	8b 32       	cpi	r24, 0x2B	; 43
    38e0:	11 f1       	breq	.+68     	; 0x3926 <vfprintf+0xa6>
    38e2:	90 f4       	brcc	.+36     	; 0x3908 <vfprintf+0x88>
    38e4:	80 32       	cpi	r24, 0x20	; 32
    38e6:	09 f1       	breq	.+66     	; 0x392a <vfprintf+0xaa>
    38e8:	83 32       	cpi	r24, 0x23	; 35
    38ea:	29 f1       	breq	.+74     	; 0x3936 <vfprintf+0xb6>
    38ec:	37 fc       	sbrc	r3, 7
    38ee:	3c c0       	rjmp	.+120    	; 0x3968 <vfprintf+0xe8>
    38f0:	20 ed       	ldi	r18, 0xD0	; 208
    38f2:	28 0f       	add	r18, r24
    38f4:	2a 30       	cpi	r18, 0x0A	; 10
    38f6:	50 f5       	brcc	.+84     	; 0x394c <vfprintf+0xcc>
    38f8:	36 fe       	sbrs	r3, 6
    38fa:	20 c0       	rjmp	.+64     	; 0x393c <vfprintf+0xbc>
    38fc:	8a e0       	ldi	r24, 0x0A	; 10
    38fe:	98 9e       	mul	r9, r24
    3900:	20 0d       	add	r18, r0
    3902:	11 24       	eor	r1, r1
    3904:	92 2e       	mov	r9, r18
    3906:	06 c0       	rjmp	.+12     	; 0x3914 <vfprintf+0x94>
    3908:	8d 32       	cpi	r24, 0x2D	; 45
    390a:	91 f0       	breq	.+36     	; 0x3930 <vfprintf+0xb0>
    390c:	80 33       	cpi	r24, 0x30	; 48
    390e:	71 f7       	brne	.-36     	; 0x38ec <vfprintf+0x6c>
    3910:	68 94       	set
    3912:	30 f8       	bld	r3, 0
    3914:	f3 01       	movw	r30, r6
    3916:	93 fd       	sbrc	r25, 3
    3918:	85 91       	lpm	r24, Z+
    391a:	93 ff       	sbrs	r25, 3
    391c:	81 91       	ld	r24, Z+
    391e:	3f 01       	movw	r6, r30
    3920:	81 11       	cpse	r24, r1
    3922:	da cf       	rjmp	.-76     	; 0x38d8 <vfprintf+0x58>
    3924:	21 c0       	rjmp	.+66     	; 0x3968 <vfprintf+0xe8>
    3926:	68 94       	set
    3928:	31 f8       	bld	r3, 1
    392a:	68 94       	set
    392c:	32 f8       	bld	r3, 2
    392e:	f2 cf       	rjmp	.-28     	; 0x3914 <vfprintf+0x94>
    3930:	68 94       	set
    3932:	33 f8       	bld	r3, 3
    3934:	ef cf       	rjmp	.-34     	; 0x3914 <vfprintf+0x94>
    3936:	68 94       	set
    3938:	34 f8       	bld	r3, 4
    393a:	ec cf       	rjmp	.-40     	; 0x3914 <vfprintf+0x94>
    393c:	ea e0       	ldi	r30, 0x0A	; 10
    393e:	2e 9e       	mul	r2, r30
    3940:	20 0d       	add	r18, r0
    3942:	11 24       	eor	r1, r1
    3944:	22 2e       	mov	r2, r18
    3946:	68 94       	set
    3948:	35 f8       	bld	r3, 5
    394a:	e4 cf       	rjmp	.-56     	; 0x3914 <vfprintf+0x94>
    394c:	8e 32       	cpi	r24, 0x2E	; 46
    394e:	29 f4       	brne	.+10     	; 0x395a <vfprintf+0xda>
    3950:	36 fc       	sbrc	r3, 6
    3952:	fb c0       	rjmp	.+502    	; 0x3b4a <vfprintf+0x2ca>
    3954:	68 94       	set
    3956:	36 f8       	bld	r3, 6
    3958:	dd cf       	rjmp	.-70     	; 0x3914 <vfprintf+0x94>
    395a:	8c 36       	cpi	r24, 0x6C	; 108
    395c:	19 f4       	brne	.+6      	; 0x3964 <vfprintf+0xe4>
    395e:	68 94       	set
    3960:	37 f8       	bld	r3, 7
    3962:	d8 cf       	rjmp	.-80     	; 0x3914 <vfprintf+0x94>
    3964:	88 36       	cpi	r24, 0x68	; 104
    3966:	b1 f2       	breq	.-84     	; 0x3914 <vfprintf+0x94>
    3968:	98 2f       	mov	r25, r24
    396a:	9f 7d       	andi	r25, 0xDF	; 223
    396c:	95 54       	subi	r25, 0x45	; 69
    396e:	93 30       	cpi	r25, 0x03	; 3
    3970:	d8 f0       	brcs	.+54     	; 0x39a8 <vfprintf+0x128>
    3972:	83 36       	cpi	r24, 0x63	; 99
    3974:	91 f1       	breq	.+100    	; 0x39da <vfprintf+0x15a>
    3976:	83 37       	cpi	r24, 0x73	; 115
    3978:	b1 f1       	breq	.+108    	; 0x39e6 <vfprintf+0x166>
    397a:	83 35       	cpi	r24, 0x53	; 83
    397c:	09 f0       	breq	.+2      	; 0x3980 <vfprintf+0x100>
    397e:	5e c0       	rjmp	.+188    	; 0x3a3c <vfprintf+0x1bc>
    3980:	28 01       	movw	r4, r16
    3982:	f2 e0       	ldi	r31, 0x02	; 2
    3984:	4f 0e       	add	r4, r31
    3986:	51 1c       	adc	r5, r1
    3988:	f8 01       	movw	r30, r16
    398a:	c0 80       	ld	r12, Z
    398c:	d1 80       	ldd	r13, Z+1	; 0x01
    398e:	69 2d       	mov	r22, r9
    3990:	70 e0       	ldi	r23, 0x00	; 0
    3992:	36 fc       	sbrc	r3, 6
    3994:	02 c0       	rjmp	.+4      	; 0x399a <vfprintf+0x11a>
    3996:	6f ef       	ldi	r22, 0xFF	; 255
    3998:	7f ef       	ldi	r23, 0xFF	; 255
    399a:	c6 01       	movw	r24, r12
    399c:	3c d1       	rcall	.+632    	; 0x3c16 <strnlen_P>
    399e:	4c 01       	movw	r8, r24
    39a0:	68 94       	set
    39a2:	37 f8       	bld	r3, 7
    39a4:	82 01       	movw	r16, r4
    39a6:	0a c0       	rjmp	.+20     	; 0x39bc <vfprintf+0x13c>
    39a8:	0c 5f       	subi	r16, 0xFC	; 252
    39aa:	1f 4f       	sbci	r17, 0xFF	; 255
    39ac:	ff e3       	ldi	r31, 0x3F	; 63
    39ae:	f9 83       	std	Y+1, r31	; 0x01
    39b0:	88 24       	eor	r8, r8
    39b2:	83 94       	inc	r8
    39b4:	91 2c       	mov	r9, r1
    39b6:	65 01       	movw	r12, r10
    39b8:	e8 94       	clt
    39ba:	37 f8       	bld	r3, 7
    39bc:	33 fe       	sbrs	r3, 3
    39be:	2a c0       	rjmp	.+84     	; 0x3a14 <vfprintf+0x194>
    39c0:	52 2c       	mov	r5, r2
    39c2:	81 14       	cp	r8, r1
    39c4:	91 04       	cpc	r9, r1
    39c6:	59 f5       	brne	.+86     	; 0x3a1e <vfprintf+0x19e>
    39c8:	55 20       	and	r5, r5
    39ca:	09 f4       	brne	.+2      	; 0x39ce <vfprintf+0x14e>
    39cc:	6a cf       	rjmp	.-300    	; 0x38a2 <vfprintf+0x22>
    39ce:	b7 01       	movw	r22, r14
    39d0:	80 e2       	ldi	r24, 0x20	; 32
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	36 d1       	rcall	.+620    	; 0x3c42 <fputc>
    39d6:	5a 94       	dec	r5
    39d8:	f7 cf       	rjmp	.-18     	; 0x39c8 <vfprintf+0x148>
    39da:	f8 01       	movw	r30, r16
    39dc:	80 81       	ld	r24, Z
    39de:	89 83       	std	Y+1, r24	; 0x01
    39e0:	0e 5f       	subi	r16, 0xFE	; 254
    39e2:	1f 4f       	sbci	r17, 0xFF	; 255
    39e4:	e5 cf       	rjmp	.-54     	; 0x39b0 <vfprintf+0x130>
    39e6:	28 01       	movw	r4, r16
    39e8:	f2 e0       	ldi	r31, 0x02	; 2
    39ea:	4f 0e       	add	r4, r31
    39ec:	51 1c       	adc	r5, r1
    39ee:	f8 01       	movw	r30, r16
    39f0:	c0 80       	ld	r12, Z
    39f2:	d1 80       	ldd	r13, Z+1	; 0x01
    39f4:	69 2d       	mov	r22, r9
    39f6:	70 e0       	ldi	r23, 0x00	; 0
    39f8:	36 fc       	sbrc	r3, 6
    39fa:	02 c0       	rjmp	.+4      	; 0x3a00 <vfprintf+0x180>
    39fc:	6f ef       	ldi	r22, 0xFF	; 255
    39fe:	7f ef       	ldi	r23, 0xFF	; 255
    3a00:	c6 01       	movw	r24, r12
    3a02:	14 d1       	rcall	.+552    	; 0x3c2c <strnlen>
    3a04:	4c 01       	movw	r8, r24
    3a06:	82 01       	movw	r16, r4
    3a08:	d7 cf       	rjmp	.-82     	; 0x39b8 <vfprintf+0x138>
    3a0a:	b7 01       	movw	r22, r14
    3a0c:	80 e2       	ldi	r24, 0x20	; 32
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	18 d1       	rcall	.+560    	; 0x3c42 <fputc>
    3a12:	2a 94       	dec	r2
    3a14:	28 14       	cp	r2, r8
    3a16:	19 04       	cpc	r1, r9
    3a18:	09 f0       	breq	.+2      	; 0x3a1c <vfprintf+0x19c>
    3a1a:	b8 f7       	brcc	.-18     	; 0x3a0a <vfprintf+0x18a>
    3a1c:	d1 cf       	rjmp	.-94     	; 0x39c0 <vfprintf+0x140>
    3a1e:	f6 01       	movw	r30, r12
    3a20:	37 fc       	sbrc	r3, 7
    3a22:	85 91       	lpm	r24, Z+
    3a24:	37 fe       	sbrs	r3, 7
    3a26:	81 91       	ld	r24, Z+
    3a28:	6f 01       	movw	r12, r30
    3a2a:	b7 01       	movw	r22, r14
    3a2c:	90 e0       	ldi	r25, 0x00	; 0
    3a2e:	09 d1       	rcall	.+530    	; 0x3c42 <fputc>
    3a30:	51 10       	cpse	r5, r1
    3a32:	5a 94       	dec	r5
    3a34:	f1 e0       	ldi	r31, 0x01	; 1
    3a36:	8f 1a       	sub	r8, r31
    3a38:	91 08       	sbc	r9, r1
    3a3a:	c3 cf       	rjmp	.-122    	; 0x39c2 <vfprintf+0x142>
    3a3c:	84 36       	cpi	r24, 0x64	; 100
    3a3e:	19 f0       	breq	.+6      	; 0x3a46 <vfprintf+0x1c6>
    3a40:	89 36       	cpi	r24, 0x69	; 105
    3a42:	09 f0       	breq	.+2      	; 0x3a46 <vfprintf+0x1c6>
    3a44:	73 c0       	rjmp	.+230    	; 0x3b2c <vfprintf+0x2ac>
    3a46:	f8 01       	movw	r30, r16
    3a48:	37 fe       	sbrs	r3, 7
    3a4a:	67 c0       	rjmp	.+206    	; 0x3b1a <vfprintf+0x29a>
    3a4c:	60 81       	ld	r22, Z
    3a4e:	71 81       	ldd	r23, Z+1	; 0x01
    3a50:	82 81       	ldd	r24, Z+2	; 0x02
    3a52:	93 81       	ldd	r25, Z+3	; 0x03
    3a54:	0c 5f       	subi	r16, 0xFC	; 252
    3a56:	1f 4f       	sbci	r17, 0xFF	; 255
    3a58:	f3 2d       	mov	r31, r3
    3a5a:	ff 76       	andi	r31, 0x6F	; 111
    3a5c:	3f 2e       	mov	r3, r31
    3a5e:	97 ff       	sbrs	r25, 7
    3a60:	09 c0       	rjmp	.+18     	; 0x3a74 <vfprintf+0x1f4>
    3a62:	90 95       	com	r25
    3a64:	80 95       	com	r24
    3a66:	70 95       	com	r23
    3a68:	61 95       	neg	r22
    3a6a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a6c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a70:	68 94       	set
    3a72:	37 f8       	bld	r3, 7
    3a74:	2a e0       	ldi	r18, 0x0A	; 10
    3a76:	30 e0       	ldi	r19, 0x00	; 0
    3a78:	a5 01       	movw	r20, r10
    3a7a:	13 d1       	rcall	.+550    	; 0x3ca2 <__ultoa_invert>
    3a7c:	c8 2e       	mov	r12, r24
    3a7e:	ca 18       	sub	r12, r10
    3a80:	8c 2c       	mov	r8, r12
    3a82:	43 2c       	mov	r4, r3
    3a84:	36 fe       	sbrs	r3, 6
    3a86:	0c c0       	rjmp	.+24     	; 0x3aa0 <vfprintf+0x220>
    3a88:	e8 94       	clt
    3a8a:	40 f8       	bld	r4, 0
    3a8c:	c9 14       	cp	r12, r9
    3a8e:	40 f4       	brcc	.+16     	; 0x3aa0 <vfprintf+0x220>
    3a90:	34 fe       	sbrs	r3, 4
    3a92:	05 c0       	rjmp	.+10     	; 0x3a9e <vfprintf+0x21e>
    3a94:	32 fc       	sbrc	r3, 2
    3a96:	03 c0       	rjmp	.+6      	; 0x3a9e <vfprintf+0x21e>
    3a98:	f3 2d       	mov	r31, r3
    3a9a:	fe 7e       	andi	r31, 0xEE	; 238
    3a9c:	4f 2e       	mov	r4, r31
    3a9e:	89 2c       	mov	r8, r9
    3aa0:	44 fe       	sbrs	r4, 4
    3aa2:	90 c0       	rjmp	.+288    	; 0x3bc4 <vfprintf+0x344>
    3aa4:	fe 01       	movw	r30, r28
    3aa6:	ec 0d       	add	r30, r12
    3aa8:	f1 1d       	adc	r31, r1
    3aaa:	80 81       	ld	r24, Z
    3aac:	80 33       	cpi	r24, 0x30	; 48
    3aae:	09 f0       	breq	.+2      	; 0x3ab2 <vfprintf+0x232>
    3ab0:	82 c0       	rjmp	.+260    	; 0x3bb6 <vfprintf+0x336>
    3ab2:	24 2d       	mov	r18, r4
    3ab4:	29 7e       	andi	r18, 0xE9	; 233
    3ab6:	42 2e       	mov	r4, r18
    3ab8:	84 2d       	mov	r24, r4
    3aba:	88 70       	andi	r24, 0x08	; 8
    3abc:	58 2e       	mov	r5, r24
    3abe:	43 fc       	sbrc	r4, 3
    3ac0:	8f c0       	rjmp	.+286    	; 0x3be0 <vfprintf+0x360>
    3ac2:	40 fe       	sbrs	r4, 0
    3ac4:	89 c0       	rjmp	.+274    	; 0x3bd8 <vfprintf+0x358>
    3ac6:	9c 2c       	mov	r9, r12
    3ac8:	82 14       	cp	r8, r2
    3aca:	18 f4       	brcc	.+6      	; 0x3ad2 <vfprintf+0x252>
    3acc:	2c 0c       	add	r2, r12
    3ace:	92 2c       	mov	r9, r2
    3ad0:	98 18       	sub	r9, r8
    3ad2:	44 fe       	sbrs	r4, 4
    3ad4:	8b c0       	rjmp	.+278    	; 0x3bec <vfprintf+0x36c>
    3ad6:	b7 01       	movw	r22, r14
    3ad8:	80 e3       	ldi	r24, 0x30	; 48
    3ada:	90 e0       	ldi	r25, 0x00	; 0
    3adc:	b2 d0       	rcall	.+356    	; 0x3c42 <fputc>
    3ade:	42 fe       	sbrs	r4, 2
    3ae0:	08 c0       	rjmp	.+16     	; 0x3af2 <vfprintf+0x272>
    3ae2:	88 e7       	ldi	r24, 0x78	; 120
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	41 fe       	sbrs	r4, 1
    3ae8:	02 c0       	rjmp	.+4      	; 0x3aee <vfprintf+0x26e>
    3aea:	88 e5       	ldi	r24, 0x58	; 88
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	b7 01       	movw	r22, r14
    3af0:	a8 d0       	rcall	.+336    	; 0x3c42 <fputc>
    3af2:	c9 14       	cp	r12, r9
    3af4:	08 f4       	brcc	.+2      	; 0x3af8 <vfprintf+0x278>
    3af6:	86 c0       	rjmp	.+268    	; 0x3c04 <vfprintf+0x384>
    3af8:	ca 94       	dec	r12
    3afa:	d1 2c       	mov	r13, r1
    3afc:	9f ef       	ldi	r25, 0xFF	; 255
    3afe:	c9 1a       	sub	r12, r25
    3b00:	d9 0a       	sbc	r13, r25
    3b02:	ca 0c       	add	r12, r10
    3b04:	db 1c       	adc	r13, r11
    3b06:	f6 01       	movw	r30, r12
    3b08:	82 91       	ld	r24, -Z
    3b0a:	6f 01       	movw	r12, r30
    3b0c:	b7 01       	movw	r22, r14
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	98 d0       	rcall	.+304    	; 0x3c42 <fputc>
    3b12:	ac 14       	cp	r10, r12
    3b14:	bd 04       	cpc	r11, r13
    3b16:	b9 f7       	brne	.-18     	; 0x3b06 <vfprintf+0x286>
    3b18:	57 cf       	rjmp	.-338    	; 0x39c8 <vfprintf+0x148>
    3b1a:	60 81       	ld	r22, Z
    3b1c:	71 81       	ldd	r23, Z+1	; 0x01
    3b1e:	07 2e       	mov	r0, r23
    3b20:	00 0c       	add	r0, r0
    3b22:	88 0b       	sbc	r24, r24
    3b24:	99 0b       	sbc	r25, r25
    3b26:	0e 5f       	subi	r16, 0xFE	; 254
    3b28:	1f 4f       	sbci	r17, 0xFF	; 255
    3b2a:	96 cf       	rjmp	.-212    	; 0x3a58 <vfprintf+0x1d8>
    3b2c:	d3 2c       	mov	r13, r3
    3b2e:	e8 94       	clt
    3b30:	d4 f8       	bld	r13, 4
    3b32:	2a e0       	ldi	r18, 0x0A	; 10
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	85 37       	cpi	r24, 0x75	; 117
    3b38:	31 f1       	breq	.+76     	; 0x3b86 <vfprintf+0x306>
    3b3a:	23 2d       	mov	r18, r3
    3b3c:	29 7f       	andi	r18, 0xF9	; 249
    3b3e:	d2 2e       	mov	r13, r18
    3b40:	8f 36       	cpi	r24, 0x6F	; 111
    3b42:	f9 f0       	breq	.+62     	; 0x3b82 <vfprintf+0x302>
    3b44:	40 f4       	brcc	.+16     	; 0x3b56 <vfprintf+0x2d6>
    3b46:	88 35       	cpi	r24, 0x58	; 88
    3b48:	a1 f0       	breq	.+40     	; 0x3b72 <vfprintf+0x2f2>
    3b4a:	f7 01       	movw	r30, r14
    3b4c:	86 81       	ldd	r24, Z+6	; 0x06
    3b4e:	97 81       	ldd	r25, Z+7	; 0x07
    3b50:	2b 96       	adiw	r28, 0x0b	; 11
    3b52:	e2 e1       	ldi	r30, 0x12	; 18
    3b54:	dd c1       	rjmp	.+954    	; 0x3f10 <__epilogue_restores__>
    3b56:	80 37       	cpi	r24, 0x70	; 112
    3b58:	49 f0       	breq	.+18     	; 0x3b6c <vfprintf+0x2ec>
    3b5a:	88 37       	cpi	r24, 0x78	; 120
    3b5c:	b1 f7       	brne	.-20     	; 0x3b4a <vfprintf+0x2ca>
    3b5e:	d4 fe       	sbrs	r13, 4
    3b60:	02 c0       	rjmp	.+4      	; 0x3b66 <vfprintf+0x2e6>
    3b62:	68 94       	set
    3b64:	d2 f8       	bld	r13, 2
    3b66:	20 e1       	ldi	r18, 0x10	; 16
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	0d c0       	rjmp	.+26     	; 0x3b86 <vfprintf+0x306>
    3b6c:	68 94       	set
    3b6e:	d4 f8       	bld	r13, 4
    3b70:	f6 cf       	rjmp	.-20     	; 0x3b5e <vfprintf+0x2de>
    3b72:	34 fe       	sbrs	r3, 4
    3b74:	03 c0       	rjmp	.+6      	; 0x3b7c <vfprintf+0x2fc>
    3b76:	82 2f       	mov	r24, r18
    3b78:	86 60       	ori	r24, 0x06	; 6
    3b7a:	d8 2e       	mov	r13, r24
    3b7c:	20 e1       	ldi	r18, 0x10	; 16
    3b7e:	32 e0       	ldi	r19, 0x02	; 2
    3b80:	02 c0       	rjmp	.+4      	; 0x3b86 <vfprintf+0x306>
    3b82:	28 e0       	ldi	r18, 0x08	; 8
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	f8 01       	movw	r30, r16
    3b88:	d7 fe       	sbrs	r13, 7
    3b8a:	0e c0       	rjmp	.+28     	; 0x3ba8 <vfprintf+0x328>
    3b8c:	60 81       	ld	r22, Z
    3b8e:	71 81       	ldd	r23, Z+1	; 0x01
    3b90:	82 81       	ldd	r24, Z+2	; 0x02
    3b92:	93 81       	ldd	r25, Z+3	; 0x03
    3b94:	0c 5f       	subi	r16, 0xFC	; 252
    3b96:	1f 4f       	sbci	r17, 0xFF	; 255
    3b98:	a5 01       	movw	r20, r10
    3b9a:	83 d0       	rcall	.+262    	; 0x3ca2 <__ultoa_invert>
    3b9c:	c8 2e       	mov	r12, r24
    3b9e:	ca 18       	sub	r12, r10
    3ba0:	3d 2c       	mov	r3, r13
    3ba2:	e8 94       	clt
    3ba4:	37 f8       	bld	r3, 7
    3ba6:	6c cf       	rjmp	.-296    	; 0x3a80 <vfprintf+0x200>
    3ba8:	60 81       	ld	r22, Z
    3baa:	71 81       	ldd	r23, Z+1	; 0x01
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	80 e0       	ldi	r24, 0x00	; 0
    3bb0:	0e 5f       	subi	r16, 0xFE	; 254
    3bb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb4:	f1 cf       	rjmp	.-30     	; 0x3b98 <vfprintf+0x318>
    3bb6:	42 fc       	sbrc	r4, 2
    3bb8:	02 c0       	rjmp	.+4      	; 0x3bbe <vfprintf+0x33e>
    3bba:	83 94       	inc	r8
    3bbc:	7d cf       	rjmp	.-262    	; 0x3ab8 <vfprintf+0x238>
    3bbe:	83 94       	inc	r8
    3bc0:	83 94       	inc	r8
    3bc2:	7a cf       	rjmp	.-268    	; 0x3ab8 <vfprintf+0x238>
    3bc4:	84 2d       	mov	r24, r4
    3bc6:	86 78       	andi	r24, 0x86	; 134
    3bc8:	09 f4       	brne	.+2      	; 0x3bcc <vfprintf+0x34c>
    3bca:	76 cf       	rjmp	.-276    	; 0x3ab8 <vfprintf+0x238>
    3bcc:	f6 cf       	rjmp	.-20     	; 0x3bba <vfprintf+0x33a>
    3bce:	b7 01       	movw	r22, r14
    3bd0:	80 e2       	ldi	r24, 0x20	; 32
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	36 d0       	rcall	.+108    	; 0x3c42 <fputc>
    3bd6:	83 94       	inc	r8
    3bd8:	82 14       	cp	r8, r2
    3bda:	c8 f3       	brcs	.-14     	; 0x3bce <vfprintf+0x34e>
    3bdc:	51 2c       	mov	r5, r1
    3bde:	79 cf       	rjmp	.-270    	; 0x3ad2 <vfprintf+0x252>
    3be0:	52 2c       	mov	r5, r2
    3be2:	58 18       	sub	r5, r8
    3be4:	82 14       	cp	r8, r2
    3be6:	08 f4       	brcc	.+2      	; 0x3bea <vfprintf+0x36a>
    3be8:	74 cf       	rjmp	.-280    	; 0x3ad2 <vfprintf+0x252>
    3bea:	f8 cf       	rjmp	.-16     	; 0x3bdc <vfprintf+0x35c>
    3bec:	84 2d       	mov	r24, r4
    3bee:	86 78       	andi	r24, 0x86	; 134
    3bf0:	09 f4       	brne	.+2      	; 0x3bf4 <vfprintf+0x374>
    3bf2:	7f cf       	rjmp	.-258    	; 0x3af2 <vfprintf+0x272>
    3bf4:	8b e2       	ldi	r24, 0x2B	; 43
    3bf6:	41 fe       	sbrs	r4, 1
    3bf8:	80 e2       	ldi	r24, 0x20	; 32
    3bfa:	47 fc       	sbrc	r4, 7
    3bfc:	8d e2       	ldi	r24, 0x2D	; 45
    3bfe:	b7 01       	movw	r22, r14
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	76 cf       	rjmp	.-276    	; 0x3af0 <vfprintf+0x270>
    3c04:	b7 01       	movw	r22, r14
    3c06:	80 e3       	ldi	r24, 0x30	; 48
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	1b d0       	rcall	.+54     	; 0x3c42 <fputc>
    3c0c:	9a 94       	dec	r9
    3c0e:	71 cf       	rjmp	.-286    	; 0x3af2 <vfprintf+0x272>
    3c10:	8f ef       	ldi	r24, 0xFF	; 255
    3c12:	9f ef       	ldi	r25, 0xFF	; 255
    3c14:	9d cf       	rjmp	.-198    	; 0x3b50 <vfprintf+0x2d0>

00003c16 <strnlen_P>:
strnlen_P():
    3c16:	fc 01       	movw	r30, r24
    3c18:	05 90       	lpm	r0, Z+
    3c1a:	61 50       	subi	r22, 0x01	; 1
    3c1c:	70 40       	sbci	r23, 0x00	; 0
    3c1e:	01 10       	cpse	r0, r1
    3c20:	d8 f7       	brcc	.-10     	; 0x3c18 <strnlen_P+0x2>
    3c22:	80 95       	com	r24
    3c24:	90 95       	com	r25
    3c26:	8e 0f       	add	r24, r30
    3c28:	9f 1f       	adc	r25, r31
    3c2a:	08 95       	ret

00003c2c <strnlen>:
strnlen():
    3c2c:	fc 01       	movw	r30, r24
    3c2e:	61 50       	subi	r22, 0x01	; 1
    3c30:	70 40       	sbci	r23, 0x00	; 0
    3c32:	01 90       	ld	r0, Z+
    3c34:	01 10       	cpse	r0, r1
    3c36:	d8 f7       	brcc	.-10     	; 0x3c2e <strnlen+0x2>
    3c38:	80 95       	com	r24
    3c3a:	90 95       	com	r25
    3c3c:	8e 0f       	add	r24, r30
    3c3e:	9f 1f       	adc	r25, r31
    3c40:	08 95       	ret

00003c42 <fputc>:
fputc():
    3c42:	0f 93       	push	r16
    3c44:	1f 93       	push	r17
    3c46:	cf 93       	push	r28
    3c48:	df 93       	push	r29
    3c4a:	18 2f       	mov	r17, r24
    3c4c:	09 2f       	mov	r16, r25
    3c4e:	eb 01       	movw	r28, r22
    3c50:	8b 81       	ldd	r24, Y+3	; 0x03
    3c52:	81 fd       	sbrc	r24, 1
    3c54:	09 c0       	rjmp	.+18     	; 0x3c68 <fputc+0x26>
    3c56:	1f ef       	ldi	r17, 0xFF	; 255
    3c58:	0f ef       	ldi	r16, 0xFF	; 255
    3c5a:	81 2f       	mov	r24, r17
    3c5c:	90 2f       	mov	r25, r16
    3c5e:	df 91       	pop	r29
    3c60:	cf 91       	pop	r28
    3c62:	1f 91       	pop	r17
    3c64:	0f 91       	pop	r16
    3c66:	08 95       	ret
    3c68:	82 ff       	sbrs	r24, 2
    3c6a:	14 c0       	rjmp	.+40     	; 0x3c94 <fputc+0x52>
    3c6c:	2e 81       	ldd	r18, Y+6	; 0x06
    3c6e:	3f 81       	ldd	r19, Y+7	; 0x07
    3c70:	8c 81       	ldd	r24, Y+4	; 0x04
    3c72:	9d 81       	ldd	r25, Y+5	; 0x05
    3c74:	28 17       	cp	r18, r24
    3c76:	39 07       	cpc	r19, r25
    3c78:	3c f4       	brge	.+14     	; 0x3c88 <fputc+0x46>
    3c7a:	e8 81       	ld	r30, Y
    3c7c:	f9 81       	ldd	r31, Y+1	; 0x01
    3c7e:	cf 01       	movw	r24, r30
    3c80:	01 96       	adiw	r24, 0x01	; 1
    3c82:	88 83       	st	Y, r24
    3c84:	99 83       	std	Y+1, r25	; 0x01
    3c86:	10 83       	st	Z, r17
    3c88:	8e 81       	ldd	r24, Y+6	; 0x06
    3c8a:	9f 81       	ldd	r25, Y+7	; 0x07
    3c8c:	01 96       	adiw	r24, 0x01	; 1
    3c8e:	8e 83       	std	Y+6, r24	; 0x06
    3c90:	9f 83       	std	Y+7, r25	; 0x07
    3c92:	e3 cf       	rjmp	.-58     	; 0x3c5a <fputc+0x18>
    3c94:	e8 85       	ldd	r30, Y+8	; 0x08
    3c96:	f9 85       	ldd	r31, Y+9	; 0x09
    3c98:	81 2f       	mov	r24, r17
    3c9a:	09 95       	icall
    3c9c:	89 2b       	or	r24, r25
    3c9e:	a1 f3       	breq	.-24     	; 0x3c88 <fputc+0x46>
    3ca0:	da cf       	rjmp	.-76     	; 0x3c56 <fputc+0x14>

00003ca2 <__ultoa_invert>:
__ultoa_invert():
    3ca2:	fa 01       	movw	r30, r20
    3ca4:	aa 27       	eor	r26, r26
    3ca6:	28 30       	cpi	r18, 0x08	; 8
    3ca8:	51 f1       	breq	.+84     	; 0x3cfe <__ultoa_invert+0x5c>
    3caa:	20 31       	cpi	r18, 0x10	; 16
    3cac:	81 f1       	breq	.+96     	; 0x3d0e <__ultoa_invert+0x6c>
    3cae:	e8 94       	clt
    3cb0:	6f 93       	push	r22
    3cb2:	6e 7f       	andi	r22, 0xFE	; 254
    3cb4:	6e 5f       	subi	r22, 0xFE	; 254
    3cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb8:	8f 4f       	sbci	r24, 0xFF	; 255
    3cba:	9f 4f       	sbci	r25, 0xFF	; 255
    3cbc:	af 4f       	sbci	r26, 0xFF	; 255
    3cbe:	b1 e0       	ldi	r27, 0x01	; 1
    3cc0:	3e d0       	rcall	.+124    	; 0x3d3e <__ultoa_invert+0x9c>
    3cc2:	b4 e0       	ldi	r27, 0x04	; 4
    3cc4:	3c d0       	rcall	.+120    	; 0x3d3e <__ultoa_invert+0x9c>
    3cc6:	67 0f       	add	r22, r23
    3cc8:	78 1f       	adc	r23, r24
    3cca:	89 1f       	adc	r24, r25
    3ccc:	9a 1f       	adc	r25, r26
    3cce:	a1 1d       	adc	r26, r1
    3cd0:	68 0f       	add	r22, r24
    3cd2:	79 1f       	adc	r23, r25
    3cd4:	8a 1f       	adc	r24, r26
    3cd6:	91 1d       	adc	r25, r1
    3cd8:	a1 1d       	adc	r26, r1
    3cda:	6a 0f       	add	r22, r26
    3cdc:	71 1d       	adc	r23, r1
    3cde:	81 1d       	adc	r24, r1
    3ce0:	91 1d       	adc	r25, r1
    3ce2:	a1 1d       	adc	r26, r1
    3ce4:	20 d0       	rcall	.+64     	; 0x3d26 <__ultoa_invert+0x84>
    3ce6:	09 f4       	brne	.+2      	; 0x3cea <__ultoa_invert+0x48>
    3ce8:	68 94       	set
    3cea:	3f 91       	pop	r19
    3cec:	2a e0       	ldi	r18, 0x0A	; 10
    3cee:	26 9f       	mul	r18, r22
    3cf0:	11 24       	eor	r1, r1
    3cf2:	30 19       	sub	r19, r0
    3cf4:	30 5d       	subi	r19, 0xD0	; 208
    3cf6:	31 93       	st	Z+, r19
    3cf8:	de f6       	brtc	.-74     	; 0x3cb0 <__ultoa_invert+0xe>
    3cfa:	cf 01       	movw	r24, r30
    3cfc:	08 95       	ret
    3cfe:	46 2f       	mov	r20, r22
    3d00:	47 70       	andi	r20, 0x07	; 7
    3d02:	40 5d       	subi	r20, 0xD0	; 208
    3d04:	41 93       	st	Z+, r20
    3d06:	b3 e0       	ldi	r27, 0x03	; 3
    3d08:	0f d0       	rcall	.+30     	; 0x3d28 <__ultoa_invert+0x86>
    3d0a:	c9 f7       	brne	.-14     	; 0x3cfe <__ultoa_invert+0x5c>
    3d0c:	f6 cf       	rjmp	.-20     	; 0x3cfa <__ultoa_invert+0x58>
    3d0e:	46 2f       	mov	r20, r22
    3d10:	4f 70       	andi	r20, 0x0F	; 15
    3d12:	40 5d       	subi	r20, 0xD0	; 208
    3d14:	4a 33       	cpi	r20, 0x3A	; 58
    3d16:	18 f0       	brcs	.+6      	; 0x3d1e <__ultoa_invert+0x7c>
    3d18:	49 5d       	subi	r20, 0xD9	; 217
    3d1a:	31 fd       	sbrc	r19, 1
    3d1c:	40 52       	subi	r20, 0x20	; 32
    3d1e:	41 93       	st	Z+, r20
    3d20:	02 d0       	rcall	.+4      	; 0x3d26 <__ultoa_invert+0x84>
    3d22:	a9 f7       	brne	.-22     	; 0x3d0e <__ultoa_invert+0x6c>
    3d24:	ea cf       	rjmp	.-44     	; 0x3cfa <__ultoa_invert+0x58>
    3d26:	b4 e0       	ldi	r27, 0x04	; 4
    3d28:	a6 95       	lsr	r26
    3d2a:	97 95       	ror	r25
    3d2c:	87 95       	ror	r24
    3d2e:	77 95       	ror	r23
    3d30:	67 95       	ror	r22
    3d32:	ba 95       	dec	r27
    3d34:	c9 f7       	brne	.-14     	; 0x3d28 <__ultoa_invert+0x86>
    3d36:	00 97       	sbiw	r24, 0x00	; 0
    3d38:	61 05       	cpc	r22, r1
    3d3a:	71 05       	cpc	r23, r1
    3d3c:	08 95       	ret
    3d3e:	9b 01       	movw	r18, r22
    3d40:	ac 01       	movw	r20, r24
    3d42:	0a 2e       	mov	r0, r26
    3d44:	06 94       	lsr	r0
    3d46:	57 95       	ror	r21
    3d48:	47 95       	ror	r20
    3d4a:	37 95       	ror	r19
    3d4c:	27 95       	ror	r18
    3d4e:	ba 95       	dec	r27
    3d50:	c9 f7       	brne	.-14     	; 0x3d44 <__ultoa_invert+0xa2>
    3d52:	62 0f       	add	r22, r18
    3d54:	73 1f       	adc	r23, r19
    3d56:	84 1f       	adc	r24, r20
    3d58:	95 1f       	adc	r25, r21
    3d5a:	a0 1d       	adc	r26, r0
    3d5c:	08 95       	ret

00003d5e <__cmpsf2>:
__cmpsf2():
    3d5e:	40 d0       	rcall	.+128    	; 0x3de0 <__fp_cmp>
    3d60:	08 f4       	brcc	.+2      	; 0x3d64 <__cmpsf2+0x6>
    3d62:	81 e0       	ldi	r24, 0x01	; 1
    3d64:	08 95       	ret

00003d66 <__floatunsisf>:
__floatunsisf():
    3d66:	e8 94       	clt
    3d68:	09 c0       	rjmp	.+18     	; 0x3d7c <__floatsisf+0x12>

00003d6a <__floatsisf>:
    3d6a:	97 fb       	bst	r25, 7
    3d6c:	3e f4       	brtc	.+14     	; 0x3d7c <__floatsisf+0x12>
    3d6e:	90 95       	com	r25
    3d70:	80 95       	com	r24
    3d72:	70 95       	com	r23
    3d74:	61 95       	neg	r22
    3d76:	7f 4f       	sbci	r23, 0xFF	; 255
    3d78:	8f 4f       	sbci	r24, 0xFF	; 255
    3d7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d7c:	99 23       	and	r25, r25
    3d7e:	a9 f0       	breq	.+42     	; 0x3daa <__floatsisf+0x40>
    3d80:	f9 2f       	mov	r31, r25
    3d82:	96 e9       	ldi	r25, 0x96	; 150
    3d84:	bb 27       	eor	r27, r27
    3d86:	93 95       	inc	r25
    3d88:	f6 95       	lsr	r31
    3d8a:	87 95       	ror	r24
    3d8c:	77 95       	ror	r23
    3d8e:	67 95       	ror	r22
    3d90:	b7 95       	ror	r27
    3d92:	f1 11       	cpse	r31, r1
    3d94:	f8 cf       	rjmp	.-16     	; 0x3d86 <__floatsisf+0x1c>
    3d96:	fa f4       	brpl	.+62     	; 0x3dd6 <__floatsisf+0x6c>
    3d98:	bb 0f       	add	r27, r27
    3d9a:	11 f4       	brne	.+4      	; 0x3da0 <__floatsisf+0x36>
    3d9c:	60 ff       	sbrs	r22, 0
    3d9e:	1b c0       	rjmp	.+54     	; 0x3dd6 <__floatsisf+0x6c>
    3da0:	6f 5f       	subi	r22, 0xFF	; 255
    3da2:	7f 4f       	sbci	r23, 0xFF	; 255
    3da4:	8f 4f       	sbci	r24, 0xFF	; 255
    3da6:	9f 4f       	sbci	r25, 0xFF	; 255
    3da8:	16 c0       	rjmp	.+44     	; 0x3dd6 <__floatsisf+0x6c>
    3daa:	88 23       	and	r24, r24
    3dac:	11 f0       	breq	.+4      	; 0x3db2 <__floatsisf+0x48>
    3dae:	96 e9       	ldi	r25, 0x96	; 150
    3db0:	11 c0       	rjmp	.+34     	; 0x3dd4 <__floatsisf+0x6a>
    3db2:	77 23       	and	r23, r23
    3db4:	21 f0       	breq	.+8      	; 0x3dbe <__floatsisf+0x54>
    3db6:	9e e8       	ldi	r25, 0x8E	; 142
    3db8:	87 2f       	mov	r24, r23
    3dba:	76 2f       	mov	r23, r22
    3dbc:	05 c0       	rjmp	.+10     	; 0x3dc8 <__floatsisf+0x5e>
    3dbe:	66 23       	and	r22, r22
    3dc0:	71 f0       	breq	.+28     	; 0x3dde <__floatsisf+0x74>
    3dc2:	96 e8       	ldi	r25, 0x86	; 134
    3dc4:	86 2f       	mov	r24, r22
    3dc6:	70 e0       	ldi	r23, 0x00	; 0
    3dc8:	60 e0       	ldi	r22, 0x00	; 0
    3dca:	2a f0       	brmi	.+10     	; 0x3dd6 <__floatsisf+0x6c>
    3dcc:	9a 95       	dec	r25
    3dce:	66 0f       	add	r22, r22
    3dd0:	77 1f       	adc	r23, r23
    3dd2:	88 1f       	adc	r24, r24
    3dd4:	da f7       	brpl	.-10     	; 0x3dcc <__floatsisf+0x62>
    3dd6:	88 0f       	add	r24, r24
    3dd8:	96 95       	lsr	r25
    3dda:	87 95       	ror	r24
    3ddc:	97 f9       	bld	r25, 7
    3dde:	08 95       	ret

00003de0 <__fp_cmp>:
__fp_cmp():
    3de0:	99 0f       	add	r25, r25
    3de2:	00 08       	sbc	r0, r0
    3de4:	55 0f       	add	r21, r21
    3de6:	aa 0b       	sbc	r26, r26
    3de8:	e0 e8       	ldi	r30, 0x80	; 128
    3dea:	fe ef       	ldi	r31, 0xFE	; 254
    3dec:	16 16       	cp	r1, r22
    3dee:	17 06       	cpc	r1, r23
    3df0:	e8 07       	cpc	r30, r24
    3df2:	f9 07       	cpc	r31, r25
    3df4:	c0 f0       	brcs	.+48     	; 0x3e26 <__fp_cmp+0x46>
    3df6:	12 16       	cp	r1, r18
    3df8:	13 06       	cpc	r1, r19
    3dfa:	e4 07       	cpc	r30, r20
    3dfc:	f5 07       	cpc	r31, r21
    3dfe:	98 f0       	brcs	.+38     	; 0x3e26 <__fp_cmp+0x46>
    3e00:	62 1b       	sub	r22, r18
    3e02:	73 0b       	sbc	r23, r19
    3e04:	84 0b       	sbc	r24, r20
    3e06:	95 0b       	sbc	r25, r21
    3e08:	39 f4       	brne	.+14     	; 0x3e18 <__fp_cmp+0x38>
    3e0a:	0a 26       	eor	r0, r26
    3e0c:	61 f0       	breq	.+24     	; 0x3e26 <__fp_cmp+0x46>
    3e0e:	23 2b       	or	r18, r19
    3e10:	24 2b       	or	r18, r20
    3e12:	25 2b       	or	r18, r21
    3e14:	21 f4       	brne	.+8      	; 0x3e1e <__fp_cmp+0x3e>
    3e16:	08 95       	ret
    3e18:	0a 26       	eor	r0, r26
    3e1a:	09 f4       	brne	.+2      	; 0x3e1e <__fp_cmp+0x3e>
    3e1c:	a1 40       	sbci	r26, 0x01	; 1
    3e1e:	a6 95       	lsr	r26
    3e20:	8f ef       	ldi	r24, 0xFF	; 255
    3e22:	81 1d       	adc	r24, r1
    3e24:	81 1d       	adc	r24, r1
    3e26:	08 95       	ret

00003e28 <__fp_inf>:
__fp_inf():
    3e28:	97 f9       	bld	r25, 7
    3e2a:	9f 67       	ori	r25, 0x7F	; 127
    3e2c:	80 e8       	ldi	r24, 0x80	; 128
    3e2e:	70 e0       	ldi	r23, 0x00	; 0
    3e30:	60 e0       	ldi	r22, 0x00	; 0
    3e32:	08 95       	ret

00003e34 <__fp_nan>:
__fp_nan():
    3e34:	9f ef       	ldi	r25, 0xFF	; 255
    3e36:	80 ec       	ldi	r24, 0xC0	; 192
    3e38:	08 95       	ret

00003e3a <__fp_pscA>:
__fp_pscA():
    3e3a:	00 24       	eor	r0, r0
    3e3c:	0a 94       	dec	r0
    3e3e:	16 16       	cp	r1, r22
    3e40:	17 06       	cpc	r1, r23
    3e42:	18 06       	cpc	r1, r24
    3e44:	09 06       	cpc	r0, r25
    3e46:	08 95       	ret

00003e48 <__fp_pscB>:
__fp_pscB():
    3e48:	00 24       	eor	r0, r0
    3e4a:	0a 94       	dec	r0
    3e4c:	12 16       	cp	r1, r18
    3e4e:	13 06       	cpc	r1, r19
    3e50:	14 06       	cpc	r1, r20
    3e52:	05 06       	cpc	r0, r21
    3e54:	08 95       	ret

00003e56 <__fp_round>:
__fp_round():
    3e56:	09 2e       	mov	r0, r25
    3e58:	03 94       	inc	r0
    3e5a:	00 0c       	add	r0, r0
    3e5c:	11 f4       	brne	.+4      	; 0x3e62 <__fp_round+0xc>
    3e5e:	88 23       	and	r24, r24
    3e60:	52 f0       	brmi	.+20     	; 0x3e76 <__fp_round+0x20>
    3e62:	bb 0f       	add	r27, r27
    3e64:	40 f4       	brcc	.+16     	; 0x3e76 <__fp_round+0x20>
    3e66:	bf 2b       	or	r27, r31
    3e68:	11 f4       	brne	.+4      	; 0x3e6e <__fp_round+0x18>
    3e6a:	60 ff       	sbrs	r22, 0
    3e6c:	04 c0       	rjmp	.+8      	; 0x3e76 <__fp_round+0x20>
    3e6e:	6f 5f       	subi	r22, 0xFF	; 255
    3e70:	7f 4f       	sbci	r23, 0xFF	; 255
    3e72:	8f 4f       	sbci	r24, 0xFF	; 255
    3e74:	9f 4f       	sbci	r25, 0xFF	; 255
    3e76:	08 95       	ret

00003e78 <__fp_split3>:
__fp_split3():
    3e78:	57 fd       	sbrc	r21, 7
    3e7a:	90 58       	subi	r25, 0x80	; 128
    3e7c:	44 0f       	add	r20, r20
    3e7e:	55 1f       	adc	r21, r21
    3e80:	59 f0       	breq	.+22     	; 0x3e98 <__fp_splitA+0x10>
    3e82:	5f 3f       	cpi	r21, 0xFF	; 255
    3e84:	71 f0       	breq	.+28     	; 0x3ea2 <__fp_splitA+0x1a>
    3e86:	47 95       	ror	r20

00003e88 <__fp_splitA>:
    3e88:	88 0f       	add	r24, r24
    3e8a:	97 fb       	bst	r25, 7
    3e8c:	99 1f       	adc	r25, r25
    3e8e:	61 f0       	breq	.+24     	; 0x3ea8 <__fp_splitA+0x20>
    3e90:	9f 3f       	cpi	r25, 0xFF	; 255
    3e92:	79 f0       	breq	.+30     	; 0x3eb2 <__fp_splitA+0x2a>
    3e94:	87 95       	ror	r24
    3e96:	08 95       	ret
    3e98:	12 16       	cp	r1, r18
    3e9a:	13 06       	cpc	r1, r19
    3e9c:	14 06       	cpc	r1, r20
    3e9e:	55 1f       	adc	r21, r21
    3ea0:	f2 cf       	rjmp	.-28     	; 0x3e86 <__fp_split3+0xe>
    3ea2:	46 95       	lsr	r20
    3ea4:	f1 df       	rcall	.-30     	; 0x3e88 <__fp_splitA>
    3ea6:	08 c0       	rjmp	.+16     	; 0x3eb8 <__fp_splitA+0x30>
    3ea8:	16 16       	cp	r1, r22
    3eaa:	17 06       	cpc	r1, r23
    3eac:	18 06       	cpc	r1, r24
    3eae:	99 1f       	adc	r25, r25
    3eb0:	f1 cf       	rjmp	.-30     	; 0x3e94 <__fp_splitA+0xc>
    3eb2:	86 95       	lsr	r24
    3eb4:	71 05       	cpc	r23, r1
    3eb6:	61 05       	cpc	r22, r1
    3eb8:	08 94       	sec
    3eba:	08 95       	ret

00003ebc <__fp_zero>:
__fp_zero():
    3ebc:	e8 94       	clt

00003ebe <__fp_szero>:
    3ebe:	bb 27       	eor	r27, r27
    3ec0:	66 27       	eor	r22, r22
    3ec2:	77 27       	eor	r23, r23
    3ec4:	cb 01       	movw	r24, r22
    3ec6:	97 f9       	bld	r25, 7
    3ec8:	08 95       	ret

00003eca <__muluhisi3>:
__muluhisi3():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    3eca:	3a d0       	rcall	.+116    	; 0x3f40 <__umulhisi3>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    3ecc:	a5 9f       	mul	r26, r21
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    3ece:	90 0d       	add	r25, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    3ed0:	b4 9f       	mul	r27, r20
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    3ed2:	90 0d       	add	r25, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    3ed4:	a4 9f       	mul	r26, r20
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    3ed6:	80 0d       	add	r24, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    3ed8:	91 1d       	adc	r25, r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    3eda:	11 24       	eor	r1, r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    3edc:	08 95       	ret

00003ede <__prologue_saves__>:
__prologue_saves__():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    3ede:	2f 92       	push	r2
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    3ee0:	3f 92       	push	r3
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    3ee2:	4f 92       	push	r4
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    3ee4:	5f 92       	push	r5
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    3ee6:	6f 92       	push	r6
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    3ee8:	7f 92       	push	r7
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    3eea:	8f 92       	push	r8
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    3eec:	9f 92       	push	r9
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    3eee:	af 92       	push	r10
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    3ef0:	bf 92       	push	r11
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    3ef2:	cf 92       	push	r12
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    3ef4:	df 92       	push	r13
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    3ef6:	ef 92       	push	r14
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    3ef8:	ff 92       	push	r15
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    3efa:	0f 93       	push	r16
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    3efc:	1f 93       	push	r17
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    3efe:	cf 93       	push	r28
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    3f00:	df 93       	push	r29
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2193
    3f02:	cd b7       	in	r28, 0x3d	; 61
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2194
    3f04:	de b7       	in	r29, 0x3e	; 62
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2195
    3f06:	ca 1b       	sub	r28, r26
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2196
    3f08:	db 0b       	sbc	r29, r27
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2197
    3f0a:	cd bf       	out	0x3d, r28	; 61
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2198
    3f0c:	de bf       	out	0x3e, r29	; 62
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    3f0e:	09 94       	ijmp

00003f10 <__epilogue_restores__>:
__epilogue_restores__():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    3f10:	2a 88       	ldd	r2, Y+18	; 0x12
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    3f12:	39 88       	ldd	r3, Y+17	; 0x11
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    3f14:	48 88       	ldd	r4, Y+16	; 0x10
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    3f16:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    3f18:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    3f1a:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    3f1c:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    3f1e:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    3f20:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    3f22:	b9 84       	ldd	r11, Y+9	; 0x09
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    3f24:	c8 84       	ldd	r12, Y+8	; 0x08
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    3f26:	df 80       	ldd	r13, Y+7	; 0x07
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    3f28:	ee 80       	ldd	r14, Y+6	; 0x06
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    3f2a:	fd 80       	ldd	r15, Y+5	; 0x05
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    3f2c:	0c 81       	ldd	r16, Y+4	; 0x04
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    3f2e:	1b 81       	ldd	r17, Y+3	; 0x03
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    3f30:	aa 81       	ldd	r26, Y+2	; 0x02
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2245
    3f32:	b9 81       	ldd	r27, Y+1	; 0x01
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2246
    3f34:	ce 0f       	add	r28, r30
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2247
    3f36:	d1 1d       	adc	r29, r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2248
    3f38:	cd bf       	out	0x3d, r28	; 61
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2249
    3f3a:	de bf       	out	0x3e, r29	; 62
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2250
    3f3c:	ed 01       	movw	r28, r26
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    3f3e:	08 95       	ret

00003f40 <__umulhisi3>:
__umulhisi3():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    3f40:	a2 9f       	mul	r26, r18
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    3f42:	b0 01       	movw	r22, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    3f44:	b3 9f       	mul	r27, r19
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    3f46:	c0 01       	movw	r24, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    3f48:	a3 9f       	mul	r26, r19
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    3f4a:	70 0d       	add	r23, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    3f4c:	81 1d       	adc	r24, r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    3f4e:	11 24       	eor	r1, r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    3f50:	91 1d       	adc	r25, r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    3f52:	b2 9f       	mul	r27, r18
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    3f54:	70 0d       	add	r23, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    3f56:	81 1d       	adc	r24, r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    3f58:	11 24       	eor	r1, r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    3f5a:	91 1d       	adc	r25, r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    3f5c:	08 95       	ret

00003f5e <__subsf3>:
__subsf3():
    3f5e:	50 58       	subi	r21, 0x80	; 128

00003f60 <__addsf3>:
    3f60:	bb 27       	eor	r27, r27
    3f62:	aa 27       	eor	r26, r26
    3f64:	0e d0       	rcall	.+28     	; 0x3f82 <__addsf3x>
    3f66:	77 cf       	rjmp	.-274    	; 0x3e56 <__fp_round>
__addsf3():
    3f68:	68 df       	rcall	.-304    	; 0x3e3a <__fp_pscA>
    3f6a:	30 f0       	brcs	.+12     	; 0x3f78 <__addsf3+0x18>
    3f6c:	6d df       	rcall	.-294    	; 0x3e48 <__fp_pscB>
    3f6e:	20 f0       	brcs	.+8      	; 0x3f78 <__addsf3+0x18>
    3f70:	31 f4       	brne	.+12     	; 0x3f7e <__addsf3+0x1e>
    3f72:	9f 3f       	cpi	r25, 0xFF	; 255
    3f74:	11 f4       	brne	.+4      	; 0x3f7a <__addsf3+0x1a>
    3f76:	1e f4       	brtc	.+6      	; 0x3f7e <__addsf3+0x1e>
    3f78:	5d cf       	rjmp	.-326    	; 0x3e34 <__fp_nan>
    3f7a:	0e f4       	brtc	.+2      	; 0x3f7e <__addsf3+0x1e>
    3f7c:	e0 95       	com	r30
    3f7e:	e7 fb       	bst	r30, 7
    3f80:	53 cf       	rjmp	.-346    	; 0x3e28 <__fp_inf>

00003f82 <__addsf3x>:
__addsf3x():
    3f82:	e9 2f       	mov	r30, r25
    3f84:	79 df       	rcall	.-270    	; 0x3e78 <__fp_split3>
    3f86:	80 f3       	brcs	.-32     	; 0x3f68 <__addsf3+0x8>
    3f88:	ba 17       	cp	r27, r26
    3f8a:	62 07       	cpc	r22, r18
    3f8c:	73 07       	cpc	r23, r19
    3f8e:	84 07       	cpc	r24, r20
    3f90:	95 07       	cpc	r25, r21
    3f92:	18 f0       	brcs	.+6      	; 0x3f9a <__addsf3x+0x18>
    3f94:	71 f4       	brne	.+28     	; 0x3fb2 <__addsf3x+0x30>
    3f96:	9e f5       	brtc	.+102    	; 0x3ffe <__addsf3x+0x7c>
    3f98:	91 cf       	rjmp	.-222    	; 0x3ebc <__fp_zero>
    3f9a:	0e f4       	brtc	.+2      	; 0x3f9e <__addsf3x+0x1c>
    3f9c:	e0 95       	com	r30
    3f9e:	0b 2e       	mov	r0, r27
    3fa0:	ba 2f       	mov	r27, r26
    3fa2:	a0 2d       	mov	r26, r0
    3fa4:	0b 01       	movw	r0, r22
    3fa6:	b9 01       	movw	r22, r18
    3fa8:	90 01       	movw	r18, r0
    3faa:	0c 01       	movw	r0, r24
    3fac:	ca 01       	movw	r24, r20
    3fae:	a0 01       	movw	r20, r0
    3fb0:	11 24       	eor	r1, r1
    3fb2:	ff 27       	eor	r31, r31
    3fb4:	59 1b       	sub	r21, r25
    3fb6:	99 f0       	breq	.+38     	; 0x3fde <__addsf3x+0x5c>
    3fb8:	59 3f       	cpi	r21, 0xF9	; 249
    3fba:	50 f4       	brcc	.+20     	; 0x3fd0 <__addsf3x+0x4e>
    3fbc:	50 3e       	cpi	r21, 0xE0	; 224
    3fbe:	68 f1       	brcs	.+90     	; 0x401a <__stack+0x1b>
    3fc0:	1a 16       	cp	r1, r26
    3fc2:	f0 40       	sbci	r31, 0x00	; 0
    3fc4:	a2 2f       	mov	r26, r18
    3fc6:	23 2f       	mov	r18, r19
    3fc8:	34 2f       	mov	r19, r20
    3fca:	44 27       	eor	r20, r20
    3fcc:	58 5f       	subi	r21, 0xF8	; 248
    3fce:	f3 cf       	rjmp	.-26     	; 0x3fb6 <__addsf3x+0x34>
    3fd0:	46 95       	lsr	r20
    3fd2:	37 95       	ror	r19
    3fd4:	27 95       	ror	r18
    3fd6:	a7 95       	ror	r26
    3fd8:	f0 40       	sbci	r31, 0x00	; 0
    3fda:	53 95       	inc	r21
    3fdc:	c9 f7       	brne	.-14     	; 0x3fd0 <__addsf3x+0x4e>
    3fde:	7e f4       	brtc	.+30     	; 0x3ffe <__addsf3x+0x7c>
    3fe0:	1f 16       	cp	r1, r31
    3fe2:	ba 0b       	sbc	r27, r26
    3fe4:	62 0b       	sbc	r22, r18
    3fe6:	73 0b       	sbc	r23, r19
    3fe8:	84 0b       	sbc	r24, r20
    3fea:	ba f0       	brmi	.+46     	; 0x401a <__stack+0x1b>
    3fec:	91 50       	subi	r25, 0x01	; 1
    3fee:	a1 f0       	breq	.+40     	; 0x4018 <__stack+0x19>
    3ff0:	ff 0f       	add	r31, r31
    3ff2:	bb 1f       	adc	r27, r27
    3ff4:	66 1f       	adc	r22, r22
    3ff6:	77 1f       	adc	r23, r23
    3ff8:	88 1f       	adc	r24, r24
    3ffa:	c2 f7       	brpl	.-16     	; 0x3fec <__addsf3x+0x6a>
    3ffc:	0e c0       	rjmp	.+28     	; 0x401a <__stack+0x1b>
    3ffe:	ba 0f       	add	r27, r26
    4000:	62 1f       	adc	r22, r18
    4002:	73 1f       	adc	r23, r19
    4004:	84 1f       	adc	r24, r20
    4006:	48 f4       	brcc	.+18     	; 0x401a <__stack+0x1b>
    4008:	87 95       	ror	r24
    400a:	77 95       	ror	r23
    400c:	67 95       	ror	r22
    400e:	b7 95       	ror	r27
    4010:	f7 95       	ror	r31
    4012:	9e 3f       	cpi	r25, 0xFE	; 254
    4014:	08 f0       	brcs	.+2      	; 0x4018 <__stack+0x19>
    4016:	b3 cf       	rjmp	.-154    	; 0x3f7e <__addsf3+0x1e>
    4018:	93 95       	inc	r25
    401a:	88 0f       	add	r24, r24
    401c:	08 f0       	brcs	.+2      	; 0x4020 <__stack+0x21>
    401e:	99 27       	eor	r25, r25
    4020:	ee 0f       	add	r30, r30
    4022:	97 95       	ror	r25
    4024:	87 95       	ror	r24
    4026:	08 95       	ret

00004028 <__fixsfsi>:
    4028:	04 d0       	rcall	.+8      	; 0x4032 <__fixunssfsi>
    402a:	68 94       	set
    402c:	b1 11       	cpse	r27, r1
    402e:	47 cf       	rjmp	.-370    	; 0x3ebe <__fp_szero>
    4030:	08 95       	ret

00004032 <__fixunssfsi>:
    4032:	2a df       	rcall	.-428    	; 0x3e88 <__fp_splitA>
    4034:	88 f0       	brcs	.+34     	; 0x4058 <__fixunssfsi+0x26>
    4036:	9f 57       	subi	r25, 0x7F	; 127
    4038:	90 f0       	brcs	.+36     	; 0x405e <__fixunssfsi+0x2c>
    403a:	b9 2f       	mov	r27, r25
    403c:	99 27       	eor	r25, r25
    403e:	b7 51       	subi	r27, 0x17	; 23
    4040:	a0 f0       	brcs	.+40     	; 0x406a <__fixunssfsi+0x38>
    4042:	d1 f0       	breq	.+52     	; 0x4078 <__fixunssfsi+0x46>
    4044:	66 0f       	add	r22, r22
    4046:	77 1f       	adc	r23, r23
    4048:	88 1f       	adc	r24, r24
    404a:	99 1f       	adc	r25, r25
    404c:	1a f0       	brmi	.+6      	; 0x4054 <__fixunssfsi+0x22>
__fixunssfsi():
    404e:	ba 95       	dec	r27
    4050:	c9 f7       	brne	.-14     	; 0x4044 <__fixunssfsi+0x12>
    4052:	12 c0       	rjmp	.+36     	; 0x4078 <__fixunssfsi+0x46>
    4054:	b1 30       	cpi	r27, 0x01	; 1
    4056:	81 f0       	breq	.+32     	; 0x4078 <__fixunssfsi+0x46>
    4058:	31 df       	rcall	.-414    	; 0x3ebc <__fp_zero>
    405a:	b1 e0       	ldi	r27, 0x01	; 1
    405c:	08 95       	ret
    405e:	2e cf       	rjmp	.-420    	; 0x3ebc <__fp_zero>
    4060:	67 2f       	mov	r22, r23
    4062:	78 2f       	mov	r23, r24
    4064:	88 27       	eor	r24, r24
    4066:	b8 5f       	subi	r27, 0xF8	; 248
    4068:	39 f0       	breq	.+14     	; 0x4078 <__fixunssfsi+0x46>
    406a:	b9 3f       	cpi	r27, 0xF9	; 249
    406c:	cc f3       	brlt	.-14     	; 0x4060 <__fixunssfsi+0x2e>
    406e:	86 95       	lsr	r24
    4070:	77 95       	ror	r23
    4072:	67 95       	ror	r22
    4074:	b3 95       	inc	r27
    4076:	d9 f7       	brne	.-10     	; 0x406e <__fixunssfsi+0x3c>
    4078:	3e f4       	brtc	.+14     	; 0x4088 <__fixunssfsi+0x56>
    407a:	90 95       	com	r25
    407c:	80 95       	com	r24
    407e:	70 95       	com	r23
    4080:	61 95       	neg	r22
    4082:	7f 4f       	sbci	r23, 0xFF	; 255
    4084:	8f 4f       	sbci	r24, 0xFF	; 255
    4086:	9f 4f       	sbci	r25, 0xFF	; 255
    4088:	08 95       	ret

0000408a <__udivmodsi4>:
__udivmodsi4():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    408a:	a1 e2       	ldi	r26, 0x21	; 33
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    408c:	1a 2e       	mov	r1, r26
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    408e:	aa 1b       	sub	r26, r26
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    4090:	bb 1b       	sub	r27, r27
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    4092:	fd 01       	movw	r30, r26
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    4094:	0d c0       	rjmp	.+26     	; 0x40b0 <__udivmodsi4_ep>

00004096 <__udivmodsi4_loop>:
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    4096:	aa 1f       	adc	r26, r26
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    4098:	bb 1f       	adc	r27, r27
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    409a:	ee 1f       	adc	r30, r30
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    409c:	ff 1f       	adc	r31, r31
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    409e:	a2 17       	cp	r26, r18
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    40a0:	b3 07       	cpc	r27, r19
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    40a2:	e4 07       	cpc	r30, r20
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    40a4:	f5 07       	cpc	r31, r21
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    40a6:	20 f0       	brcs	.+8      	; 0x40b0 <__udivmodsi4_ep>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    40a8:	a2 1b       	sub	r26, r18
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    40aa:	b3 0b       	sbc	r27, r19
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    40ac:	e4 0b       	sbc	r30, r20
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    40ae:	f5 0b       	sbc	r31, r21

000040b0 <__udivmodsi4_ep>:
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    40b0:	66 1f       	adc	r22, r22
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    40b2:	77 1f       	adc	r23, r23
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    40b4:	88 1f       	adc	r24, r24
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    40b6:	99 1f       	adc	r25, r25
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    40b8:	1a 94       	dec	r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    40ba:	69 f7       	brne	.-38     	; 0x4096 <__udivmodsi4_loop>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    40bc:	60 95       	com	r22
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    40be:	70 95       	com	r23
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    40c0:	80 95       	com	r24
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    40c2:	90 95       	com	r25
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    40c4:	9b 01       	movw	r18, r22
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    40c6:	ac 01       	movw	r20, r24
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    40c8:	bd 01       	movw	r22, r26
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    40ca:	cf 01       	movw	r24, r30
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    40cc:	08 95       	ret

000040ce <__divmodsi4>:
__divmodsi4():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    40ce:	05 2e       	mov	r0, r21
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    40d0:	97 fb       	bst	r25, 7
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    40d2:	16 f4       	brtc	.+4      	; 0x40d8 <__divmodsi4+0xa>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    40d4:	00 94       	com	r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    40d6:	0f d0       	rcall	.+30     	; 0x40f6 <__negsi2>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    40d8:	57 fd       	sbrc	r21, 7
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    40da:	05 d0       	rcall	.+10     	; 0x40e6 <__divmodsi4_neg2>
    40dc:	d6 df       	rcall	.-84     	; 0x408a <__udivmodsi4>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    40de:	07 fc       	sbrc	r0, 7
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    40e0:	02 d0       	rcall	.+4      	; 0x40e6 <__divmodsi4_neg2>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    40e2:	46 f4       	brtc	.+16     	; 0x40f4 <__divmodsi4_exit>
    40e4:	08 c0       	rjmp	.+16     	; 0x40f6 <__negsi2>

000040e6 <__divmodsi4_neg2>:
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    40e6:	50 95       	com	r21
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    40e8:	40 95       	com	r20
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    40ea:	30 95       	com	r19
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    40ec:	21 95       	neg	r18
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    40ee:	3f 4f       	sbci	r19, 0xFF	; 255
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    40f0:	4f 4f       	sbci	r20, 0xFF	; 255
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    40f2:	5f 4f       	sbci	r21, 0xFF	; 255

000040f4 <__divmodsi4_exit>:
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    40f4:	08 95       	ret

000040f6 <__negsi2>:
__negsi2():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    40f6:	90 95       	com	r25
    40f8:	80 95       	com	r24
    40fa:	70 95       	com	r23
    40fc:	61 95       	neg	r22
    40fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4100:	8f 4f       	sbci	r24, 0xFF	; 255
    4102:	9f 4f       	sbci	r25, 0xFF	; 255
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    4104:	08 95       	ret

00004106 <__umoddi3>:
__umoddi3():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1806
    4106:	68 94       	set
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1807
    4108:	01 c0       	rjmp	.+2      	; 0x410c <__udivdi3_umoddi3>

0000410a <__udivdi3>:
__udivdi3():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1814
    410a:	e8 94       	clt

0000410c <__udivdi3_umoddi3>:
__udivdi3_umoddi3():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1818
    410c:	8f 92       	push	r8
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1819
    410e:	9f 92       	push	r9
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1820
    4110:	cf 93       	push	r28
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1821
    4112:	df 93       	push	r29
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1822
    4114:	05 d0       	rcall	.+10     	; 0x4120 <__udivmod64>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1823
    4116:	df 91       	pop	r29
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1824
    4118:	cf 91       	pop	r28
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1825
    411a:	9f 90       	pop	r9
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1826
    411c:	8f 90       	pop	r8
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1827
    411e:	08 95       	ret

00004120 <__udivmod64>:
__udivmod64():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1842
    4120:	88 24       	eor	r8, r8
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1843
    4122:	99 24       	eor	r9, r9
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1844
    4124:	f4 01       	movw	r30, r8
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1845
    4126:	e4 01       	movw	r28, r8
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1846
    4128:	b0 e4       	ldi	r27, 0x40	; 64
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1856
    412a:	9f 93       	push	r25
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1857
    412c:	aa 27       	eor	r26, r26
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1861
    412e:	9a 15       	cp	r25, r10
    4130:	8b 04       	cpc	r8, r11
    4132:	9c 04       	cpc	r9, r12
    4134:	ed 05       	cpc	r30, r13
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1862
    4136:	fe 05       	cpc	r31, r14
    4138:	cf 05       	cpc	r28, r15
    413a:	d0 07       	cpc	r29, r16
    413c:	a1 07       	cpc	r26, r17
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1863
    413e:	98 f4       	brcc	.+38     	; 0x4166 <__udivmod64+0x46>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1866
    4140:	ad 2f       	mov	r26, r29
    4142:	dc 2f       	mov	r29, r28
    4144:	cf 2f       	mov	r28, r31
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1867
    4146:	fe 2f       	mov	r31, r30
    4148:	e9 2d       	mov	r30, r9
    414a:	98 2c       	mov	r9, r8
    414c:	89 2e       	mov	r8, r25
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1868
    414e:	98 2f       	mov	r25, r24
    4150:	87 2f       	mov	r24, r23
    4152:	76 2f       	mov	r23, r22
    4154:	65 2f       	mov	r22, r21
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1869
    4156:	54 2f       	mov	r21, r20
    4158:	43 2f       	mov	r20, r19
    415a:	32 2f       	mov	r19, r18
    415c:	22 27       	eor	r18, r18
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1872
    415e:	b8 50       	subi	r27, 0x08	; 8
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1873
    4160:	31 f7       	brne	.-52     	; 0x412e <__udivmod64+0xe>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1876
    4162:	bf 91       	pop	r27
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1881
    4164:	27 c0       	rjmp	.+78     	; 0x41b4 <__udivmod64+0x94>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1884
    4166:	1b 2e       	mov	r1, r27
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1887
    4168:	bf 91       	pop	r27
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1888
    416a:	bb 27       	eor	r27, r27
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1916
    416c:	22 0f       	add	r18, r18
    416e:	33 1f       	adc	r19, r19
    4170:	44 1f       	adc	r20, r20
    4172:	55 1f       	adc	r21, r21
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1917
    4174:	66 1f       	adc	r22, r22
    4176:	77 1f       	adc	r23, r23
    4178:	88 1f       	adc	r24, r24
    417a:	99 1f       	adc	r25, r25
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1920
    417c:	88 1c       	adc	r8, r8
    417e:	99 1c       	adc	r9, r9
    4180:	ee 1f       	adc	r30, r30
    4182:	ff 1f       	adc	r31, r31
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1921
    4184:	cc 1f       	adc	r28, r28
    4186:	dd 1f       	adc	r29, r29
    4188:	aa 1f       	adc	r26, r26
    418a:	bb 1f       	adc	r27, r27
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1924
    418c:	8a 14       	cp	r8, r10
    418e:	9b 04       	cpc	r9, r11
    4190:	ec 05       	cpc	r30, r12
    4192:	fd 05       	cpc	r31, r13
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1925
    4194:	ce 05       	cpc	r28, r14
    4196:	df 05       	cpc	r29, r15
    4198:	a0 07       	cpc	r26, r16
    419a:	b1 07       	cpc	r27, r17
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1927
    419c:	48 f0       	brcs	.+18     	; 0x41b0 <__udivmod64+0x90>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1930
    419e:	8a 18       	sub	r8, r10
    41a0:	9b 08       	sbc	r9, r11
    41a2:	ec 09       	sbc	r30, r12
    41a4:	fd 09       	sbc	r31, r13
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1931
    41a6:	ce 09       	sbc	r28, r14
    41a8:	df 09       	sbc	r29, r15
    41aa:	a0 0b       	sbc	r26, r16
    41ac:	b1 0b       	sbc	r27, r17
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1935
    41ae:	21 60       	ori	r18, 0x01	; 1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1938
    41b0:	1a 94       	dec	r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1939
    41b2:	e1 f6       	brne	.-72     	; 0x416c <__udivmod64+0x4c>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1944
    41b4:	2e f4       	brtc	.+10     	; 0x41c0 <__udivmod64+0xa0>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1945
    41b6:	94 01       	movw	r18, r8
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1946
    41b8:	af 01       	movw	r20, r30
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1947
    41ba:	be 01       	movw	r22, r28
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1948
    41bc:	cd 01       	movw	r24, r26
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1950
    41be:	00 0c       	add	r0, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1952
    41c0:	08 95       	ret

000041c2 <__ashldi3>:
__ashldi3():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3169
    41c2:	00 2e       	mov	r0, r16
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3170
    41c4:	08 30       	cpi	r16, 0x08	; 8
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3171
    41c6:	90 f0       	brcs	.+36     	; 0x41ec <__ashldi3+0x2a>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3172
    41c8:	98 2f       	mov	r25, r24
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3173
    41ca:	87 2f       	mov	r24, r23
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3174
    41cc:	76 2f       	mov	r23, r22
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3175
    41ce:	65 2f       	mov	r22, r21
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3176
    41d0:	54 2f       	mov	r21, r20
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3177
    41d2:	43 2f       	mov	r20, r19
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3178
    41d4:	32 2f       	mov	r19, r18
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3179
    41d6:	22 27       	eor	r18, r18
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3180
    41d8:	08 50       	subi	r16, 0x08	; 8
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3181
    41da:	f4 cf       	rjmp	.-24     	; 0x41c4 <__ashldi3+0x2>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3182
    41dc:	22 0f       	add	r18, r18
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3183
    41de:	33 1f       	adc	r19, r19
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3184
    41e0:	44 1f       	adc	r20, r20
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3185
    41e2:	55 1f       	adc	r21, r21
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3186
    41e4:	66 1f       	adc	r22, r22
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3187
    41e6:	77 1f       	adc	r23, r23
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3188
    41e8:	88 1f       	adc	r24, r24
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3189
    41ea:	99 1f       	adc	r25, r25
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3190
    41ec:	0a 95       	dec	r16
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3191
    41ee:	b2 f7       	brpl	.-20     	; 0x41dc <__ashldi3+0x1a>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3192
    41f0:	00 2d       	mov	r16, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3193
    41f2:	08 95       	ret

000041f4 <__ashrdi3>:
__ashrdi3():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3122
    41f4:	97 fd       	sbrc	r25, 7
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3123
    41f6:	10 94       	com	r1

000041f8 <__lshrdi3>:
__lshrdi3():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3131
    41f8:	00 2e       	mov	r0, r16
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3132
    41fa:	08 30       	cpi	r16, 0x08	; 8
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3133
    41fc:	98 f0       	brcs	.+38     	; 0x4224 <__lshrdi3+0x2c>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3134
    41fe:	08 50       	subi	r16, 0x08	; 8
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3135
    4200:	23 2f       	mov	r18, r19
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3136
    4202:	34 2f       	mov	r19, r20
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3137
    4204:	45 2f       	mov	r20, r21
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3138
    4206:	56 2f       	mov	r21, r22
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3139
    4208:	67 2f       	mov	r22, r23
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3140
    420a:	78 2f       	mov	r23, r24
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3141
    420c:	89 2f       	mov	r24, r25
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3142
    420e:	91 2d       	mov	r25, r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3143
    4210:	f4 cf       	rjmp	.-24     	; 0x41fa <__lshrdi3+0x2>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3144
    4212:	15 94       	asr	r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3145
    4214:	97 95       	ror	r25
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3146
    4216:	87 95       	ror	r24
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3147
    4218:	77 95       	ror	r23
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3148
    421a:	67 95       	ror	r22
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3149
    421c:	57 95       	ror	r21
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3150
    421e:	47 95       	ror	r20
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3151
    4220:	37 95       	ror	r19
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3152
    4222:	27 95       	ror	r18
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3153
    4224:	0a 95       	dec	r16
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3154
    4226:	aa f7       	brpl	.-22     	; 0x4212 <__lshrdi3+0x1a>
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3155
    4228:	11 24       	eor	r1, r1
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3156
    422a:	00 2d       	mov	r16, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:3157
    422c:	08 95       	ret

0000422e <__tablejump2__>:
__tablejump2__():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    422e:	ee 0f       	add	r30, r30
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    4230:	ff 1f       	adc	r31, r31
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    4232:	05 90       	lpm	r0, Z+
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    4234:	f4 91       	lpm	r31, Z
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    4236:	e0 2d       	mov	r30, r0
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    4238:	09 94       	ijmp

0000423a <malloc>:
malloc():
    423a:	0f 93       	push	r16
    423c:	1f 93       	push	r17
    423e:	cf 93       	push	r28
    4240:	df 93       	push	r29
    4242:	82 30       	cpi	r24, 0x02	; 2
    4244:	91 05       	cpc	r25, r1
    4246:	10 f4       	brcc	.+4      	; 0x424c <malloc+0x12>
    4248:	82 e0       	ldi	r24, 0x02	; 2
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	e0 91 a8 3d 	lds	r30, 0x3DA8	; 0x803da8 <__flp>
    4250:	f0 91 a9 3d 	lds	r31, 0x3DA9	; 0x803da9 <__flp+0x1>
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	20 e0       	ldi	r18, 0x00	; 0
    4258:	b0 e0       	ldi	r27, 0x00	; 0
    425a:	a0 e0       	ldi	r26, 0x00	; 0
    425c:	30 97       	sbiw	r30, 0x00	; 0
    425e:	99 f4       	brne	.+38     	; 0x4286 <malloc+0x4c>
    4260:	21 15       	cp	r18, r1
    4262:	31 05       	cpc	r19, r1
    4264:	09 f4       	brne	.+2      	; 0x4268 <malloc+0x2e>
    4266:	4a c0       	rjmp	.+148    	; 0x42fc <malloc+0xc2>
    4268:	28 1b       	sub	r18, r24
    426a:	39 0b       	sbc	r19, r25
    426c:	24 30       	cpi	r18, 0x04	; 4
    426e:	31 05       	cpc	r19, r1
    4270:	d8 f5       	brcc	.+118    	; 0x42e8 <malloc+0xae>
    4272:	8a 81       	ldd	r24, Y+2	; 0x02
    4274:	9b 81       	ldd	r25, Y+3	; 0x03
    4276:	61 15       	cp	r22, r1
    4278:	71 05       	cpc	r23, r1
    427a:	89 f1       	breq	.+98     	; 0x42de <malloc+0xa4>
    427c:	fb 01       	movw	r30, r22
    427e:	82 83       	std	Z+2, r24	; 0x02
    4280:	93 83       	std	Z+3, r25	; 0x03
    4282:	fe 01       	movw	r30, r28
    4284:	11 c0       	rjmp	.+34     	; 0x42a8 <malloc+0x6e>
    4286:	40 81       	ld	r20, Z
    4288:	51 81       	ldd	r21, Z+1	; 0x01
    428a:	02 81       	ldd	r16, Z+2	; 0x02
    428c:	13 81       	ldd	r17, Z+3	; 0x03
    428e:	48 17       	cp	r20, r24
    4290:	59 07       	cpc	r21, r25
    4292:	e0 f0       	brcs	.+56     	; 0x42cc <malloc+0x92>
    4294:	48 17       	cp	r20, r24
    4296:	59 07       	cpc	r21, r25
    4298:	99 f4       	brne	.+38     	; 0x42c0 <malloc+0x86>
    429a:	10 97       	sbiw	r26, 0x00	; 0
    429c:	61 f0       	breq	.+24     	; 0x42b6 <malloc+0x7c>
    429e:	12 96       	adiw	r26, 0x02	; 2
    42a0:	0c 93       	st	X, r16
    42a2:	12 97       	sbiw	r26, 0x02	; 2
    42a4:	13 96       	adiw	r26, 0x03	; 3
    42a6:	1c 93       	st	X, r17
    42a8:	32 96       	adiw	r30, 0x02	; 2
    42aa:	cf 01       	movw	r24, r30
    42ac:	df 91       	pop	r29
    42ae:	cf 91       	pop	r28
    42b0:	1f 91       	pop	r17
    42b2:	0f 91       	pop	r16
    42b4:	08 95       	ret
    42b6:	00 93 a8 3d 	sts	0x3DA8, r16	; 0x803da8 <__flp>
    42ba:	10 93 a9 3d 	sts	0x3DA9, r17	; 0x803da9 <__flp+0x1>
    42be:	f4 cf       	rjmp	.-24     	; 0x42a8 <malloc+0x6e>
    42c0:	21 15       	cp	r18, r1
    42c2:	31 05       	cpc	r19, r1
    42c4:	51 f0       	breq	.+20     	; 0x42da <malloc+0xa0>
    42c6:	42 17       	cp	r20, r18
    42c8:	53 07       	cpc	r21, r19
    42ca:	38 f0       	brcs	.+14     	; 0x42da <malloc+0xa0>
    42cc:	a9 01       	movw	r20, r18
    42ce:	db 01       	movw	r26, r22
    42d0:	9a 01       	movw	r18, r20
    42d2:	bd 01       	movw	r22, r26
    42d4:	df 01       	movw	r26, r30
    42d6:	f8 01       	movw	r30, r16
    42d8:	c1 cf       	rjmp	.-126    	; 0x425c <malloc+0x22>
    42da:	ef 01       	movw	r28, r30
    42dc:	f9 cf       	rjmp	.-14     	; 0x42d0 <malloc+0x96>
    42de:	80 93 a8 3d 	sts	0x3DA8, r24	; 0x803da8 <__flp>
    42e2:	90 93 a9 3d 	sts	0x3DA9, r25	; 0x803da9 <__flp+0x1>
    42e6:	cd cf       	rjmp	.-102    	; 0x4282 <malloc+0x48>
    42e8:	fe 01       	movw	r30, r28
    42ea:	e2 0f       	add	r30, r18
    42ec:	f3 1f       	adc	r31, r19
    42ee:	81 93       	st	Z+, r24
    42f0:	91 93       	st	Z+, r25
    42f2:	22 50       	subi	r18, 0x02	; 2
    42f4:	31 09       	sbc	r19, r1
    42f6:	28 83       	st	Y, r18
    42f8:	39 83       	std	Y+1, r19	; 0x01
    42fa:	d7 cf       	rjmp	.-82     	; 0x42aa <malloc+0x70>
    42fc:	20 91 a6 3d 	lds	r18, 0x3DA6	; 0x803da6 <__brkval>
    4300:	30 91 a7 3d 	lds	r19, 0x3DA7	; 0x803da7 <__brkval+0x1>
    4304:	23 2b       	or	r18, r19
    4306:	41 f4       	brne	.+16     	; 0x4318 <malloc+0xde>
    4308:	20 91 08 38 	lds	r18, 0x3808	; 0x803808 <__malloc_heap_start>
    430c:	30 91 09 38 	lds	r19, 0x3809	; 0x803809 <__malloc_heap_start+0x1>
    4310:	20 93 a6 3d 	sts	0x3DA6, r18	; 0x803da6 <__brkval>
    4314:	30 93 a7 3d 	sts	0x3DA7, r19	; 0x803da7 <__brkval+0x1>
    4318:	20 91 06 38 	lds	r18, 0x3806	; 0x803806 <__malloc_heap_end>
    431c:	30 91 07 38 	lds	r19, 0x3807	; 0x803807 <__malloc_heap_end+0x1>
    4320:	21 15       	cp	r18, r1
    4322:	31 05       	cpc	r19, r1
    4324:	41 f4       	brne	.+16     	; 0x4336 <malloc+0xfc>
    4326:	2d b7       	in	r18, 0x3d	; 61
    4328:	3e b7       	in	r19, 0x3e	; 62
    432a:	40 91 0a 38 	lds	r20, 0x380A	; 0x80380a <__malloc_margin>
    432e:	50 91 0b 38 	lds	r21, 0x380B	; 0x80380b <__malloc_margin+0x1>
    4332:	24 1b       	sub	r18, r20
    4334:	35 0b       	sbc	r19, r21
    4336:	e0 91 a6 3d 	lds	r30, 0x3DA6	; 0x803da6 <__brkval>
    433a:	f0 91 a7 3d 	lds	r31, 0x3DA7	; 0x803da7 <__brkval+0x1>
    433e:	e2 17       	cp	r30, r18
    4340:	f3 07       	cpc	r31, r19
    4342:	a0 f4       	brcc	.+40     	; 0x436c <malloc+0x132>
    4344:	2e 1b       	sub	r18, r30
    4346:	3f 0b       	sbc	r19, r31
    4348:	28 17       	cp	r18, r24
    434a:	39 07       	cpc	r19, r25
    434c:	78 f0       	brcs	.+30     	; 0x436c <malloc+0x132>
    434e:	ac 01       	movw	r20, r24
    4350:	4e 5f       	subi	r20, 0xFE	; 254
    4352:	5f 4f       	sbci	r21, 0xFF	; 255
    4354:	24 17       	cp	r18, r20
    4356:	35 07       	cpc	r19, r21
    4358:	48 f0       	brcs	.+18     	; 0x436c <malloc+0x132>
    435a:	4e 0f       	add	r20, r30
    435c:	5f 1f       	adc	r21, r31
    435e:	40 93 a6 3d 	sts	0x3DA6, r20	; 0x803da6 <__brkval>
    4362:	50 93 a7 3d 	sts	0x3DA7, r21	; 0x803da7 <__brkval+0x1>
    4366:	81 93       	st	Z+, r24
    4368:	91 93       	st	Z+, r25
    436a:	9f cf       	rjmp	.-194    	; 0x42aa <malloc+0x70>
    436c:	f0 e0       	ldi	r31, 0x00	; 0
    436e:	e0 e0       	ldi	r30, 0x00	; 0
    4370:	9c cf       	rjmp	.-200    	; 0x42aa <malloc+0x70>

00004372 <free>:
free():
    4372:	cf 93       	push	r28
    4374:	df 93       	push	r29
    4376:	00 97       	sbiw	r24, 0x00	; 0
    4378:	e9 f0       	breq	.+58     	; 0x43b4 <free+0x42>
    437a:	fc 01       	movw	r30, r24
    437c:	32 97       	sbiw	r30, 0x02	; 2
    437e:	12 82       	std	Z+2, r1	; 0x02
    4380:	13 82       	std	Z+3, r1	; 0x03
    4382:	a0 91 a8 3d 	lds	r26, 0x3DA8	; 0x803da8 <__flp>
    4386:	b0 91 a9 3d 	lds	r27, 0x3DA9	; 0x803da9 <__flp+0x1>
    438a:	ed 01       	movw	r28, r26
    438c:	30 e0       	ldi	r19, 0x00	; 0
    438e:	20 e0       	ldi	r18, 0x00	; 0
    4390:	10 97       	sbiw	r26, 0x00	; 0
    4392:	a1 f4       	brne	.+40     	; 0x43bc <free+0x4a>
    4394:	20 81       	ld	r18, Z
    4396:	31 81       	ldd	r19, Z+1	; 0x01
    4398:	82 0f       	add	r24, r18
    439a:	93 1f       	adc	r25, r19
    439c:	20 91 a6 3d 	lds	r18, 0x3DA6	; 0x803da6 <__brkval>
    43a0:	30 91 a7 3d 	lds	r19, 0x3DA7	; 0x803da7 <__brkval+0x1>
    43a4:	28 17       	cp	r18, r24
    43a6:	39 07       	cpc	r19, r25
    43a8:	09 f0       	breq	.+2      	; 0x43ac <free+0x3a>
    43aa:	61 c0       	rjmp	.+194    	; 0x446e <free+0xfc>
    43ac:	e0 93 a6 3d 	sts	0x3DA6, r30	; 0x803da6 <__brkval>
    43b0:	f0 93 a7 3d 	sts	0x3DA7, r31	; 0x803da7 <__brkval+0x1>
    43b4:	df 91       	pop	r29
    43b6:	cf 91       	pop	r28
    43b8:	08 95       	ret
    43ba:	ea 01       	movw	r28, r20
    43bc:	ce 17       	cp	r28, r30
    43be:	df 07       	cpc	r29, r31
    43c0:	e8 f5       	brcc	.+122    	; 0x443c <free+0xca>
    43c2:	4a 81       	ldd	r20, Y+2	; 0x02
    43c4:	5b 81       	ldd	r21, Y+3	; 0x03
    43c6:	9e 01       	movw	r18, r28
    43c8:	41 15       	cp	r20, r1
    43ca:	51 05       	cpc	r21, r1
    43cc:	b1 f7       	brne	.-20     	; 0x43ba <free+0x48>
    43ce:	e9 01       	movw	r28, r18
    43d0:	ea 83       	std	Y+2, r30	; 0x02
    43d2:	fb 83       	std	Y+3, r31	; 0x03
    43d4:	49 91       	ld	r20, Y+
    43d6:	59 91       	ld	r21, Y+
    43d8:	c4 0f       	add	r28, r20
    43da:	d5 1f       	adc	r29, r21
    43dc:	ec 17       	cp	r30, r28
    43de:	fd 07       	cpc	r31, r29
    43e0:	61 f4       	brne	.+24     	; 0x43fa <free+0x88>
    43e2:	80 81       	ld	r24, Z
    43e4:	91 81       	ldd	r25, Z+1	; 0x01
    43e6:	02 96       	adiw	r24, 0x02	; 2
    43e8:	84 0f       	add	r24, r20
    43ea:	95 1f       	adc	r25, r21
    43ec:	e9 01       	movw	r28, r18
    43ee:	88 83       	st	Y, r24
    43f0:	99 83       	std	Y+1, r25	; 0x01
    43f2:	82 81       	ldd	r24, Z+2	; 0x02
    43f4:	93 81       	ldd	r25, Z+3	; 0x03
    43f6:	8a 83       	std	Y+2, r24	; 0x02
    43f8:	9b 83       	std	Y+3, r25	; 0x03
    43fa:	f0 e0       	ldi	r31, 0x00	; 0
    43fc:	e0 e0       	ldi	r30, 0x00	; 0
    43fe:	12 96       	adiw	r26, 0x02	; 2
    4400:	8d 91       	ld	r24, X+
    4402:	9c 91       	ld	r25, X
    4404:	13 97       	sbiw	r26, 0x03	; 3
    4406:	00 97       	sbiw	r24, 0x00	; 0
    4408:	b9 f5       	brne	.+110    	; 0x4478 <free+0x106>
    440a:	2d 91       	ld	r18, X+
    440c:	3c 91       	ld	r19, X
    440e:	11 97       	sbiw	r26, 0x01	; 1
    4410:	cd 01       	movw	r24, r26
    4412:	02 96       	adiw	r24, 0x02	; 2
    4414:	82 0f       	add	r24, r18
    4416:	93 1f       	adc	r25, r19
    4418:	20 91 a6 3d 	lds	r18, 0x3DA6	; 0x803da6 <__brkval>
    441c:	30 91 a7 3d 	lds	r19, 0x3DA7	; 0x803da7 <__brkval+0x1>
    4420:	28 17       	cp	r18, r24
    4422:	39 07       	cpc	r19, r25
    4424:	39 f6       	brne	.-114    	; 0x43b4 <free+0x42>
    4426:	30 97       	sbiw	r30, 0x00	; 0
    4428:	51 f5       	brne	.+84     	; 0x447e <free+0x10c>
    442a:	10 92 a8 3d 	sts	0x3DA8, r1	; 0x803da8 <__flp>
    442e:	10 92 a9 3d 	sts	0x3DA9, r1	; 0x803da9 <__flp+0x1>
    4432:	a0 93 a6 3d 	sts	0x3DA6, r26	; 0x803da6 <__brkval>
    4436:	b0 93 a7 3d 	sts	0x3DA7, r27	; 0x803da7 <__brkval+0x1>
    443a:	bc cf       	rjmp	.-136    	; 0x43b4 <free+0x42>
    443c:	c2 83       	std	Z+2, r28	; 0x02
    443e:	d3 83       	std	Z+3, r29	; 0x03
    4440:	40 81       	ld	r20, Z
    4442:	51 81       	ldd	r21, Z+1	; 0x01
    4444:	84 0f       	add	r24, r20
    4446:	95 1f       	adc	r25, r21
    4448:	c8 17       	cp	r28, r24
    444a:	d9 07       	cpc	r29, r25
    444c:	61 f4       	brne	.+24     	; 0x4466 <free+0xf4>
    444e:	4e 5f       	subi	r20, 0xFE	; 254
    4450:	5f 4f       	sbci	r21, 0xFF	; 255
    4452:	88 81       	ld	r24, Y
    4454:	99 81       	ldd	r25, Y+1	; 0x01
    4456:	48 0f       	add	r20, r24
    4458:	59 1f       	adc	r21, r25
    445a:	40 83       	st	Z, r20
    445c:	51 83       	std	Z+1, r21	; 0x01
    445e:	8a 81       	ldd	r24, Y+2	; 0x02
    4460:	9b 81       	ldd	r25, Y+3	; 0x03
    4462:	82 83       	std	Z+2, r24	; 0x02
    4464:	93 83       	std	Z+3, r25	; 0x03
    4466:	21 15       	cp	r18, r1
    4468:	31 05       	cpc	r19, r1
    446a:	09 f0       	breq	.+2      	; 0x446e <free+0xfc>
    446c:	b0 cf       	rjmp	.-160    	; 0x43ce <free+0x5c>
    446e:	e0 93 a8 3d 	sts	0x3DA8, r30	; 0x803da8 <__flp>
    4472:	f0 93 a9 3d 	sts	0x3DA9, r31	; 0x803da9 <__flp+0x1>
    4476:	9e cf       	rjmp	.-196    	; 0x43b4 <free+0x42>
    4478:	fd 01       	movw	r30, r26
    447a:	dc 01       	movw	r26, r24
    447c:	c0 cf       	rjmp	.-128    	; 0x43fe <free+0x8c>
    447e:	12 82       	std	Z+2, r1	; 0x02
    4480:	13 82       	std	Z+3, r1	; 0x03
    4482:	d7 cf       	rjmp	.-82     	; 0x4432 <free+0xc0>

00004484 <realloc>:
realloc():
    4484:	b0 e0       	ldi	r27, 0x00	; 0
    4486:	a0 e0       	ldi	r26, 0x00	; 0
    4488:	e7 e4       	ldi	r30, 0x47	; 71
    448a:	f2 e2       	ldi	r31, 0x22	; 34
    448c:	2a cd       	rjmp	.-1452   	; 0x3ee2 <__prologue_saves__+0x4>
    448e:	8c 01       	movw	r16, r24
    4490:	00 97       	sbiw	r24, 0x00	; 0
    4492:	41 f4       	brne	.+16     	; 0x44a4 <realloc+0x20>
    4494:	cb 01       	movw	r24, r22
    4496:	d1 de       	rcall	.-606    	; 0x423a <malloc>
    4498:	8c 01       	movw	r16, r24
    449a:	c8 01       	movw	r24, r16
    449c:	cd b7       	in	r28, 0x3d	; 61
    449e:	de b7       	in	r29, 0x3e	; 62
    44a0:	e0 e1       	ldi	r30, 0x10	; 16
    44a2:	38 cd       	rjmp	.-1424   	; 0x3f14 <__epilogue_restores__+0x4>
    44a4:	fc 01       	movw	r30, r24
    44a6:	e6 0f       	add	r30, r22
    44a8:	f7 1f       	adc	r31, r23
    44aa:	9c 01       	movw	r18, r24
    44ac:	22 50       	subi	r18, 0x02	; 2
    44ae:	31 09       	sbc	r19, r1
    44b0:	e2 17       	cp	r30, r18
    44b2:	f3 07       	cpc	r31, r19
    44b4:	08 f4       	brcc	.+2      	; 0x44b8 <realloc+0x34>
    44b6:	99 c0       	rjmp	.+306    	; 0x45ea <realloc+0x166>
    44b8:	d9 01       	movw	r26, r18
    44ba:	cd 91       	ld	r28, X+
    44bc:	dc 91       	ld	r29, X
    44be:	11 97       	sbiw	r26, 0x01	; 1
    44c0:	c6 17       	cp	r28, r22
    44c2:	d7 07       	cpc	r29, r23
    44c4:	90 f0       	brcs	.+36     	; 0x44ea <realloc+0x66>
    44c6:	c5 30       	cpi	r28, 0x05	; 5
    44c8:	d1 05       	cpc	r29, r1
    44ca:	38 f3       	brcs	.-50     	; 0x449a <realloc+0x16>
    44cc:	ce 01       	movw	r24, r28
    44ce:	04 97       	sbiw	r24, 0x04	; 4
    44d0:	86 17       	cp	r24, r22
    44d2:	97 07       	cpc	r25, r23
    44d4:	10 f3       	brcs	.-60     	; 0x449a <realloc+0x16>
    44d6:	c6 1b       	sub	r28, r22
    44d8:	d7 0b       	sbc	r29, r23
    44da:	22 97       	sbiw	r28, 0x02	; 2
    44dc:	c1 93       	st	Z+, r28
    44de:	d1 93       	st	Z+, r29
    44e0:	6d 93       	st	X+, r22
    44e2:	7c 93       	st	X, r23
    44e4:	cf 01       	movw	r24, r30
    44e6:	45 df       	rcall	.-374    	; 0x4372 <free>
    44e8:	d8 cf       	rjmp	.-80     	; 0x449a <realloc+0x16>
    44ea:	5b 01       	movw	r10, r22
    44ec:	ac 1a       	sub	r10, r28
    44ee:	bd 0a       	sbc	r11, r29
    44f0:	4c 01       	movw	r8, r24
    44f2:	8c 0e       	add	r8, r28
    44f4:	9d 1e       	adc	r9, r29
    44f6:	a0 91 a8 3d 	lds	r26, 0x3DA8	; 0x803da8 <__flp>
    44fa:	b0 91 a9 3d 	lds	r27, 0x3DA9	; 0x803da9 <__flp+0x1>
    44fe:	51 2c       	mov	r5, r1
    4500:	41 2c       	mov	r4, r1
    4502:	f1 2c       	mov	r15, r1
    4504:	e1 2c       	mov	r14, r1
    4506:	10 97       	sbiw	r26, 0x00	; 0
    4508:	31 f5       	brne	.+76     	; 0x4556 <realloc+0xd2>
    450a:	80 91 a6 3d 	lds	r24, 0x3DA6	; 0x803da6 <__brkval>
    450e:	90 91 a7 3d 	lds	r25, 0x3DA7	; 0x803da7 <__brkval+0x1>
    4512:	88 15       	cp	r24, r8
    4514:	99 05       	cpc	r25, r9
    4516:	09 f0       	breq	.+2      	; 0x451a <realloc+0x96>
    4518:	5c c0       	rjmp	.+184    	; 0x45d2 <realloc+0x14e>
    451a:	46 16       	cp	r4, r22
    451c:	57 06       	cpc	r5, r23
    451e:	08 f0       	brcs	.+2      	; 0x4522 <realloc+0x9e>
    4520:	58 c0       	rjmp	.+176    	; 0x45d2 <realloc+0x14e>
    4522:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <__malloc_heap_end>
    4526:	90 91 07 38 	lds	r25, 0x3807	; 0x803807 <__malloc_heap_end+0x1>
    452a:	00 97       	sbiw	r24, 0x00	; 0
    452c:	41 f4       	brne	.+16     	; 0x453e <realloc+0xba>
    452e:	8d b7       	in	r24, 0x3d	; 61
    4530:	9e b7       	in	r25, 0x3e	; 62
    4532:	40 91 0a 38 	lds	r20, 0x380A	; 0x80380a <__malloc_margin>
    4536:	50 91 0b 38 	lds	r21, 0x380B	; 0x80380b <__malloc_margin+0x1>
    453a:	84 1b       	sub	r24, r20
    453c:	95 0b       	sbc	r25, r21
    453e:	e8 17       	cp	r30, r24
    4540:	f9 07       	cpc	r31, r25
    4542:	08 f0       	brcs	.+2      	; 0x4546 <realloc+0xc2>
    4544:	52 c0       	rjmp	.+164    	; 0x45ea <realloc+0x166>
    4546:	e0 93 a6 3d 	sts	0x3DA6, r30	; 0x803da6 <__brkval>
    454a:	f0 93 a7 3d 	sts	0x3DA7, r31	; 0x803da7 <__brkval+0x1>
    454e:	f9 01       	movw	r30, r18
    4550:	60 83       	st	Z, r22
    4552:	71 83       	std	Z+1, r23	; 0x01
    4554:	a2 cf       	rjmp	.-188    	; 0x449a <realloc+0x16>
    4556:	8d 91       	ld	r24, X+
    4558:	9c 91       	ld	r25, X
    455a:	11 97       	sbiw	r26, 0x01	; 1
    455c:	12 96       	adiw	r26, 0x02	; 2
    455e:	6c 90       	ld	r6, X
    4560:	12 97       	sbiw	r26, 0x02	; 2
    4562:	13 96       	adiw	r26, 0x03	; 3
    4564:	7c 90       	ld	r7, X
    4566:	13 97       	sbiw	r26, 0x03	; 3
    4568:	a8 15       	cp	r26, r8
    456a:	b9 05       	cpc	r27, r9
    456c:	59 f5       	brne	.+86     	; 0x45c4 <realloc+0x140>
    456e:	6c 01       	movw	r12, r24
    4570:	42 e0       	ldi	r20, 0x02	; 2
    4572:	c4 0e       	add	r12, r20
    4574:	d1 1c       	adc	r13, r1
    4576:	ca 14       	cp	r12, r10
    4578:	db 04       	cpc	r13, r11
    457a:	20 f1       	brcs	.+72     	; 0x45c4 <realloc+0x140>
    457c:	ac 01       	movw	r20, r24
    457e:	4a 19       	sub	r20, r10
    4580:	5b 09       	sbc	r21, r11
    4582:	da 01       	movw	r26, r20
    4584:	12 96       	adiw	r26, 0x02	; 2
    4586:	15 97       	sbiw	r26, 0x05	; 5
    4588:	80 f0       	brcs	.+32     	; 0x45aa <realloc+0x126>
    458a:	62 82       	std	Z+2, r6	; 0x02
    458c:	73 82       	std	Z+3, r7	; 0x03
    458e:	40 83       	st	Z, r20
    4590:	51 83       	std	Z+1, r21	; 0x01
    4592:	d9 01       	movw	r26, r18
    4594:	6d 93       	st	X+, r22
    4596:	7c 93       	st	X, r23
    4598:	e1 14       	cp	r14, r1
    459a:	f1 04       	cpc	r15, r1
    459c:	71 f0       	breq	.+28     	; 0x45ba <realloc+0x136>
    459e:	d7 01       	movw	r26, r14
    45a0:	12 96       	adiw	r26, 0x02	; 2
    45a2:	ed 93       	st	X+, r30
    45a4:	fc 93       	st	X, r31
    45a6:	13 97       	sbiw	r26, 0x03	; 3
    45a8:	78 cf       	rjmp	.-272    	; 0x449a <realloc+0x16>
    45aa:	22 96       	adiw	r28, 0x02	; 2
    45ac:	8c 0f       	add	r24, r28
    45ae:	9d 1f       	adc	r25, r29
    45b0:	f9 01       	movw	r30, r18
    45b2:	80 83       	st	Z, r24
    45b4:	91 83       	std	Z+1, r25	; 0x01
    45b6:	f3 01       	movw	r30, r6
    45b8:	ef cf       	rjmp	.-34     	; 0x4598 <realloc+0x114>
    45ba:	e0 93 a8 3d 	sts	0x3DA8, r30	; 0x803da8 <__flp>
    45be:	f0 93 a9 3d 	sts	0x3DA9, r31	; 0x803da9 <__flp+0x1>
    45c2:	6b cf       	rjmp	.-298    	; 0x449a <realloc+0x16>
    45c4:	48 16       	cp	r4, r24
    45c6:	59 06       	cpc	r5, r25
    45c8:	08 f4       	brcc	.+2      	; 0x45cc <realloc+0x148>
    45ca:	2c 01       	movw	r4, r24
    45cc:	7d 01       	movw	r14, r26
    45ce:	d3 01       	movw	r26, r6
    45d0:	9a cf       	rjmp	.-204    	; 0x4506 <realloc+0x82>
    45d2:	cb 01       	movw	r24, r22
    45d4:	32 de       	rcall	.-924    	; 0x423a <malloc>
    45d6:	7c 01       	movw	r14, r24
    45d8:	00 97       	sbiw	r24, 0x00	; 0
    45da:	39 f0       	breq	.+14     	; 0x45ea <realloc+0x166>
    45dc:	ae 01       	movw	r20, r28
    45de:	b8 01       	movw	r22, r16
    45e0:	07 d0       	rcall	.+14     	; 0x45f0 <memcpy>
    45e2:	c8 01       	movw	r24, r16
    45e4:	c6 de       	rcall	.-628    	; 0x4372 <free>
    45e6:	87 01       	movw	r16, r14
    45e8:	58 cf       	rjmp	.-336    	; 0x449a <realloc+0x16>
    45ea:	10 e0       	ldi	r17, 0x00	; 0
    45ec:	00 e0       	ldi	r16, 0x00	; 0
    45ee:	55 cf       	rjmp	.-342    	; 0x449a <realloc+0x16>

000045f0 <memcpy>:
memcpy():
    45f0:	fb 01       	movw	r30, r22
    45f2:	dc 01       	movw	r26, r24
    45f4:	02 c0       	rjmp	.+4      	; 0x45fa <memcpy+0xa>
    45f6:	01 90       	ld	r0, Z+
    45f8:	0d 92       	st	X+, r0
    45fa:	41 50       	subi	r20, 0x01	; 1
    45fc:	50 40       	sbci	r21, 0x00	; 0
    45fe:	d8 f7       	brcc	.-10     	; 0x45f6 <memcpy+0x6>
    4600:	08 95       	ret

00004602 <memset>:
memset():
    4602:	dc 01       	movw	r26, r24
    4604:	01 c0       	rjmp	.+2      	; 0x4608 <memset+0x6>
    4606:	6d 93       	st	X+, r22
    4608:	41 50       	subi	r20, 0x01	; 1
    460a:	50 40       	sbci	r21, 0x00	; 0
    460c:	e0 f7       	brcc	.-8      	; 0x4606 <memset+0x4>
    460e:	08 95       	ret

00004610 <strcpy>:
strcpy():
    4610:	fb 01       	movw	r30, r22
    4612:	dc 01       	movw	r26, r24
    4614:	01 90       	ld	r0, Z+
    4616:	0d 92       	st	X+, r0
    4618:	00 20       	and	r0, r0
    461a:	e1 f7       	brne	.-8      	; 0x4614 <strcpy+0x4>
    461c:	08 95       	ret

0000461e <sprintf>:
sprintf():
    461e:	ae e0       	ldi	r26, 0x0E	; 14
    4620:	b0 e0       	ldi	r27, 0x00	; 0
    4622:	e4 e1       	ldi	r30, 0x14	; 20
    4624:	f3 e2       	ldi	r31, 0x23	; 35
    4626:	69 cc       	rjmp	.-1838   	; 0x3efa <__prologue_saves__+0x1c>
    4628:	0d 89       	ldd	r16, Y+21	; 0x15
    462a:	1e 89       	ldd	r17, Y+22	; 0x16
    462c:	86 e0       	ldi	r24, 0x06	; 6
    462e:	8c 83       	std	Y+4, r24	; 0x04
    4630:	09 83       	std	Y+1, r16	; 0x01
    4632:	1a 83       	std	Y+2, r17	; 0x02
    4634:	8f ef       	ldi	r24, 0xFF	; 255
    4636:	9f e7       	ldi	r25, 0x7F	; 127
    4638:	8d 83       	std	Y+5, r24	; 0x05
    463a:	9e 83       	std	Y+6, r25	; 0x06
    463c:	ae 01       	movw	r20, r28
    463e:	47 5e       	subi	r20, 0xE7	; 231
    4640:	5f 4f       	sbci	r21, 0xFF	; 255
    4642:	6f 89       	ldd	r22, Y+23	; 0x17
    4644:	78 8d       	ldd	r23, Y+24	; 0x18
    4646:	ce 01       	movw	r24, r28
    4648:	01 96       	adiw	r24, 0x01	; 1
    464a:	1a d9       	rcall	.-3532   	; 0x3880 <vfprintf>
    464c:	2f 81       	ldd	r18, Y+7	; 0x07
    464e:	38 85       	ldd	r19, Y+8	; 0x08
    4650:	02 0f       	add	r16, r18
    4652:	13 1f       	adc	r17, r19
    4654:	f8 01       	movw	r30, r16
    4656:	10 82       	st	Z, r1
    4658:	2e 96       	adiw	r28, 0x0e	; 14
    465a:	e4 e0       	ldi	r30, 0x04	; 4
    465c:	67 cc       	rjmp	.-1842   	; 0x3f2c <__epilogue_restores__+0x1c>

0000465e <_exit>:
_exit():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    465e:	f8 94       	cli

00004660 <__stop_program>:
__stop_program():
/home/admin/Arduino/toolchain-avr-special-master/gcc-build/avr/avrxmega3/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    4660:	ff cf       	rjmp	.-2      	; 0x4660 <__stop_program>
